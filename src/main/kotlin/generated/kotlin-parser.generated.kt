//
// KOMeta KotlinParser Parser
//

package kometa.kotlin_parser

import kometa.*
import kometa.util.*
import kotlin.jvm.internal.Ref

import kometa.kotlin.AST
import kometa.kotlin.Token
import kometa.kotlin.TokenMatcher

typealias _KotlinParser_Inputs = Iterable<Token>
typealias _KotlinParser_Results = Iterable<AST.AstNode>
typealias _KotlinParser_Item = MatchItem<Token, AST.AstNode>
typealias _KotlinParser_Args = Iterable<_KotlinParser_Item>
typealias _KotlinParser_Memo = MatchState<Token, AST.AstNode>
typealias _KotlinParser_Rule = Production<Token, AST.AstNode>
typealias _KotlinParser_Base = Matcher<Token, AST.AstNode>

open class KotlinParser(handleLeftRecursion: Boolean = true) : TokenMatcher<AST.AstNode>(handleLeftRecursion) {
    init {
        terminals = setOf(
            "ABSTRACT",
            "ACTUAL",
            "ADD",
            "ADD_ASSIGNMENT",
            "ANNOTATION_",
            "ARROW",
            "AS",
            "ASSIGNMENT",
            "AS_SAFE",
            "AT",
            "BREAK",
            "BY",
            "BreakAt",
            "CATCH",
            "CLASS",
            "COLON",
            "COLONCOLON",
            "COMMA",
            "COMPANION",
            "CONJ",
            "CONST",
            "CONSTRUCTOR",
            "CONTINUE",
            "CROSSINLINE",
            "CharacterLiteral",
            "ContinueAt",
            "DATA",
            "DECR",
            "DELEGATE",
            "DISJ",
            "DIV",
            "DIV_ASSIGNMENT",
            "DO",
            "DOT",
            "DOUBLE_ARROW",
            "DYNAMIC",
            "DoubleLiteral",
            "ELSE",
            "ELVIS",
            "ENUM",
            "EOF",
            "EQEQ",
            "EQEQEQ",
            "EXCL",
            "EXCL_EQ",
            "EXCL_EQEQ",
            "EXCL_EXCL",
            "EXPECT",
            "EXTERNAL",
            "FALSE",
            "FIELD",
            "FILE",
            "FINAL",
            "FINALLY",
            "FOR",
            "FUN",
            "FloatLiteral",
            "GE",
            "GET",
            "HASH",
            "IF",
            "IMPORT",
            "IN",
            "INCR",
            "INFIX",
            "INIT",
            "INLINE",
            "INNER",
            "INTERFACE",
            "INTERNAL",
            "IS",
            "IntegerLiteral",
            "LANGLE",
            "LATEINIT",
            "LCURL",
            "LE",
            "LPAREN",
            "LSQUARE",
            "LongLiteral",
            "MOD",
            "MOD_ASSIGNMENT",
            "MULT",
            "MULT_ASSIGNMENT",
            "NL",
            "NOINLINE",
            "NOT_IN",
            "NOT_IS",
            "NULL",
            "OBJECT",
            "OPEN",
            "OPERATOR",
            "OUT",
            "OVERRIDE",
            "PACKAGE",
            "PARAM",
            "PRIVATE",
            "PROPERTY",
            "PROTECTED",
            "PUBLIC",
            "QUEST",
            "QUEST_DOT",
            "Q_COLONCOLON",
            "RANGE",
            "RANGLE",
            "RCURL",
            "RECEIVER",
            "REIFIED",
            "RESERVED",
            "RETURN",
            "RPAREN",
            "RSQUARE",
            "ReturnAt",
            "SEALED",
            "SEMICOLON",
            "SET",
            "SETPARAM",
            "SUB",
            "SUB_ASSIGNMENT",
            "SUPER",
            "SUSPEND",
            "ShebangLine",
            "TAILREC",
            "THIS",
            "THROW",
            "TRUE",
            "TRY",
            "TYPEOF",
            "TYPE_ALIAS",
            "ThisAt",
            "UnsignedLiteral",
            "UnsignedLongLiteral",
            "VAL",
            "VALUE",
            "VAR",
            "VARARG",
            "WHEN",
            "WHERE",
            "WHILE",
            "quest",
            "reificationModifier",
            "stringLiteral",
            "userDefinedDeclaration",
            "userDefinedExpression",
        )
    }

    open fun kotlinFile(_memo: _KotlinParser_Memo, __index: Int, _args: _KotlinParser_Args?) {
        val _index = Ref.IntRef()
        _index.element = __index

        val _arg_index = Ref.IntRef()
        val _arg_input_index = Ref.IntRef()

        var fa: _KotlinParser_Item? = null
        var ph: _KotlinParser_Item? = null
        var il: _KotlinParser_Item? = null
        var obj: _KotlinParser_Item? = null

        // AND 1
        var _start_i1 = _index.element

        // AND 2
        var _start_i2 = _index.element

        // AND 3
        var _start_i3 = _index.element

        // AND 4
        var _start_i4 = _index.element

        // AND 5
        var _start_i5 = _index.element

        // AND 6
        var _start_i6 = _index.element

        // STAR 9
        var _start_i9 = _index.element
        val _inp9 = arrayListOf<Token?>()
        val _res9 = arrayListOf<AST.AstNode?>()

        // STAR 12
        var _start_i12 = _index.element
        val _inp12 = arrayListOf<Token?>()
        val _res12 = arrayListOf<AST.AstNode?>()

        // STAR 20
        var _start_i20 = _index.element
        val _inp20 = arrayListOf<Token?>()
        val _res20 = arrayListOf<AST.AstNode?>()

        var _label = -1
        while(true) {
            when(_label) {
                -1 -> {
                    // AND 1
                    _start_i1 = _index.element

                    // AND 2
                    _start_i2 = _index.element

                    // AND 3
                    _start_i3 = _index.element

                    // AND 4
                    _start_i4 = _index.element

                    // AND 5
                    _start_i5 = _index.element

                    // AND 6
                    _start_i6 = _index.element

                    // CALLORVAR shebangLine
                    var _r8: _KotlinParser_Item? = null
                    _r8 = _MemoCall(_memo, "shebangLine", _index.element, ::shebangLine, null)
                    if (_r8 != null) _index.element = _r8.nextIndex

                    // QUES 7
                    if (_memo.results.peek() == null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_index.element, _memo.input))
                    }
                    // AND shortcut 6
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 6
                        continue
                    }

                    // STAR 9
                    _start_i9 = _index.element
                    _label = 9
                }
                // STAR 9
                9 -> {
                    // CALLORVAR NL
                    var _r10: _KotlinParser_Item? = null
                    _r10 = _MemoCall(_memo, "NL", _index.element, ::NL, null)
                    if (_r10 != null) _index.element = _r10.nextIndex

                    // STAR 9
                    val _r9 = _memo.results.pop()
                    if (_r9 != null) {
                        _res9 += _r9.results
                        _label = 9
                        continue
                    } else {
                        _memo.results.push(_KotlinParser_Item(_start_i9, _index.element, _memo.input, _res9.filterNotNull(), true))
                    }

                    _label = 6
                }
                // AND 6
                6 -> {
                    val _r6_2 = _memo.results.pop()
                    val _r6_1 = _memo.results.pop()

                    if (_r6_1 != null && _r6_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i6, _index.element, _memo.input, (_r6_1.results + _r6_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i6
                    }

                    // AND shortcut 5
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 5
                        continue
                    }

                    // STAR 12
                    _start_i12 = _index.element
                    _label = 12
                }
                // STAR 12
                12 -> {
                    // CALLORVAR fileAnnotation
                    var _r13: _KotlinParser_Item? = null
                    _r13 = _MemoCall(_memo, "fileAnnotation", _index.element, ::fileAnnotation, null)
                    if (_r13 != null) _index.element = _r13.nextIndex

                    // STAR 12
                    val _r12 = _memo.results.pop()
                    if (_r12 != null) {
                        _res12 += _r12.results
                        _label = 12
                        continue
                    } else {
                        _memo.results.push(_KotlinParser_Item(_start_i12, _index.element, _memo.input, _res12.filterNotNull(), true))
                    }

                    // BIND fa
                    fa = _memo.results.peek()

                    _label = 5
                }
                // AND 5
                5 -> {
                    val _r5_2 = _memo.results.pop()
                    val _r5_1 = _memo.results.pop()

                    if (_r5_1 != null && _r5_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i5, _index.element, _memo.input, (_r5_1.results + _r5_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i5
                    }

                    // AND shortcut 4
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 4
                        continue
                    }

                    // CALLORVAR packageHeader
                    var _r16: _KotlinParser_Item? = null
                    _r16 = _MemoCall(_memo, "packageHeader", _index.element, ::packageHeader, null)
                    if (_r16 != null) _index.element = _r16.nextIndex

                    // QUES 15
                    if (_memo.results.peek() == null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_index.element, _memo.input))
                    }
                    // BIND ph
                    ph = _memo.results.peek()

                    _label = 4
                }
                // AND 4
                4 -> {
                    val _r4_2 = _memo.results.pop()
                    val _r4_1 = _memo.results.pop()

                    if (_r4_1 != null && _r4_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i4, _index.element, _memo.input, (_r4_1.results + _r4_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i4
                    }

                    // AND shortcut 3
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 3
                        continue
                    }

                    // CALLORVAR ImportList
                    var _r18: _KotlinParser_Item? = null
                    _r18 = _MemoCall(_memo, "ImportList", _index.element, ::ImportList, null)
                    if (_r18 != null) _index.element = _r18.nextIndex

                    // BIND il
                    il = _memo.results.peek()

                    _label = 3
                }
                // AND 3
                3 -> {
                    val _r3_2 = _memo.results.pop()
                    val _r3_1 = _memo.results.pop()

                    if (_r3_1 != null && _r3_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i3, _index.element, _memo.input, (_r3_1.results + _r3_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i3
                    }

                    // AND shortcut 2
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 2
                        continue
                    }

                    // STAR 20
                    _start_i20 = _index.element
                    _label = 20
                }
                // STAR 20
                20 -> {
                    // CALLORVAR topLevelObject
                    var _r21: _KotlinParser_Item? = null
                    _r21 = _MemoCall(_memo, "topLevelObject", _index.element, ::topLevelObject, null)
                    if (_r21 != null) _index.element = _r21.nextIndex

                    // STAR 20
                    val _r20 = _memo.results.pop()
                    if (_r20 != null) {
                        _res20 += _r20.results
                        _label = 20
                        continue
                    } else {
                        _memo.results.push(_KotlinParser_Item(_start_i20, _index.element, _memo.input, _res20.filterNotNull(), true))
                    }

                    // BIND obj
                    obj = _memo.results.peek()

                    _label = 2
                }
                // AND 2
                2 -> {
                    val _r2_2 = _memo.results.pop()
                    val _r2_1 = _memo.results.pop()

                    if (_r2_1 != null && _r2_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i2, _index.element, _memo.input, (_r2_1.results + _r2_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i2
                    }

                    // AND shortcut 1
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 1
                        continue
                    }

                    // CALLORVAR EOF
                    var _r22: _KotlinParser_Item? = null
                    _r22 = _MemoCall(_memo, "EOF", _index.element, ::EOF, null)
                    if (_r22 != null) _index.element = _r22.nextIndex

                    _label = 1
                }
                // AND 1
                1 -> {
                    val _r1_2 = _memo.results.pop()
                    val _r1_1 = _memo.results.pop()

                    if (_r1_1 != null && _r1_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i1, _index.element, _memo.input, (_r1_1.results + _r1_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i1
                    }

                    // ACT 0
                    val _r0 = _memo.results.peek()
                    if (_r0 != null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_r0.startIndex, _r0.nextIndex, _memo.input, _Thunk({ AST.KotlinFile(fa.l, ph.nr, il.l, obj.l) }, _r0), true))
                    }

                    break
                }
            }
        }
    }


    open fun script(_memo: _KotlinParser_Memo, __index: Int, _args: _KotlinParser_Args?) {
        val _index = Ref.IntRef()
        _index.element = __index

        val _arg_index = Ref.IntRef()
        val _arg_input_index = Ref.IntRef()

        // AND 1
        var _start_i1 = _index.element

        // AND 2
        var _start_i2 = _index.element

        // AND 3
        var _start_i3 = _index.element

        // AND 4
        var _start_i4 = _index.element

        // AND 5
        var _start_i5 = _index.element

        // AND 6
        var _start_i6 = _index.element

        // STAR 9
        var _start_i9 = _index.element
        val _inp9 = arrayListOf<Token?>()
        val _res9 = arrayListOf<AST.AstNode?>()

        // STAR 11
        var _start_i11 = _index.element
        val _inp11 = arrayListOf<Token?>()
        val _res11 = arrayListOf<AST.AstNode?>()

        // STAR 16
        var _start_i16 = _index.element
        val _inp16 = arrayListOf<Token?>()
        val _res16 = arrayListOf<AST.AstNode?>()

        // AND 17
        var _start_i17 = _index.element

        var _label = -1
        while(true) {
            when(_label) {
                -1 -> {
                    // AND 1
                    _start_i1 = _index.element

                    // AND 2
                    _start_i2 = _index.element

                    // AND 3
                    _start_i3 = _index.element

                    // AND 4
                    _start_i4 = _index.element

                    // AND 5
                    _start_i5 = _index.element

                    // AND 6
                    _start_i6 = _index.element

                    // CALLORVAR shebangLine
                    var _r8: _KotlinParser_Item? = null
                    _r8 = _MemoCall(_memo, "shebangLine", _index.element, ::shebangLine, null)
                    if (_r8 != null) _index.element = _r8.nextIndex

                    // QUES 7
                    if (_memo.results.peek() == null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_index.element, _memo.input))
                    }
                    // AND shortcut 6
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 6
                        continue
                    }

                    // STAR 9
                    _start_i9 = _index.element
                    _label = 9
                }
                // STAR 9
                9 -> {
                    // CALLORVAR NL
                    var _r10: _KotlinParser_Item? = null
                    _r10 = _MemoCall(_memo, "NL", _index.element, ::NL, null)
                    if (_r10 != null) _index.element = _r10.nextIndex

                    // STAR 9
                    val _r9 = _memo.results.pop()
                    if (_r9 != null) {
                        _res9 += _r9.results
                        _label = 9
                        continue
                    } else {
                        _memo.results.push(_KotlinParser_Item(_start_i9, _index.element, _memo.input, _res9.filterNotNull(), true))
                    }

                    _label = 6
                }
                // AND 6
                6 -> {
                    val _r6_2 = _memo.results.pop()
                    val _r6_1 = _memo.results.pop()

                    if (_r6_1 != null && _r6_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i6, _index.element, _memo.input, (_r6_1.results + _r6_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i6
                    }

                    // AND shortcut 5
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 5
                        continue
                    }

                    // STAR 11
                    _start_i11 = _index.element
                    _label = 11
                }
                // STAR 11
                11 -> {
                    // CALLORVAR fileAnnotation
                    var _r12: _KotlinParser_Item? = null
                    _r12 = _MemoCall(_memo, "fileAnnotation", _index.element, ::fileAnnotation, null)
                    if (_r12 != null) _index.element = _r12.nextIndex

                    // STAR 11
                    val _r11 = _memo.results.pop()
                    if (_r11 != null) {
                        _res11 += _r11.results
                        _label = 11
                        continue
                    } else {
                        _memo.results.push(_KotlinParser_Item(_start_i11, _index.element, _memo.input, _res11.filterNotNull(), true))
                    }

                    _label = 5
                }
                // AND 5
                5 -> {
                    val _r5_2 = _memo.results.pop()
                    val _r5_1 = _memo.results.pop()

                    if (_r5_1 != null && _r5_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i5, _index.element, _memo.input, (_r5_1.results + _r5_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i5
                    }

                    // AND shortcut 4
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 4
                        continue
                    }

                    // CALLORVAR packageHeader
                    var _r14: _KotlinParser_Item? = null
                    _r14 = _MemoCall(_memo, "packageHeader", _index.element, ::packageHeader, null)
                    if (_r14 != null) _index.element = _r14.nextIndex

                    // QUES 13
                    if (_memo.results.peek() == null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_index.element, _memo.input))
                    }
                    _label = 4
                }
                // AND 4
                4 -> {
                    val _r4_2 = _memo.results.pop()
                    val _r4_1 = _memo.results.pop()

                    if (_r4_1 != null && _r4_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i4, _index.element, _memo.input, (_r4_1.results + _r4_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i4
                    }

                    // AND shortcut 3
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 3
                        continue
                    }

                    // CALLORVAR ImportList
                    var _r15: _KotlinParser_Item? = null
                    _r15 = _MemoCall(_memo, "ImportList", _index.element, ::ImportList, null)
                    if (_r15 != null) _index.element = _r15.nextIndex

                    _label = 3
                }
                // AND 3
                3 -> {
                    val _r3_2 = _memo.results.pop()
                    val _r3_1 = _memo.results.pop()

                    if (_r3_1 != null && _r3_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i3, _index.element, _memo.input, (_r3_1.results + _r3_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i3
                    }

                    // AND shortcut 2
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 2
                        continue
                    }

                    // STAR 16
                    _start_i16 = _index.element
                    _label = 16
                }
                // STAR 16
                16 -> {
                    // AND 17
                    _start_i17 = _index.element

                    // CALLORVAR statement
                    var _r18: _KotlinParser_Item? = null
                    _r18 = _MemoCall(_memo, "statement", _index.element, ::statement, null)
                    if (_r18 != null) _index.element = _r18.nextIndex

                    // AND shortcut 17
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 17
                        continue
                    }

                    // CALLORVAR semi
                    var _r19: _KotlinParser_Item? = null
                    _r19 = _MemoCall(_memo, "semi", _index.element, ::semi, null)
                    if (_r19 != null) _index.element = _r19.nextIndex

                    _label = 17
                }
                // AND 17
                17 -> {
                    val _r17_2 = _memo.results.pop()
                    val _r17_1 = _memo.results.pop()

                    if (_r17_1 != null && _r17_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i17, _index.element, _memo.input, (_r17_1.results + _r17_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i17
                    }

                    // STAR 16
                    val _r16 = _memo.results.pop()
                    if (_r16 != null) {
                        _res16 += _r16.results
                        _label = 16
                        continue
                    } else {
                        _memo.results.push(_KotlinParser_Item(_start_i16, _index.element, _memo.input, _res16.filterNotNull(), true))
                    }

                    _label = 2
                }
                // AND 2
                2 -> {
                    val _r2_2 = _memo.results.pop()
                    val _r2_1 = _memo.results.pop()

                    if (_r2_1 != null && _r2_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i2, _index.element, _memo.input, (_r2_1.results + _r2_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i2
                    }

                    // AND shortcut 1
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 1
                        continue
                    }

                    // CALLORVAR EOF
                    var _r20: _KotlinParser_Item? = null
                    _r20 = _MemoCall(_memo, "EOF", _index.element, ::EOF, null)
                    if (_r20 != null) _index.element = _r20.nextIndex

                    _label = 1
                }
                // AND 1
                1 -> {
                    val _r1_2 = _memo.results.pop()
                    val _r1_1 = _memo.results.pop()

                    if (_r1_1 != null && _r1_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i1, _index.element, _memo.input, (_r1_1.results + _r1_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i1
                    }

                    // ACT 0
                    val _r0 = _memo.results.peek()
                    if (_r0 != null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_r0.startIndex, _r0.nextIndex, _memo.input, _Thunk({ error("scripts are not supported") }, _r0), true))
                    }

                    break
                }
            }
        }
    }


    open fun shebangLine(_memo: _KotlinParser_Memo, __index: Int, _args: _KotlinParser_Args?) {
        val _index = Ref.IntRef()
        _index.element = __index

        val _arg_index = Ref.IntRef()
        val _arg_input_index = Ref.IntRef()

        // AND 1
        var _start_i1 = _index.element

        // PLUS 3
        var _start_i3 = _index.element
        val _inp3 = arrayListOf<Token?>()
        val _res3 = arrayListOf<AST.AstNode?>()

        var _label = -1
        while(true) {
            when(_label) {
                -1 -> {
                    // AND 1
                    _start_i1 = _index.element

                    // CALLORVAR ShebangLine
                    var _r2: _KotlinParser_Item? = null
                    _r2 = _MemoCall(_memo, "ShebangLine", _index.element, ::ShebangLine, null)
                    if (_r2 != null) _index.element = _r2.nextIndex

                    // AND shortcut 1
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 1
                        continue
                    }

                    // PLUS 3
                    _start_i3 = _index.element
                    _label = 3
                }
                // PLUS 3
                3 -> {
                    // CALLORVAR NL
                    var _r4: _KotlinParser_Item? = null
                    _r4 = _MemoCall(_memo, "NL", _index.element, ::NL, null)
                    if (_r4 != null) _index.element = _r4.nextIndex

                    // PLUS 3
                    val _r3 = _memo.results.pop()
                    if (_r3 != null) {
                        _res3 += _r3.results
                        _label = 3
                        continue
                    } else {
                        if (_index.element > _start_i3) {
                            _memo.results.push(_KotlinParser_Item(_start_i3, _index.element, _memo.input, _res3.filterNotNull(), true))
                        } else {
                            _memo.results.push(null)
                        }
                    }

                    _label = 1
                }
                // AND 1
                1 -> {
                    val _r1_2 = _memo.results.pop()
                    val _r1_1 = _memo.results.pop()

                    if (_r1_1 != null && _r1_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i1, _index.element, _memo.input, (_r1_1.results + _r1_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i1
                    }

                    // ACT 0
                    val _r0 = _memo.results.peek()
                    if (_r0 != null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_r0.startIndex, _r0.nextIndex, _memo.input, _Thunk({ error("ShebangLine is not supported") }, _r0), true))
                    }

                    break
                }
            }
        }
    }


    open fun ShebangLine(_memo: _KotlinParser_Memo, __index: Int, _args: _KotlinParser_Args?) {
        val _index = Ref.IntRef()
        _index.element = __index

        val _arg_index = Ref.IntRef()
        val _arg_input_index = Ref.IntRef()

        var t: _KotlinParser_Item? = null

        // COND 0
        var _start_i0 = _index.element

        var _label = -1
        while(true) {
            when(_label) {
                -1 -> {
                    // COND 0
                    _start_i0 = _index.element

                    // ANY
                    _ParseAny(_memo, _index)

                    // BIND t
                    t = _memo.results.peek()

                    // COND 0
                    val lambda0: (_KotlinParser_Item) -> Boolean = { (t.ni is Token.ShebangLine) }
                    if (_memo.results.peek() == null || !lambda0(_memo.results.peek()!!)) {
                        _memo.results.pop()
                        _memo.results.push(null)
                        _index.element = _start_i0
                    }

                    break
                }
            }
        }
    }


    open fun fileAnnotation(_memo: _KotlinParser_Memo, __index: Int, _args: _KotlinParser_Args?) {
        val _index = Ref.IntRef()
        _index.element = __index

        val _arg_index = Ref.IntRef()
        val _arg_input_index = Ref.IntRef()

        var a: _KotlinParser_Item? = null

        // OR 0
        var _start_i0 = _index.element

        // AND 2
        var _start_i2 = _index.element

        // AND 3
        var _start_i3 = _index.element

        // AND 4
        var _start_i4 = _index.element

        // AND 5
        var _start_i5 = _index.element

        // AND 6
        var _start_i6 = _index.element

        // AND 7
        var _start_i7 = _index.element

        // STAR 10
        var _start_i10 = _index.element
        val _inp10 = arrayListOf<Token?>()
        val _res10 = arrayListOf<AST.AstNode?>()

        // STAR 13
        var _start_i13 = _index.element
        val _inp13 = arrayListOf<Token?>()
        val _res13 = arrayListOf<AST.AstNode?>()

        // AND 15
        var _start_i15 = _index.element

        // AND 16
        var _start_i16 = _index.element

        // PLUS 19
        var _start_i19 = _index.element
        val _inp19 = arrayListOf<Token?>()
        val _res19 = arrayListOf<AST.AstNode?>()

        // STAR 22
        var _start_i22 = _index.element
        val _inp22 = arrayListOf<Token?>()
        val _res22 = arrayListOf<AST.AstNode?>()

        // AND 25
        var _start_i25 = _index.element

        // AND 26
        var _start_i26 = _index.element

        // AND 27
        var _start_i27 = _index.element

        // AND 28
        var _start_i28 = _index.element

        // AND 29
        var _start_i29 = _index.element

        // AND 30
        var _start_i30 = _index.element

        // STAR 33
        var _start_i33 = _index.element
        val _inp33 = arrayListOf<Token?>()
        val _res33 = arrayListOf<AST.AstNode?>()

        // STAR 36
        var _start_i36 = _index.element
        val _inp36 = arrayListOf<Token?>()
        val _res36 = arrayListOf<AST.AstNode?>()

        // STAR 40
        var _start_i40 = _index.element
        val _inp40 = arrayListOf<Token?>()
        val _res40 = arrayListOf<AST.AstNode?>()

        var _label = -1
        while(true) {
            when(_label) {
                -1 -> {
                    // OR 0
                    _start_i0 = _index.element

                    // AND 2
                    _start_i2 = _index.element

                    // AND 3
                    _start_i3 = _index.element

                    // AND 4
                    _start_i4 = _index.element

                    // AND 5
                    _start_i5 = _index.element

                    // AND 6
                    _start_i6 = _index.element

                    // AND 7
                    _start_i7 = _index.element

                    // CALLORVAR AT
                    var _r8: _KotlinParser_Item? = null
                    _r8 = _MemoCall(_memo, "AT", _index.element, ::AT, null)
                    if (_r8 != null) _index.element = _r8.nextIndex

                    // AND shortcut 7
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 7
                        continue
                    }

                    // CALLORVAR FILE
                    var _r9: _KotlinParser_Item? = null
                    _r9 = _MemoCall(_memo, "FILE", _index.element, ::FILE, null)
                    if (_r9 != null) _index.element = _r9.nextIndex

                    _label = 7
                }
                // AND 7
                7 -> {
                    val _r7_2 = _memo.results.pop()
                    val _r7_1 = _memo.results.pop()

                    if (_r7_1 != null && _r7_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i7, _index.element, _memo.input, (_r7_1.results + _r7_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i7
                    }

                    // AND shortcut 6
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 6
                        continue
                    }

                    // STAR 10
                    _start_i10 = _index.element
                    _label = 10
                }
                // STAR 10
                10 -> {
                    // CALLORVAR NL
                    var _r11: _KotlinParser_Item? = null
                    _r11 = _MemoCall(_memo, "NL", _index.element, ::NL, null)
                    if (_r11 != null) _index.element = _r11.nextIndex

                    // STAR 10
                    val _r10 = _memo.results.pop()
                    if (_r10 != null) {
                        _res10 += _r10.results
                        _label = 10
                        continue
                    } else {
                        _memo.results.push(_KotlinParser_Item(_start_i10, _index.element, _memo.input, _res10.filterNotNull(), true))
                    }

                    _label = 6
                }
                // AND 6
                6 -> {
                    val _r6_2 = _memo.results.pop()
                    val _r6_1 = _memo.results.pop()

                    if (_r6_1 != null && _r6_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i6, _index.element, _memo.input, (_r6_1.results + _r6_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i6
                    }

                    // AND shortcut 5
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 5
                        continue
                    }

                    // CALLORVAR COLON
                    var _r12: _KotlinParser_Item? = null
                    _r12 = _MemoCall(_memo, "COLON", _index.element, ::COLON, null)
                    if (_r12 != null) _index.element = _r12.nextIndex

                    _label = 5
                }
                // AND 5
                5 -> {
                    val _r5_2 = _memo.results.pop()
                    val _r5_1 = _memo.results.pop()

                    if (_r5_1 != null && _r5_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i5, _index.element, _memo.input, (_r5_1.results + _r5_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i5
                    }

                    // AND shortcut 4
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 4
                        continue
                    }

                    // STAR 13
                    _start_i13 = _index.element
                    _label = 13
                }
                // STAR 13
                13 -> {
                    // CALLORVAR NL
                    var _r14: _KotlinParser_Item? = null
                    _r14 = _MemoCall(_memo, "NL", _index.element, ::NL, null)
                    if (_r14 != null) _index.element = _r14.nextIndex

                    // STAR 13
                    val _r13 = _memo.results.pop()
                    if (_r13 != null) {
                        _res13 += _r13.results
                        _label = 13
                        continue
                    } else {
                        _memo.results.push(_KotlinParser_Item(_start_i13, _index.element, _memo.input, _res13.filterNotNull(), true))
                    }

                    _label = 4
                }
                // AND 4
                4 -> {
                    val _r4_2 = _memo.results.pop()
                    val _r4_1 = _memo.results.pop()

                    if (_r4_1 != null && _r4_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i4, _index.element, _memo.input, (_r4_1.results + _r4_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i4
                    }

                    // AND shortcut 3
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 3
                        continue
                    }

                    // AND 15
                    _start_i15 = _index.element

                    // AND 16
                    _start_i16 = _index.element

                    // CALLORVAR LSQUARE
                    var _r17: _KotlinParser_Item? = null
                    _r17 = _MemoCall(_memo, "LSQUARE", _index.element, ::LSQUARE, null)
                    if (_r17 != null) _index.element = _r17.nextIndex

                    // AND shortcut 16
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 16
                        continue
                    }

                    // PLUS 19
                    _start_i19 = _index.element
                    _label = 19
                }
                // PLUS 19
                19 -> {
                    // CALLORVAR unescapedAnnotation
                    var _r20: _KotlinParser_Item? = null
                    _r20 = _MemoCall(_memo, "unescapedAnnotation", _index.element, ::unescapedAnnotation, null)
                    if (_r20 != null) _index.element = _r20.nextIndex

                    // PLUS 19
                    val _r19 = _memo.results.pop()
                    if (_r19 != null) {
                        _res19 += _r19.results
                        _label = 19
                        continue
                    } else {
                        if (_index.element > _start_i19) {
                            _memo.results.push(_KotlinParser_Item(_start_i19, _index.element, _memo.input, _res19.filterNotNull(), true))
                        } else {
                            _memo.results.push(null)
                        }
                    }

                    // BIND a
                    a = _memo.results.peek()

                    _label = 16
                }
                // AND 16
                16 -> {
                    val _r16_2 = _memo.results.pop()
                    val _r16_1 = _memo.results.pop()

                    if (_r16_1 != null && _r16_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i16, _index.element, _memo.input, (_r16_1.results + _r16_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i16
                    }

                    // AND shortcut 15
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 15
                        continue
                    }

                    // CALLORVAR RSQUARE
                    var _r21: _KotlinParser_Item? = null
                    _r21 = _MemoCall(_memo, "RSQUARE", _index.element, ::RSQUARE, null)
                    if (_r21 != null) _index.element = _r21.nextIndex

                    _label = 15
                }
                // AND 15
                15 -> {
                    val _r15_2 = _memo.results.pop()
                    val _r15_1 = _memo.results.pop()

                    if (_r15_1 != null && _r15_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i15, _index.element, _memo.input, (_r15_1.results + _r15_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i15
                    }

                    _label = 3
                }
                // AND 3
                3 -> {
                    val _r3_2 = _memo.results.pop()
                    val _r3_1 = _memo.results.pop()

                    if (_r3_1 != null && _r3_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i3, _index.element, _memo.input, (_r3_1.results + _r3_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i3
                    }

                    // AND shortcut 2
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 2
                        continue
                    }

                    // STAR 22
                    _start_i22 = _index.element
                    _label = 22
                }
                // STAR 22
                22 -> {
                    // CALLORVAR NL
                    var _r23: _KotlinParser_Item? = null
                    _r23 = _MemoCall(_memo, "NL", _index.element, ::NL, null)
                    if (_r23 != null) _index.element = _r23.nextIndex

                    // STAR 22
                    val _r22 = _memo.results.pop()
                    if (_r22 != null) {
                        _res22 += _r22.results
                        _label = 22
                        continue
                    } else {
                        _memo.results.push(_KotlinParser_Item(_start_i22, _index.element, _memo.input, _res22.filterNotNull(), true))
                    }

                    _label = 2
                }
                // AND 2
                2 -> {
                    val _r2_2 = _memo.results.pop()
                    val _r2_1 = _memo.results.pop()

                    if (_r2_1 != null && _r2_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i2, _index.element, _memo.input, (_r2_1.results + _r2_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i2
                    }

                    // ACT 1
                    val _r1 = _memo.results.peek()
                    if (_r1 != null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_r1.startIndex, _r1.nextIndex, _memo.input, _Thunk({ a.l }, _r1), true))
                    }

                    // OR shortcut 0
                    if (_memo.results.peek() == null) {
                        _memo.results.pop()
                        _index.element = _start_i0
                    } else {
                        _label = 0
                        continue
                    }

                    // AND 25
                    _start_i25 = _index.element

                    // AND 26
                    _start_i26 = _index.element

                    // AND 27
                    _start_i27 = _index.element

                    // AND 28
                    _start_i28 = _index.element

                    // AND 29
                    _start_i29 = _index.element

                    // AND 30
                    _start_i30 = _index.element

                    // CALLORVAR AT
                    var _r31: _KotlinParser_Item? = null
                    _r31 = _MemoCall(_memo, "AT", _index.element, ::AT, null)
                    if (_r31 != null) _index.element = _r31.nextIndex

                    // AND shortcut 30
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 30
                        continue
                    }

                    // CALLORVAR FILE
                    var _r32: _KotlinParser_Item? = null
                    _r32 = _MemoCall(_memo, "FILE", _index.element, ::FILE, null)
                    if (_r32 != null) _index.element = _r32.nextIndex

                    _label = 30
                }
                // AND 30
                30 -> {
                    val _r30_2 = _memo.results.pop()
                    val _r30_1 = _memo.results.pop()

                    if (_r30_1 != null && _r30_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i30, _index.element, _memo.input, (_r30_1.results + _r30_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i30
                    }

                    // AND shortcut 29
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 29
                        continue
                    }

                    // STAR 33
                    _start_i33 = _index.element
                    _label = 33
                }
                // STAR 33
                33 -> {
                    // CALLORVAR NL
                    var _r34: _KotlinParser_Item? = null
                    _r34 = _MemoCall(_memo, "NL", _index.element, ::NL, null)
                    if (_r34 != null) _index.element = _r34.nextIndex

                    // STAR 33
                    val _r33 = _memo.results.pop()
                    if (_r33 != null) {
                        _res33 += _r33.results
                        _label = 33
                        continue
                    } else {
                        _memo.results.push(_KotlinParser_Item(_start_i33, _index.element, _memo.input, _res33.filterNotNull(), true))
                    }

                    _label = 29
                }
                // AND 29
                29 -> {
                    val _r29_2 = _memo.results.pop()
                    val _r29_1 = _memo.results.pop()

                    if (_r29_1 != null && _r29_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i29, _index.element, _memo.input, (_r29_1.results + _r29_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i29
                    }

                    // AND shortcut 28
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 28
                        continue
                    }

                    // CALLORVAR COLON
                    var _r35: _KotlinParser_Item? = null
                    _r35 = _MemoCall(_memo, "COLON", _index.element, ::COLON, null)
                    if (_r35 != null) _index.element = _r35.nextIndex

                    _label = 28
                }
                // AND 28
                28 -> {
                    val _r28_2 = _memo.results.pop()
                    val _r28_1 = _memo.results.pop()

                    if (_r28_1 != null && _r28_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i28, _index.element, _memo.input, (_r28_1.results + _r28_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i28
                    }

                    // AND shortcut 27
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 27
                        continue
                    }

                    // STAR 36
                    _start_i36 = _index.element
                    _label = 36
                }
                // STAR 36
                36 -> {
                    // CALLORVAR NL
                    var _r37: _KotlinParser_Item? = null
                    _r37 = _MemoCall(_memo, "NL", _index.element, ::NL, null)
                    if (_r37 != null) _index.element = _r37.nextIndex

                    // STAR 36
                    val _r36 = _memo.results.pop()
                    if (_r36 != null) {
                        _res36 += _r36.results
                        _label = 36
                        continue
                    } else {
                        _memo.results.push(_KotlinParser_Item(_start_i36, _index.element, _memo.input, _res36.filterNotNull(), true))
                    }

                    _label = 27
                }
                // AND 27
                27 -> {
                    val _r27_2 = _memo.results.pop()
                    val _r27_1 = _memo.results.pop()

                    if (_r27_1 != null && _r27_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i27, _index.element, _memo.input, (_r27_1.results + _r27_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i27
                    }

                    // AND shortcut 26
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 26
                        continue
                    }

                    // CALLORVAR unescapedAnnotation
                    var _r39: _KotlinParser_Item? = null
                    _r39 = _MemoCall(_memo, "unescapedAnnotation", _index.element, ::unescapedAnnotation, null)
                    if (_r39 != null) _index.element = _r39.nextIndex

                    // BIND a
                    a = _memo.results.peek()

                    _label = 26
                }
                // AND 26
                26 -> {
                    val _r26_2 = _memo.results.pop()
                    val _r26_1 = _memo.results.pop()

                    if (_r26_1 != null && _r26_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i26, _index.element, _memo.input, (_r26_1.results + _r26_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i26
                    }

                    // AND shortcut 25
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 25
                        continue
                    }

                    // STAR 40
                    _start_i40 = _index.element
                    _label = 40
                }
                // STAR 40
                40 -> {
                    // CALLORVAR NL
                    var _r41: _KotlinParser_Item? = null
                    _r41 = _MemoCall(_memo, "NL", _index.element, ::NL, null)
                    if (_r41 != null) _index.element = _r41.nextIndex

                    // STAR 40
                    val _r40 = _memo.results.pop()
                    if (_r40 != null) {
                        _res40 += _r40.results
                        _label = 40
                        continue
                    } else {
                        _memo.results.push(_KotlinParser_Item(_start_i40, _index.element, _memo.input, _res40.filterNotNull(), true))
                    }

                    _label = 25
                }
                // AND 25
                25 -> {
                    val _r25_2 = _memo.results.pop()
                    val _r25_1 = _memo.results.pop()

                    if (_r25_1 != null && _r25_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i25, _index.element, _memo.input, (_r25_1.results + _r25_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i25
                    }

                    // ACT 24
                    val _r24 = _memo.results.peek()
                    if (_r24 != null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_r24.startIndex, _r24.nextIndex, _memo.input, _Thunk({ a.r }, _r24), true))
                    }

                    _label = 0
                }
                // OR 0
                0 -> {
                    break
                }
            }
        }
    }


    open fun packageHeader(_memo: _KotlinParser_Memo, __index: Int, _args: _KotlinParser_Args?) {
        val _index = Ref.IntRef()
        _index.element = __index

        val _arg_index = Ref.IntRef()
        val _arg_input_index = Ref.IntRef()

        var id: _KotlinParser_Item? = null

        // AND 1
        var _start_i1 = _index.element

        // AND 2
        var _start_i2 = _index.element

        var _label = -1
        while(true) {
            when(_label) {
                -1 -> {
                    // AND 1
                    _start_i1 = _index.element

                    // AND 2
                    _start_i2 = _index.element

                    // CALLORVAR PACKAGE
                    var _r3: _KotlinParser_Item? = null
                    _r3 = _MemoCall(_memo, "PACKAGE", _index.element, ::PACKAGE, null)
                    if (_r3 != null) _index.element = _r3.nextIndex

                    // AND shortcut 2
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 2
                        continue
                    }

                    // CALLORVAR identifier
                    var _r5: _KotlinParser_Item? = null
                    _r5 = _MemoCall(_memo, "identifier", _index.element, ::identifier, null)
                    if (_r5 != null) _index.element = _r5.nextIndex

                    // BIND id
                    id = _memo.results.peek()

                    _label = 2
                }
                // AND 2
                2 -> {
                    val _r2_2 = _memo.results.pop()
                    val _r2_1 = _memo.results.pop()

                    if (_r2_1 != null && _r2_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i2, _index.element, _memo.input, (_r2_1.results + _r2_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i2
                    }

                    // AND shortcut 1
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 1
                        continue
                    }

                    // CALLORVAR semi
                    var _r7: _KotlinParser_Item? = null
                    _r7 = _MemoCall(_memo, "semi", _index.element, ::semi, null)
                    if (_r7 != null) _index.element = _r7.nextIndex

                    // QUES 6
                    if (_memo.results.peek() == null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_index.element, _memo.input))
                    }
                    _label = 1
                }
                // AND 1
                1 -> {
                    val _r1_2 = _memo.results.pop()
                    val _r1_1 = _memo.results.pop()

                    if (_r1_1 != null && _r1_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i1, _index.element, _memo.input, (_r1_1.results + _r1_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i1
                    }

                    // ACT 0
                    val _r0 = _memo.results.peek()
                    if (_r0 != null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_r0.startIndex, _r0.nextIndex, _memo.input, _Thunk({ AST.PackageHeader(id.s) }, _r0), true))
                    }

                    break
                }
            }
        }
    }


    open fun ImportList(_memo: _KotlinParser_Memo, __index: Int, _args: _KotlinParser_Args?) {
        val _index = Ref.IntRef()
        _index.element = __index

        val _arg_index = Ref.IntRef()
        val _arg_input_index = Ref.IntRef()

        var i: _KotlinParser_Item? = null

        // STAR 2
        var _start_i2 = _index.element
        val _inp2 = arrayListOf<Token?>()
        val _res2 = arrayListOf<AST.AstNode?>()

        var _label = -1
        while(true) {
            when(_label) {
                -1 -> {
                    // STAR 2
                    _start_i2 = _index.element
                    _label = 2
                }
                // STAR 2
                2 -> {
                    // CALLORVAR ImportHeader
                    var _r3: _KotlinParser_Item? = null
                    _r3 = _MemoCall(_memo, "ImportHeader", _index.element, ::ImportHeader, null)
                    if (_r3 != null) _index.element = _r3.nextIndex

                    // STAR 2
                    val _r2 = _memo.results.pop()
                    if (_r2 != null) {
                        _res2 += _r2.results
                        _label = 2
                        continue
                    } else {
                        _memo.results.push(_KotlinParser_Item(_start_i2, _index.element, _memo.input, _res2.filterNotNull(), true))
                    }

                    // BIND i
                    i = _memo.results.peek()

                    // ACT 0
                    val _r0 = _memo.results.peek()
                    if (_r0 != null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_r0.startIndex, _r0.nextIndex, _memo.input, _Thunk({ i.l }, _r0), true))
                    }

                    break
                }
            }
        }
    }


    open fun ImportHeader(_memo: _KotlinParser_Memo, __index: Int, _args: _KotlinParser_Args?) {
        val _index = Ref.IntRef()
        _index.element = __index

        val _arg_index = Ref.IntRef()
        val _arg_input_index = Ref.IntRef()

        var name: _KotlinParser_Item? = null
        var alias: _KotlinParser_Item? = null

        // OR 0
        var _start_i0 = _index.element

        // OR 1
        var _start_i1 = _index.element

        // AND 3
        var _start_i3 = _index.element

        // AND 4
        var _start_i4 = _index.element

        // AND 5
        var _start_i5 = _index.element

        // AND 6
        var _start_i6 = _index.element

        // AND 15
        var _start_i15 = _index.element

        // AND 16
        var _start_i16 = _index.element

        // AND 17
        var _start_i17 = _index.element

        // AND 18
        var _start_i18 = _index.element

        // AND 28
        var _start_i28 = _index.element

        // AND 29
        var _start_i29 = _index.element

        var _label = -1
        while(true) {
            when(_label) {
                -1 -> {
                    // OR 0
                    _start_i0 = _index.element

                    // OR 1
                    _start_i1 = _index.element

                    // AND 3
                    _start_i3 = _index.element

                    // AND 4
                    _start_i4 = _index.element

                    // AND 5
                    _start_i5 = _index.element

                    // AND 6
                    _start_i6 = _index.element

                    // CALLORVAR IMPORT
                    var _r7: _KotlinParser_Item? = null
                    _r7 = _MemoCall(_memo, "IMPORT", _index.element, ::IMPORT, null)
                    if (_r7 != null) _index.element = _r7.nextIndex

                    // AND shortcut 6
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 6
                        continue
                    }

                    // CALLORVAR identifier
                    var _r9: _KotlinParser_Item? = null
                    _r9 = _MemoCall(_memo, "identifier", _index.element, ::identifier, null)
                    if (_r9 != null) _index.element = _r9.nextIndex

                    // BIND name
                    name = _memo.results.peek()

                    _label = 6
                }
                // AND 6
                6 -> {
                    val _r6_2 = _memo.results.pop()
                    val _r6_1 = _memo.results.pop()

                    if (_r6_1 != null && _r6_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i6, _index.element, _memo.input, (_r6_1.results + _r6_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i6
                    }

                    // AND shortcut 5
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 5
                        continue
                    }

                    // CALLORVAR DOT
                    var _r10: _KotlinParser_Item? = null
                    _r10 = _MemoCall(_memo, "DOT", _index.element, ::DOT, null)
                    if (_r10 != null) _index.element = _r10.nextIndex

                    _label = 5
                }
                // AND 5
                5 -> {
                    val _r5_2 = _memo.results.pop()
                    val _r5_1 = _memo.results.pop()

                    if (_r5_1 != null && _r5_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i5, _index.element, _memo.input, (_r5_1.results + _r5_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i5
                    }

                    // AND shortcut 4
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 4
                        continue
                    }

                    // CALLORVAR MULT
                    var _r11: _KotlinParser_Item? = null
                    _r11 = _MemoCall(_memo, "MULT", _index.element, ::MULT, null)
                    if (_r11 != null) _index.element = _r11.nextIndex

                    _label = 4
                }
                // AND 4
                4 -> {
                    val _r4_2 = _memo.results.pop()
                    val _r4_1 = _memo.results.pop()

                    if (_r4_1 != null && _r4_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i4, _index.element, _memo.input, (_r4_1.results + _r4_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i4
                    }

                    // AND shortcut 3
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 3
                        continue
                    }

                    // CALLORVAR semi
                    var _r13: _KotlinParser_Item? = null
                    _r13 = _MemoCall(_memo, "semi", _index.element, ::semi, null)
                    if (_r13 != null) _index.element = _r13.nextIndex

                    // QUES 12
                    if (_memo.results.peek() == null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_index.element, _memo.input))
                    }
                    _label = 3
                }
                // AND 3
                3 -> {
                    val _r3_2 = _memo.results.pop()
                    val _r3_1 = _memo.results.pop()

                    if (_r3_1 != null && _r3_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i3, _index.element, _memo.input, (_r3_1.results + _r3_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i3
                    }

                    // ACT 2
                    val _r2 = _memo.results.peek()
                    if (_r2 != null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_r2.startIndex, _r2.nextIndex, _memo.input, _Thunk({ AST.ImportHeader(name.s, star = true) }, _r2), true))
                    }

                    // OR shortcut 1
                    if (_memo.results.peek() == null) {
                        _memo.results.pop()
                        _index.element = _start_i1
                    } else {
                        _label = 1
                        continue
                    }

                    // AND 15
                    _start_i15 = _index.element

                    // AND 16
                    _start_i16 = _index.element

                    // AND 17
                    _start_i17 = _index.element

                    // AND 18
                    _start_i18 = _index.element

                    // CALLORVAR IMPORT
                    var _r19: _KotlinParser_Item? = null
                    _r19 = _MemoCall(_memo, "IMPORT", _index.element, ::IMPORT, null)
                    if (_r19 != null) _index.element = _r19.nextIndex

                    // AND shortcut 18
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 18
                        continue
                    }

                    // CALLORVAR identifier
                    var _r21: _KotlinParser_Item? = null
                    _r21 = _MemoCall(_memo, "identifier", _index.element, ::identifier, null)
                    if (_r21 != null) _index.element = _r21.nextIndex

                    // BIND name
                    name = _memo.results.peek()

                    _label = 18
                }
                // AND 18
                18 -> {
                    val _r18_2 = _memo.results.pop()
                    val _r18_1 = _memo.results.pop()

                    if (_r18_1 != null && _r18_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i18, _index.element, _memo.input, (_r18_1.results + _r18_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i18
                    }

                    // AND shortcut 17
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 17
                        continue
                    }

                    // CALLORVAR AS
                    var _r22: _KotlinParser_Item? = null
                    _r22 = _MemoCall(_memo, "AS", _index.element, ::AS, null)
                    if (_r22 != null) _index.element = _r22.nextIndex

                    _label = 17
                }
                // AND 17
                17 -> {
                    val _r17_2 = _memo.results.pop()
                    val _r17_1 = _memo.results.pop()

                    if (_r17_1 != null && _r17_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i17, _index.element, _memo.input, (_r17_1.results + _r17_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i17
                    }

                    // AND shortcut 16
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 16
                        continue
                    }

                    // CALLORVAR simpleIdentifier
                    var _r24: _KotlinParser_Item? = null
                    _r24 = _MemoCall(_memo, "simpleIdentifier", _index.element, ::simpleIdentifier, null)
                    if (_r24 != null) _index.element = _r24.nextIndex

                    // BIND alias
                    alias = _memo.results.peek()

                    _label = 16
                }
                // AND 16
                16 -> {
                    val _r16_2 = _memo.results.pop()
                    val _r16_1 = _memo.results.pop()

                    if (_r16_1 != null && _r16_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i16, _index.element, _memo.input, (_r16_1.results + _r16_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i16
                    }

                    // AND shortcut 15
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 15
                        continue
                    }

                    // CALLORVAR semi
                    var _r26: _KotlinParser_Item? = null
                    _r26 = _MemoCall(_memo, "semi", _index.element, ::semi, null)
                    if (_r26 != null) _index.element = _r26.nextIndex

                    // QUES 25
                    if (_memo.results.peek() == null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_index.element, _memo.input))
                    }
                    _label = 15
                }
                // AND 15
                15 -> {
                    val _r15_2 = _memo.results.pop()
                    val _r15_1 = _memo.results.pop()

                    if (_r15_1 != null && _r15_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i15, _index.element, _memo.input, (_r15_1.results + _r15_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i15
                    }

                    // ACT 14
                    val _r14 = _memo.results.peek()
                    if (_r14 != null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_r14.startIndex, _r14.nextIndex, _memo.input, _Thunk({ AST.ImportHeader(name.s, alias = alias.s) }, _r14), true))
                    }

                    _label = 1
                }
                // OR 1
                1 -> {
                    // OR shortcut 0
                    if (_memo.results.peek() == null) {
                        _memo.results.pop()
                        _index.element = _start_i0
                    } else {
                        _label = 0
                        continue
                    }

                    // AND 28
                    _start_i28 = _index.element

                    // AND 29
                    _start_i29 = _index.element

                    // CALLORVAR IMPORT
                    var _r30: _KotlinParser_Item? = null
                    _r30 = _MemoCall(_memo, "IMPORT", _index.element, ::IMPORT, null)
                    if (_r30 != null) _index.element = _r30.nextIndex

                    // AND shortcut 29
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 29
                        continue
                    }

                    // CALLORVAR identifier
                    var _r32: _KotlinParser_Item? = null
                    _r32 = _MemoCall(_memo, "identifier", _index.element, ::identifier, null)
                    if (_r32 != null) _index.element = _r32.nextIndex

                    // BIND name
                    name = _memo.results.peek()

                    _label = 29
                }
                // AND 29
                29 -> {
                    val _r29_2 = _memo.results.pop()
                    val _r29_1 = _memo.results.pop()

                    if (_r29_1 != null && _r29_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i29, _index.element, _memo.input, (_r29_1.results + _r29_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i29
                    }

                    // AND shortcut 28
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 28
                        continue
                    }

                    // CALLORVAR semi
                    var _r34: _KotlinParser_Item? = null
                    _r34 = _MemoCall(_memo, "semi", _index.element, ::semi, null)
                    if (_r34 != null) _index.element = _r34.nextIndex

                    // QUES 33
                    if (_memo.results.peek() == null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_index.element, _memo.input))
                    }
                    _label = 28
                }
                // AND 28
                28 -> {
                    val _r28_2 = _memo.results.pop()
                    val _r28_1 = _memo.results.pop()

                    if (_r28_1 != null && _r28_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i28, _index.element, _memo.input, (_r28_1.results + _r28_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i28
                    }

                    // ACT 27
                    val _r27 = _memo.results.peek()
                    if (_r27 != null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_r27.startIndex, _r27.nextIndex, _memo.input, _Thunk({ AST.ImportHeader(name.s) }, _r27), true))
                    }

                    _label = 0
                }
                // OR 0
                0 -> {
                    break
                }
            }
        }
    }


    open fun topLevelObject(_memo: _KotlinParser_Memo, __index: Int, _args: _KotlinParser_Args?) {
        val _index = Ref.IntRef()
        _index.element = __index

        val _arg_index = Ref.IntRef()
        val _arg_input_index = Ref.IntRef()

        var d: _KotlinParser_Item? = null

        // AND 1
        var _start_i1 = _index.element

        var _label = -1
        while(true) {
            when(_label) {
                -1 -> {
                    // AND 1
                    _start_i1 = _index.element

                    // CALLORVAR declaration
                    var _r3: _KotlinParser_Item? = null
                    _r3 = _MemoCall(_memo, "declaration", _index.element, ::declaration, null)
                    if (_r3 != null) _index.element = _r3.nextIndex

                    // BIND d
                    d = _memo.results.peek()

                    // AND shortcut 1
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 1
                        continue
                    }

                    // CALLORVAR semis
                    var _r5: _KotlinParser_Item? = null
                    _r5 = _MemoCall(_memo, "semis", _index.element, ::semis, null)
                    if (_r5 != null) _index.element = _r5.nextIndex

                    // QUES 4
                    if (_memo.results.peek() == null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_index.element, _memo.input))
                    }
                    _label = 1
                }
                // AND 1
                1 -> {
                    val _r1_2 = _memo.results.pop()
                    val _r1_1 = _memo.results.pop()

                    if (_r1_1 != null && _r1_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i1, _index.element, _memo.input, (_r1_1.results + _r1_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i1
                    }

                    // ACT 0
                    val _r0 = _memo.results.peek()
                    if (_r0 != null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_r0.startIndex, _r0.nextIndex, _memo.input, _Thunk({ d.r }, _r0), true))
                    }

                    break
                }
            }
        }
    }


    open fun typeAlias(_memo: _KotlinParser_Memo, __index: Int, _args: _KotlinParser_Args?) {
        val _index = Ref.IntRef()
        _index.element = __index

        val _arg_index = Ref.IntRef()
        val _arg_input_index = Ref.IntRef()

        var mod: _KotlinParser_Item? = null
        var name: _KotlinParser_Item? = null
        var tp: _KotlinParser_Item? = null
        var t: _KotlinParser_Item? = null

        // AND 1
        var _start_i1 = _index.element

        // AND 2
        var _start_i2 = _index.element

        // AND 3
        var _start_i3 = _index.element

        // AND 4
        var _start_i4 = _index.element

        // AND 5
        var _start_i5 = _index.element

        // AND 6
        var _start_i6 = _index.element

        // AND 7
        var _start_i7 = _index.element

        // AND 8
        var _start_i8 = _index.element

        // STAR 13
        var _start_i13 = _index.element
        val _inp13 = arrayListOf<Token?>()
        val _res13 = arrayListOf<AST.AstNode?>()

        // AND 18
        var _start_i18 = _index.element

        // STAR 19
        var _start_i19 = _index.element
        val _inp19 = arrayListOf<Token?>()
        val _res19 = arrayListOf<AST.AstNode?>()

        // STAR 23
        var _start_i23 = _index.element
        val _inp23 = arrayListOf<Token?>()
        val _res23 = arrayListOf<AST.AstNode?>()

        // STAR 26
        var _start_i26 = _index.element
        val _inp26 = arrayListOf<Token?>()
        val _res26 = arrayListOf<AST.AstNode?>()

        var _label = -1
        while(true) {
            when(_label) {
                -1 -> {
                    // AND 1
                    _start_i1 = _index.element

                    // AND 2
                    _start_i2 = _index.element

                    // AND 3
                    _start_i3 = _index.element

                    // AND 4
                    _start_i4 = _index.element

                    // AND 5
                    _start_i5 = _index.element

                    // AND 6
                    _start_i6 = _index.element

                    // AND 7
                    _start_i7 = _index.element

                    // AND 8
                    _start_i8 = _index.element

                    // CALLORVAR modifiers
                    var _r11: _KotlinParser_Item? = null
                    _r11 = _MemoCall(_memo, "modifiers", _index.element, ::modifiers, null)
                    if (_r11 != null) _index.element = _r11.nextIndex

                    // QUES 10
                    if (_memo.results.peek() == null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_index.element, _memo.input))
                    }
                    // BIND mod
                    mod = _memo.results.peek()

                    // AND shortcut 8
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 8
                        continue
                    }

                    // CALLORVAR TYPE_ALIAS
                    var _r12: _KotlinParser_Item? = null
                    _r12 = _MemoCall(_memo, "TYPE_ALIAS", _index.element, ::TYPE_ALIAS, null)
                    if (_r12 != null) _index.element = _r12.nextIndex

                    _label = 8
                }
                // AND 8
                8 -> {
                    val _r8_2 = _memo.results.pop()
                    val _r8_1 = _memo.results.pop()

                    if (_r8_1 != null && _r8_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i8, _index.element, _memo.input, (_r8_1.results + _r8_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i8
                    }

                    // AND shortcut 7
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 7
                        continue
                    }

                    // STAR 13
                    _start_i13 = _index.element
                    _label = 13
                }
                // STAR 13
                13 -> {
                    // CALLORVAR NL
                    var _r14: _KotlinParser_Item? = null
                    _r14 = _MemoCall(_memo, "NL", _index.element, ::NL, null)
                    if (_r14 != null) _index.element = _r14.nextIndex

                    // STAR 13
                    val _r13 = _memo.results.pop()
                    if (_r13 != null) {
                        _res13 += _r13.results
                        _label = 13
                        continue
                    } else {
                        _memo.results.push(_KotlinParser_Item(_start_i13, _index.element, _memo.input, _res13.filterNotNull(), true))
                    }

                    _label = 7
                }
                // AND 7
                7 -> {
                    val _r7_2 = _memo.results.pop()
                    val _r7_1 = _memo.results.pop()

                    if (_r7_1 != null && _r7_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i7, _index.element, _memo.input, (_r7_1.results + _r7_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i7
                    }

                    // AND shortcut 6
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 6
                        continue
                    }

                    // CALLORVAR simpleIdentifier
                    var _r16: _KotlinParser_Item? = null
                    _r16 = _MemoCall(_memo, "simpleIdentifier", _index.element, ::simpleIdentifier, null)
                    if (_r16 != null) _index.element = _r16.nextIndex

                    // BIND name
                    name = _memo.results.peek()

                    _label = 6
                }
                // AND 6
                6 -> {
                    val _r6_2 = _memo.results.pop()
                    val _r6_1 = _memo.results.pop()

                    if (_r6_1 != null && _r6_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i6, _index.element, _memo.input, (_r6_1.results + _r6_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i6
                    }

                    // AND shortcut 5
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 5
                        continue
                    }

                    // AND 18
                    _start_i18 = _index.element

                    // STAR 19
                    _start_i19 = _index.element
                    _label = 19
                }
                // STAR 19
                19 -> {
                    // CALLORVAR NL
                    var _r20: _KotlinParser_Item? = null
                    _r20 = _MemoCall(_memo, "NL", _index.element, ::NL, null)
                    if (_r20 != null) _index.element = _r20.nextIndex

                    // STAR 19
                    val _r19 = _memo.results.pop()
                    if (_r19 != null) {
                        _res19 += _r19.results
                        _label = 19
                        continue
                    } else {
                        _memo.results.push(_KotlinParser_Item(_start_i19, _index.element, _memo.input, _res19.filterNotNull(), true))
                    }

                    // AND shortcut 18
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 18
                        continue
                    }

                    // CALLORVAR typeParameters
                    var _r22: _KotlinParser_Item? = null
                    _r22 = _MemoCall(_memo, "typeParameters", _index.element, ::typeParameters, null)
                    if (_r22 != null) _index.element = _r22.nextIndex

                    // BIND tp
                    tp = _memo.results.peek()

                    _label = 18
                }
                // AND 18
                18 -> {
                    val _r18_2 = _memo.results.pop()
                    val _r18_1 = _memo.results.pop()

                    if (_r18_1 != null && _r18_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i18, _index.element, _memo.input, (_r18_1.results + _r18_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i18
                    }

                    // QUES 17
                    if (_memo.results.peek() == null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_index.element, _memo.input))
                    }
                    _label = 5
                }
                // AND 5
                5 -> {
                    val _r5_2 = _memo.results.pop()
                    val _r5_1 = _memo.results.pop()

                    if (_r5_1 != null && _r5_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i5, _index.element, _memo.input, (_r5_1.results + _r5_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i5
                    }

                    // AND shortcut 4
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 4
                        continue
                    }

                    // STAR 23
                    _start_i23 = _index.element
                    _label = 23
                }
                // STAR 23
                23 -> {
                    // CALLORVAR NL
                    var _r24: _KotlinParser_Item? = null
                    _r24 = _MemoCall(_memo, "NL", _index.element, ::NL, null)
                    if (_r24 != null) _index.element = _r24.nextIndex

                    // STAR 23
                    val _r23 = _memo.results.pop()
                    if (_r23 != null) {
                        _res23 += _r23.results
                        _label = 23
                        continue
                    } else {
                        _memo.results.push(_KotlinParser_Item(_start_i23, _index.element, _memo.input, _res23.filterNotNull(), true))
                    }

                    _label = 4
                }
                // AND 4
                4 -> {
                    val _r4_2 = _memo.results.pop()
                    val _r4_1 = _memo.results.pop()

                    if (_r4_1 != null && _r4_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i4, _index.element, _memo.input, (_r4_1.results + _r4_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i4
                    }

                    // AND shortcut 3
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 3
                        continue
                    }

                    // CALLORVAR ASSIGNMENT
                    var _r25: _KotlinParser_Item? = null
                    _r25 = _MemoCall(_memo, "ASSIGNMENT", _index.element, ::ASSIGNMENT, null)
                    if (_r25 != null) _index.element = _r25.nextIndex

                    _label = 3
                }
                // AND 3
                3 -> {
                    val _r3_2 = _memo.results.pop()
                    val _r3_1 = _memo.results.pop()

                    if (_r3_1 != null && _r3_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i3, _index.element, _memo.input, (_r3_1.results + _r3_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i3
                    }

                    // AND shortcut 2
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 2
                        continue
                    }

                    // STAR 26
                    _start_i26 = _index.element
                    _label = 26
                }
                // STAR 26
                26 -> {
                    // CALLORVAR NL
                    var _r27: _KotlinParser_Item? = null
                    _r27 = _MemoCall(_memo, "NL", _index.element, ::NL, null)
                    if (_r27 != null) _index.element = _r27.nextIndex

                    // STAR 26
                    val _r26 = _memo.results.pop()
                    if (_r26 != null) {
                        _res26 += _r26.results
                        _label = 26
                        continue
                    } else {
                        _memo.results.push(_KotlinParser_Item(_start_i26, _index.element, _memo.input, _res26.filterNotNull(), true))
                    }

                    _label = 2
                }
                // AND 2
                2 -> {
                    val _r2_2 = _memo.results.pop()
                    val _r2_1 = _memo.results.pop()

                    if (_r2_1 != null && _r2_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i2, _index.element, _memo.input, (_r2_1.results + _r2_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i2
                    }

                    // AND shortcut 1
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 1
                        continue
                    }

                    // CALLORVAR type
                    var _r29: _KotlinParser_Item? = null
                    _r29 = _MemoCall(_memo, "type", _index.element, ::type, null)
                    if (_r29 != null) _index.element = _r29.nextIndex

                    // BIND t
                    t = _memo.results.peek()

                    _label = 1
                }
                // AND 1
                1 -> {
                    val _r1_2 = _memo.results.pop()
                    val _r1_1 = _memo.results.pop()

                    if (_r1_1 != null && _r1_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i1, _index.element, _memo.input, (_r1_1.results + _r1_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i1
                    }

                    // ACT 0
                    val _r0 = _memo.results.peek()
                    if (_r0 != null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_r0.startIndex, _r0.nextIndex, _memo.input, _Thunk({ AST.TypeAlias(mod.l, name.s, tp.l, t.r) }, _r0), true))
                    }

                    break
                }
            }
        }
    }


    open fun declaration(_memo: _KotlinParser_Memo, __index: Int, _args: _KotlinParser_Args?) {
        val _index = Ref.IntRef()
        _index.element = __index

        val _arg_index = Ref.IntRef()
        val _arg_input_index = Ref.IntRef()

        // OR 0
        var _start_i0 = _index.element

        // OR 1
        var _start_i1 = _index.element

        // OR 2
        var _start_i2 = _index.element

        // OR 3
        var _start_i3 = _index.element

        // OR 4
        var _start_i4 = _index.element

        var _label = -1
        while(true) {
            when(_label) {
                -1 -> {
                    // OR 0
                    _start_i0 = _index.element

                    // OR 1
                    _start_i1 = _index.element

                    // OR 2
                    _start_i2 = _index.element

                    // OR 3
                    _start_i3 = _index.element

                    // OR 4
                    _start_i4 = _index.element

                    // CALLORVAR userDefinedDeclaration
                    var _r5: _KotlinParser_Item? = null
                    _r5 = _MemoCall(_memo, "userDefinedDeclaration", _index.element, ::userDefinedDeclaration, null)
                    if (_r5 != null) _index.element = _r5.nextIndex

                    // OR shortcut 4
                    if (_memo.results.peek() == null) {
                        _memo.results.pop()
                        _index.element = _start_i4
                    } else {
                        _label = 4
                        continue
                    }

                    // CALLORVAR classDeclaration
                    var _r6: _KotlinParser_Item? = null
                    _r6 = _MemoCall(_memo, "classDeclaration", _index.element, ::classDeclaration, null)
                    if (_r6 != null) _index.element = _r6.nextIndex

                    _label = 4
                }
                // OR 4
                4 -> {
                    // OR shortcut 3
                    if (_memo.results.peek() == null) {
                        _memo.results.pop()
                        _index.element = _start_i3
                    } else {
                        _label = 3
                        continue
                    }

                    // CALLORVAR objectDeclaration
                    var _r7: _KotlinParser_Item? = null
                    _r7 = _MemoCall(_memo, "objectDeclaration", _index.element, ::objectDeclaration, null)
                    if (_r7 != null) _index.element = _r7.nextIndex

                    _label = 3
                }
                // OR 3
                3 -> {
                    // OR shortcut 2
                    if (_memo.results.peek() == null) {
                        _memo.results.pop()
                        _index.element = _start_i2
                    } else {
                        _label = 2
                        continue
                    }

                    // CALLORVAR functionDeclaration
                    var _r8: _KotlinParser_Item? = null
                    _r8 = _MemoCall(_memo, "functionDeclaration", _index.element, ::functionDeclaration, null)
                    if (_r8 != null) _index.element = _r8.nextIndex

                    _label = 2
                }
                // OR 2
                2 -> {
                    // OR shortcut 1
                    if (_memo.results.peek() == null) {
                        _memo.results.pop()
                        _index.element = _start_i1
                    } else {
                        _label = 1
                        continue
                    }

                    // CALLORVAR propertyDeclaration
                    var _r9: _KotlinParser_Item? = null
                    _r9 = _MemoCall(_memo, "propertyDeclaration", _index.element, ::propertyDeclaration, null)
                    if (_r9 != null) _index.element = _r9.nextIndex

                    _label = 1
                }
                // OR 1
                1 -> {
                    // OR shortcut 0
                    if (_memo.results.peek() == null) {
                        _memo.results.pop()
                        _index.element = _start_i0
                    } else {
                        _label = 0
                        continue
                    }

                    // CALLORVAR typeAlias
                    var _r10: _KotlinParser_Item? = null
                    _r10 = _MemoCall(_memo, "typeAlias", _index.element, ::typeAlias, null)
                    if (_r10 != null) _index.element = _r10.nextIndex

                    _label = 0
                }
                // OR 0
                0 -> {
                    break
                }
            }
        }
    }


    open fun userDefinedDeclaration(_memo: _KotlinParser_Memo, __index: Int, _args: _KotlinParser_Args?) {
        val _index = Ref.IntRef()
        _index.element = __index

        val _arg_index = Ref.IntRef()
        val _arg_input_index = Ref.IntRef()

        var _label = -1
        while(true) {
            when(_label) {
                -1 -> {
                    // CALLORVAR _ABSURD
                    var _r0: _KotlinParser_Item? = null
                    _r0 = _MemoCall(_memo, "_ABSURD", _index.element, ::_ABSURD, null)
                    if (_r0 != null) _index.element = _r0.nextIndex

                    break
                }
            }
        }
    }


    open fun classDeclaration(_memo: _KotlinParser_Memo, __index: Int, _args: _KotlinParser_Args?) {
        val _index = Ref.IntRef()
        _index.element = __index

        val _arg_index = Ref.IntRef()
        val _arg_input_index = Ref.IntRef()

        var mod: _KotlinParser_Item? = null
        var ch: _KotlinParser_Item? = null
        var body: _KotlinParser_Item? = null

        // OR 0
        var _start_i0 = _index.element

        // OR 1
        var _start_i1 = _index.element

        // AND 3
        var _start_i3 = _index.element

        // AND 4
        var _start_i4 = _index.element

        // AND 5
        var _start_i5 = _index.element

        // AND 6
        var _start_i6 = _index.element

        // STAR 11
        var _start_i11 = _index.element
        val _inp11 = arrayListOf<Token?>()
        val _res11 = arrayListOf<AST.AstNode?>()

        // OR 17
        var _start_i17 = _index.element

        // AND 18
        var _start_i18 = _index.element

        // STAR 19
        var _start_i19 = _index.element
        val _inp19 = arrayListOf<Token?>()
        val _res19 = arrayListOf<AST.AstNode?>()

        // AND 22
        var _start_i22 = _index.element

        // STAR 23
        var _start_i23 = _index.element
        val _inp23 = arrayListOf<Token?>()
        val _res23 = arrayListOf<AST.AstNode?>()

        // AND 27
        var _start_i27 = _index.element

        // AND 28
        var _start_i28 = _index.element

        // AND 29
        var _start_i29 = _index.element

        // AND 30
        var _start_i30 = _index.element

        // AND 31
        var _start_i31 = _index.element

        // STAR 36
        var _start_i36 = _index.element
        val _inp36 = arrayListOf<Token?>()
        val _res36 = arrayListOf<AST.AstNode?>()

        // STAR 40
        var _start_i40 = _index.element
        val _inp40 = arrayListOf<Token?>()
        val _res40 = arrayListOf<AST.AstNode?>()

        // AND 46
        var _start_i46 = _index.element

        // AND 47
        var _start_i47 = _index.element

        // AND 48
        var _start_i48 = _index.element

        // AND 49
        var _start_i49 = _index.element

        // AND 50
        var _start_i50 = _index.element

        // AND 51
        var _start_i51 = _index.element

        // AND 52
        var _start_i52 = _index.element

        // STAR 57
        var _start_i57 = _index.element
        val _inp57 = arrayListOf<Token?>()
        val _res57 = arrayListOf<AST.AstNode?>()

        // STAR 60
        var _start_i60 = _index.element
        val _inp60 = arrayListOf<Token?>()
        val _res60 = arrayListOf<AST.AstNode?>()

        // STAR 64
        var _start_i64 = _index.element
        val _inp64 = arrayListOf<Token?>()
        val _res64 = arrayListOf<AST.AstNode?>()

        var _label = -1
        while(true) {
            when(_label) {
                -1 -> {
                    // OR 0
                    _start_i0 = _index.element

                    // OR 1
                    _start_i1 = _index.element

                    // AND 3
                    _start_i3 = _index.element

                    // AND 4
                    _start_i4 = _index.element

                    // AND 5
                    _start_i5 = _index.element

                    // AND 6
                    _start_i6 = _index.element

                    // CALLORVAR modifiers
                    var _r9: _KotlinParser_Item? = null
                    _r9 = _MemoCall(_memo, "modifiers", _index.element, ::modifiers, null)
                    if (_r9 != null) _index.element = _r9.nextIndex

                    // QUES 8
                    if (_memo.results.peek() == null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_index.element, _memo.input))
                    }
                    // BIND mod
                    mod = _memo.results.peek()

                    // AND shortcut 6
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 6
                        continue
                    }

                    // CALLORVAR CLASS
                    var _r10: _KotlinParser_Item? = null
                    _r10 = _MemoCall(_memo, "CLASS", _index.element, ::CLASS, null)
                    if (_r10 != null) _index.element = _r10.nextIndex

                    _label = 6
                }
                // AND 6
                6 -> {
                    val _r6_2 = _memo.results.pop()
                    val _r6_1 = _memo.results.pop()

                    if (_r6_1 != null && _r6_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i6, _index.element, _memo.input, (_r6_1.results + _r6_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i6
                    }

                    // AND shortcut 5
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 5
                        continue
                    }

                    // STAR 11
                    _start_i11 = _index.element
                    _label = 11
                }
                // STAR 11
                11 -> {
                    // CALLORVAR NL
                    var _r12: _KotlinParser_Item? = null
                    _r12 = _MemoCall(_memo, "NL", _index.element, ::NL, null)
                    if (_r12 != null) _index.element = _r12.nextIndex

                    // STAR 11
                    val _r11 = _memo.results.pop()
                    if (_r11 != null) {
                        _res11 += _r11.results
                        _label = 11
                        continue
                    } else {
                        _memo.results.push(_KotlinParser_Item(_start_i11, _index.element, _memo.input, _res11.filterNotNull(), true))
                    }

                    _label = 5
                }
                // AND 5
                5 -> {
                    val _r5_2 = _memo.results.pop()
                    val _r5_1 = _memo.results.pop()

                    if (_r5_1 != null && _r5_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i5, _index.element, _memo.input, (_r5_1.results + _r5_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i5
                    }

                    // AND shortcut 4
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 4
                        continue
                    }

                    // CALLORVAR classHeader
                    var _r14: _KotlinParser_Item? = null
                    _r14 = _MemoCall(_memo, "classHeader", _index.element, ::classHeader, null)
                    if (_r14 != null) _index.element = _r14.nextIndex

                    // BIND ch
                    ch = _memo.results.peek()

                    _label = 4
                }
                // AND 4
                4 -> {
                    val _r4_2 = _memo.results.pop()
                    val _r4_1 = _memo.results.pop()

                    if (_r4_1 != null && _r4_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i4, _index.element, _memo.input, (_r4_1.results + _r4_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i4
                    }

                    // AND shortcut 3
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 3
                        continue
                    }

                    // OR 17
                    _start_i17 = _index.element

                    // AND 18
                    _start_i18 = _index.element

                    // STAR 19
                    _start_i19 = _index.element
                    _label = 19
                }
                // STAR 19
                19 -> {
                    // CALLORVAR NL
                    var _r20: _KotlinParser_Item? = null
                    _r20 = _MemoCall(_memo, "NL", _index.element, ::NL, null)
                    if (_r20 != null) _index.element = _r20.nextIndex

                    // STAR 19
                    val _r19 = _memo.results.pop()
                    if (_r19 != null) {
                        _res19 += _r19.results
                        _label = 19
                        continue
                    } else {
                        _memo.results.push(_KotlinParser_Item(_start_i19, _index.element, _memo.input, _res19.filterNotNull(), true))
                    }

                    // AND shortcut 18
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 18
                        continue
                    }

                    // CALLORVAR classBody
                    var _r21: _KotlinParser_Item? = null
                    _r21 = _MemoCall(_memo, "classBody", _index.element, ::classBody, null)
                    if (_r21 != null) _index.element = _r21.nextIndex

                    _label = 18
                }
                // AND 18
                18 -> {
                    val _r18_2 = _memo.results.pop()
                    val _r18_1 = _memo.results.pop()

                    if (_r18_1 != null && _r18_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i18, _index.element, _memo.input, (_r18_1.results + _r18_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i18
                    }

                    // OR shortcut 17
                    if (_memo.results.peek() == null) {
                        _memo.results.pop()
                        _index.element = _start_i17
                    } else {
                        _label = 17
                        continue
                    }

                    // AND 22
                    _start_i22 = _index.element

                    // STAR 23
                    _start_i23 = _index.element
                    _label = 23
                }
                // STAR 23
                23 -> {
                    // CALLORVAR NL
                    var _r24: _KotlinParser_Item? = null
                    _r24 = _MemoCall(_memo, "NL", _index.element, ::NL, null)
                    if (_r24 != null) _index.element = _r24.nextIndex

                    // STAR 23
                    val _r23 = _memo.results.pop()
                    if (_r23 != null) {
                        _res23 += _r23.results
                        _label = 23
                        continue
                    } else {
                        _memo.results.push(_KotlinParser_Item(_start_i23, _index.element, _memo.input, _res23.filterNotNull(), true))
                    }

                    // AND shortcut 22
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 22
                        continue
                    }

                    // CALLORVAR enumClassBody
                    var _r25: _KotlinParser_Item? = null
                    _r25 = _MemoCall(_memo, "enumClassBody", _index.element, ::enumClassBody, null)
                    if (_r25 != null) _index.element = _r25.nextIndex

                    _label = 22
                }
                // AND 22
                22 -> {
                    val _r22_2 = _memo.results.pop()
                    val _r22_1 = _memo.results.pop()

                    if (_r22_1 != null && _r22_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i22, _index.element, _memo.input, (_r22_1.results + _r22_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i22
                    }

                    _label = 17
                }
                // OR 17
                17 -> {
                    // QUES 16
                    if (_memo.results.peek() == null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_index.element, _memo.input))
                    }
                    // BIND body
                    body = _memo.results.peek()

                    _label = 3
                }
                // AND 3
                3 -> {
                    val _r3_2 = _memo.results.pop()
                    val _r3_1 = _memo.results.pop()

                    if (_r3_1 != null && _r3_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i3, _index.element, _memo.input, (_r3_1.results + _r3_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i3
                    }

                    // ACT 2
                    val _r2 = _memo.results.peek()
                    if (_r2 != null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_r2.startIndex, _r2.nextIndex, _memo.input, _Thunk({ val h = ch.r as AST.ClassHeader
                          AST.Class(mod.l, h.name, h.typeParameters, h.primaryConstructor, h.delegationSpecifiers, h.typeConstraints, body.nr) }, _r2), true))
                    }

                    // OR shortcut 1
                    if (_memo.results.peek() == null) {
                        _memo.results.pop()
                        _index.element = _start_i1
                    } else {
                        _label = 1
                        continue
                    }

                    // AND 27
                    _start_i27 = _index.element

                    // AND 28
                    _start_i28 = _index.element

                    // AND 29
                    _start_i29 = _index.element

                    // AND 30
                    _start_i30 = _index.element

                    // AND 31
                    _start_i31 = _index.element

                    // CALLORVAR modifiers
                    var _r34: _KotlinParser_Item? = null
                    _r34 = _MemoCall(_memo, "modifiers", _index.element, ::modifiers, null)
                    if (_r34 != null) _index.element = _r34.nextIndex

                    // QUES 33
                    if (_memo.results.peek() == null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_index.element, _memo.input))
                    }
                    // BIND mod
                    mod = _memo.results.peek()

                    // AND shortcut 31
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 31
                        continue
                    }

                    // CALLORVAR INTERFACE
                    var _r35: _KotlinParser_Item? = null
                    _r35 = _MemoCall(_memo, "INTERFACE", _index.element, ::INTERFACE, null)
                    if (_r35 != null) _index.element = _r35.nextIndex

                    _label = 31
                }
                // AND 31
                31 -> {
                    val _r31_2 = _memo.results.pop()
                    val _r31_1 = _memo.results.pop()

                    if (_r31_1 != null && _r31_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i31, _index.element, _memo.input, (_r31_1.results + _r31_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i31
                    }

                    // AND shortcut 30
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 30
                        continue
                    }

                    // STAR 36
                    _start_i36 = _index.element
                    _label = 36
                }
                // STAR 36
                36 -> {
                    // CALLORVAR NL
                    var _r37: _KotlinParser_Item? = null
                    _r37 = _MemoCall(_memo, "NL", _index.element, ::NL, null)
                    if (_r37 != null) _index.element = _r37.nextIndex

                    // STAR 36
                    val _r36 = _memo.results.pop()
                    if (_r36 != null) {
                        _res36 += _r36.results
                        _label = 36
                        continue
                    } else {
                        _memo.results.push(_KotlinParser_Item(_start_i36, _index.element, _memo.input, _res36.filterNotNull(), true))
                    }

                    _label = 30
                }
                // AND 30
                30 -> {
                    val _r30_2 = _memo.results.pop()
                    val _r30_1 = _memo.results.pop()

                    if (_r30_1 != null && _r30_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i30, _index.element, _memo.input, (_r30_1.results + _r30_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i30
                    }

                    // AND shortcut 29
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 29
                        continue
                    }

                    // CALLORVAR classHeader
                    var _r39: _KotlinParser_Item? = null
                    _r39 = _MemoCall(_memo, "classHeader", _index.element, ::classHeader, null)
                    if (_r39 != null) _index.element = _r39.nextIndex

                    // BIND ch
                    ch = _memo.results.peek()

                    _label = 29
                }
                // AND 29
                29 -> {
                    val _r29_2 = _memo.results.pop()
                    val _r29_1 = _memo.results.pop()

                    if (_r29_1 != null && _r29_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i29, _index.element, _memo.input, (_r29_1.results + _r29_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i29
                    }

                    // AND shortcut 28
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 28
                        continue
                    }

                    // STAR 40
                    _start_i40 = _index.element
                    _label = 40
                }
                // STAR 40
                40 -> {
                    // CALLORVAR NL
                    var _r41: _KotlinParser_Item? = null
                    _r41 = _MemoCall(_memo, "NL", _index.element, ::NL, null)
                    if (_r41 != null) _index.element = _r41.nextIndex

                    // STAR 40
                    val _r40 = _memo.results.pop()
                    if (_r40 != null) {
                        _res40 += _r40.results
                        _label = 40
                        continue
                    } else {
                        _memo.results.push(_KotlinParser_Item(_start_i40, _index.element, _memo.input, _res40.filterNotNull(), true))
                    }

                    _label = 28
                }
                // AND 28
                28 -> {
                    val _r28_2 = _memo.results.pop()
                    val _r28_1 = _memo.results.pop()

                    if (_r28_1 != null && _r28_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i28, _index.element, _memo.input, (_r28_1.results + _r28_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i28
                    }

                    // AND shortcut 27
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 27
                        continue
                    }

                    // CALLORVAR classBody
                    var _r44: _KotlinParser_Item? = null
                    _r44 = _MemoCall(_memo, "classBody", _index.element, ::classBody, null)
                    if (_r44 != null) _index.element = _r44.nextIndex

                    // QUES 43
                    if (_memo.results.peek() == null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_index.element, _memo.input))
                    }
                    // BIND body
                    body = _memo.results.peek()

                    _label = 27
                }
                // AND 27
                27 -> {
                    val _r27_2 = _memo.results.pop()
                    val _r27_1 = _memo.results.pop()

                    if (_r27_1 != null && _r27_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i27, _index.element, _memo.input, (_r27_1.results + _r27_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i27
                    }

                    // ACT 26
                    val _r26 = _memo.results.peek()
                    if (_r26 != null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_r26.startIndex, _r26.nextIndex, _memo.input, _Thunk({ val h = ch.r as AST.ClassHeader
                          if (h.primaryConstructor != null) error("Interface should have no constructor")
                          if (h.delegationSpecifiers.isNotEmpty()) error("Interface should have no delegation specifiers")
                          AST.Interface(mod.l, h.name, h.typeParameters, h.typeConstraints, body.nr) }, _r26), true))
                    }

                    _label = 1
                }
                // OR 1
                1 -> {
                    // OR shortcut 0
                    if (_memo.results.peek() == null) {
                        _memo.results.pop()
                        _index.element = _start_i0
                    } else {
                        _label = 0
                        continue
                    }

                    // AND 46
                    _start_i46 = _index.element

                    // AND 47
                    _start_i47 = _index.element

                    // AND 48
                    _start_i48 = _index.element

                    // AND 49
                    _start_i49 = _index.element

                    // AND 50
                    _start_i50 = _index.element

                    // AND 51
                    _start_i51 = _index.element

                    // AND 52
                    _start_i52 = _index.element

                    // CALLORVAR modifiers
                    var _r55: _KotlinParser_Item? = null
                    _r55 = _MemoCall(_memo, "modifiers", _index.element, ::modifiers, null)
                    if (_r55 != null) _index.element = _r55.nextIndex

                    // QUES 54
                    if (_memo.results.peek() == null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_index.element, _memo.input))
                    }
                    // BIND mod
                    mod = _memo.results.peek()

                    // AND shortcut 52
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 52
                        continue
                    }

                    // CALLORVAR FUN
                    var _r56: _KotlinParser_Item? = null
                    _r56 = _MemoCall(_memo, "FUN", _index.element, ::FUN, null)
                    if (_r56 != null) _index.element = _r56.nextIndex

                    _label = 52
                }
                // AND 52
                52 -> {
                    val _r52_2 = _memo.results.pop()
                    val _r52_1 = _memo.results.pop()

                    if (_r52_1 != null && _r52_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i52, _index.element, _memo.input, (_r52_1.results + _r52_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i52
                    }

                    // AND shortcut 51
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 51
                        continue
                    }

                    // STAR 57
                    _start_i57 = _index.element
                    _label = 57
                }
                // STAR 57
                57 -> {
                    // CALLORVAR NL
                    var _r58: _KotlinParser_Item? = null
                    _r58 = _MemoCall(_memo, "NL", _index.element, ::NL, null)
                    if (_r58 != null) _index.element = _r58.nextIndex

                    // STAR 57
                    val _r57 = _memo.results.pop()
                    if (_r57 != null) {
                        _res57 += _r57.results
                        _label = 57
                        continue
                    } else {
                        _memo.results.push(_KotlinParser_Item(_start_i57, _index.element, _memo.input, _res57.filterNotNull(), true))
                    }

                    _label = 51
                }
                // AND 51
                51 -> {
                    val _r51_2 = _memo.results.pop()
                    val _r51_1 = _memo.results.pop()

                    if (_r51_1 != null && _r51_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i51, _index.element, _memo.input, (_r51_1.results + _r51_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i51
                    }

                    // AND shortcut 50
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 50
                        continue
                    }

                    // CALLORVAR INTERFACE
                    var _r59: _KotlinParser_Item? = null
                    _r59 = _MemoCall(_memo, "INTERFACE", _index.element, ::INTERFACE, null)
                    if (_r59 != null) _index.element = _r59.nextIndex

                    _label = 50
                }
                // AND 50
                50 -> {
                    val _r50_2 = _memo.results.pop()
                    val _r50_1 = _memo.results.pop()

                    if (_r50_1 != null && _r50_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i50, _index.element, _memo.input, (_r50_1.results + _r50_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i50
                    }

                    // AND shortcut 49
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 49
                        continue
                    }

                    // STAR 60
                    _start_i60 = _index.element
                    _label = 60
                }
                // STAR 60
                60 -> {
                    // CALLORVAR NL
                    var _r61: _KotlinParser_Item? = null
                    _r61 = _MemoCall(_memo, "NL", _index.element, ::NL, null)
                    if (_r61 != null) _index.element = _r61.nextIndex

                    // STAR 60
                    val _r60 = _memo.results.pop()
                    if (_r60 != null) {
                        _res60 += _r60.results
                        _label = 60
                        continue
                    } else {
                        _memo.results.push(_KotlinParser_Item(_start_i60, _index.element, _memo.input, _res60.filterNotNull(), true))
                    }

                    _label = 49
                }
                // AND 49
                49 -> {
                    val _r49_2 = _memo.results.pop()
                    val _r49_1 = _memo.results.pop()

                    if (_r49_1 != null && _r49_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i49, _index.element, _memo.input, (_r49_1.results + _r49_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i49
                    }

                    // AND shortcut 48
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 48
                        continue
                    }

                    // CALLORVAR classHeader
                    var _r63: _KotlinParser_Item? = null
                    _r63 = _MemoCall(_memo, "classHeader", _index.element, ::classHeader, null)
                    if (_r63 != null) _index.element = _r63.nextIndex

                    // BIND ch
                    ch = _memo.results.peek()

                    _label = 48
                }
                // AND 48
                48 -> {
                    val _r48_2 = _memo.results.pop()
                    val _r48_1 = _memo.results.pop()

                    if (_r48_1 != null && _r48_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i48, _index.element, _memo.input, (_r48_1.results + _r48_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i48
                    }

                    // AND shortcut 47
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 47
                        continue
                    }

                    // STAR 64
                    _start_i64 = _index.element
                    _label = 64
                }
                // STAR 64
                64 -> {
                    // CALLORVAR NL
                    var _r65: _KotlinParser_Item? = null
                    _r65 = _MemoCall(_memo, "NL", _index.element, ::NL, null)
                    if (_r65 != null) _index.element = _r65.nextIndex

                    // STAR 64
                    val _r64 = _memo.results.pop()
                    if (_r64 != null) {
                        _res64 += _r64.results
                        _label = 64
                        continue
                    } else {
                        _memo.results.push(_KotlinParser_Item(_start_i64, _index.element, _memo.input, _res64.filterNotNull(), true))
                    }

                    _label = 47
                }
                // AND 47
                47 -> {
                    val _r47_2 = _memo.results.pop()
                    val _r47_1 = _memo.results.pop()

                    if (_r47_1 != null && _r47_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i47, _index.element, _memo.input, (_r47_1.results + _r47_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i47
                    }

                    // AND shortcut 46
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 46
                        continue
                    }

                    // CALLORVAR enumClassBody
                    var _r68: _KotlinParser_Item? = null
                    _r68 = _MemoCall(_memo, "enumClassBody", _index.element, ::enumClassBody, null)
                    if (_r68 != null) _index.element = _r68.nextIndex

                    // QUES 67
                    if (_memo.results.peek() == null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_index.element, _memo.input))
                    }
                    // BIND body
                    body = _memo.results.peek()

                    _label = 46
                }
                // AND 46
                46 -> {
                    val _r46_2 = _memo.results.pop()
                    val _r46_1 = _memo.results.pop()

                    if (_r46_1 != null && _r46_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i46, _index.element, _memo.input, (_r46_1.results + _r46_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i46
                    }

                    // ACT 45
                    val _r45 = _memo.results.peek()
                    if (_r45 != null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_r45.startIndex, _r45.nextIndex, _memo.input, _Thunk({ val h = ch.r as AST.ClassHeader
                          if (h.primaryConstructor != null) error("Fun interface should have no constructor")
                          if (h.delegationSpecifiers.isNotEmpty()) error("Fun interface should have no delegation specifiers")
                          AST.FunInterface(mod.l, h.name, h.typeParameters, h.typeConstraints, body.nr) }, _r45), true))
                    }

                    _label = 0
                }
                // OR 0
                0 -> {
                    break
                }
            }
        }
    }


    open fun classHeader(_memo: _KotlinParser_Memo, __index: Int, _args: _KotlinParser_Args?) {
        val _index = Ref.IntRef()
        _index.element = __index

        val _arg_index = Ref.IntRef()
        val _arg_input_index = Ref.IntRef()

        var name: _KotlinParser_Item? = null
        var tp: _KotlinParser_Item? = null
        var pc: _KotlinParser_Item? = null
        var ds: _KotlinParser_Item? = null
        var tc: _KotlinParser_Item? = null

        // AND 1
        var _start_i1 = _index.element

        // AND 2
        var _start_i2 = _index.element

        // AND 3
        var _start_i3 = _index.element

        // AND 4
        var _start_i4 = _index.element

        // AND 8
        var _start_i8 = _index.element

        // STAR 9
        var _start_i9 = _index.element
        val _inp9 = arrayListOf<Token?>()
        val _res9 = arrayListOf<AST.AstNode?>()

        // AND 14
        var _start_i14 = _index.element

        // STAR 15
        var _start_i15 = _index.element
        val _inp15 = arrayListOf<Token?>()
        val _res15 = arrayListOf<AST.AstNode?>()

        // AND 20
        var _start_i20 = _index.element

        // AND 21
        var _start_i21 = _index.element

        // AND 22
        var _start_i22 = _index.element

        // STAR 23
        var _start_i23 = _index.element
        val _inp23 = arrayListOf<Token?>()
        val _res23 = arrayListOf<AST.AstNode?>()

        // STAR 26
        var _start_i26 = _index.element
        val _inp26 = arrayListOf<Token?>()
        val _res26 = arrayListOf<AST.AstNode?>()

        // AND 31
        var _start_i31 = _index.element

        // STAR 32
        var _start_i32 = _index.element
        val _inp32 = arrayListOf<Token?>()
        val _res32 = arrayListOf<AST.AstNode?>()

        var _label = -1
        while(true) {
            when(_label) {
                -1 -> {
                    // AND 1
                    _start_i1 = _index.element

                    // AND 2
                    _start_i2 = _index.element

                    // AND 3
                    _start_i3 = _index.element

                    // AND 4
                    _start_i4 = _index.element

                    // CALLORVAR simpleIdentifier
                    var _r6: _KotlinParser_Item? = null
                    _r6 = _MemoCall(_memo, "simpleIdentifier", _index.element, ::simpleIdentifier, null)
                    if (_r6 != null) _index.element = _r6.nextIndex

                    // BIND name
                    name = _memo.results.peek()

                    // AND shortcut 4
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 4
                        continue
                    }

                    // AND 8
                    _start_i8 = _index.element

                    // STAR 9
                    _start_i9 = _index.element
                    _label = 9
                }
                // STAR 9
                9 -> {
                    // CALLORVAR NL
                    var _r10: _KotlinParser_Item? = null
                    _r10 = _MemoCall(_memo, "NL", _index.element, ::NL, null)
                    if (_r10 != null) _index.element = _r10.nextIndex

                    // STAR 9
                    val _r9 = _memo.results.pop()
                    if (_r9 != null) {
                        _res9 += _r9.results
                        _label = 9
                        continue
                    } else {
                        _memo.results.push(_KotlinParser_Item(_start_i9, _index.element, _memo.input, _res9.filterNotNull(), true))
                    }

                    // AND shortcut 8
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 8
                        continue
                    }

                    // CALLORVAR typeParameters
                    var _r12: _KotlinParser_Item? = null
                    _r12 = _MemoCall(_memo, "typeParameters", _index.element, ::typeParameters, null)
                    if (_r12 != null) _index.element = _r12.nextIndex

                    // BIND tp
                    tp = _memo.results.peek()

                    _label = 8
                }
                // AND 8
                8 -> {
                    val _r8_2 = _memo.results.pop()
                    val _r8_1 = _memo.results.pop()

                    if (_r8_1 != null && _r8_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i8, _index.element, _memo.input, (_r8_1.results + _r8_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i8
                    }

                    // QUES 7
                    if (_memo.results.peek() == null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_index.element, _memo.input))
                    }
                    _label = 4
                }
                // AND 4
                4 -> {
                    val _r4_2 = _memo.results.pop()
                    val _r4_1 = _memo.results.pop()

                    if (_r4_1 != null && _r4_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i4, _index.element, _memo.input, (_r4_1.results + _r4_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i4
                    }

                    // AND shortcut 3
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 3
                        continue
                    }

                    // AND 14
                    _start_i14 = _index.element

                    // STAR 15
                    _start_i15 = _index.element
                    _label = 15
                }
                // STAR 15
                15 -> {
                    // CALLORVAR NL
                    var _r16: _KotlinParser_Item? = null
                    _r16 = _MemoCall(_memo, "NL", _index.element, ::NL, null)
                    if (_r16 != null) _index.element = _r16.nextIndex

                    // STAR 15
                    val _r15 = _memo.results.pop()
                    if (_r15 != null) {
                        _res15 += _r15.results
                        _label = 15
                        continue
                    } else {
                        _memo.results.push(_KotlinParser_Item(_start_i15, _index.element, _memo.input, _res15.filterNotNull(), true))
                    }

                    // AND shortcut 14
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 14
                        continue
                    }

                    // CALLORVAR primaryConstructor
                    var _r18: _KotlinParser_Item? = null
                    _r18 = _MemoCall(_memo, "primaryConstructor", _index.element, ::primaryConstructor, null)
                    if (_r18 != null) _index.element = _r18.nextIndex

                    // BIND pc
                    pc = _memo.results.peek()

                    _label = 14
                }
                // AND 14
                14 -> {
                    val _r14_2 = _memo.results.pop()
                    val _r14_1 = _memo.results.pop()

                    if (_r14_1 != null && _r14_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i14, _index.element, _memo.input, (_r14_1.results + _r14_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i14
                    }

                    // QUES 13
                    if (_memo.results.peek() == null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_index.element, _memo.input))
                    }
                    _label = 3
                }
                // AND 3
                3 -> {
                    val _r3_2 = _memo.results.pop()
                    val _r3_1 = _memo.results.pop()

                    if (_r3_1 != null && _r3_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i3, _index.element, _memo.input, (_r3_1.results + _r3_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i3
                    }

                    // AND shortcut 2
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 2
                        continue
                    }

                    // AND 20
                    _start_i20 = _index.element

                    // AND 21
                    _start_i21 = _index.element

                    // AND 22
                    _start_i22 = _index.element

                    // STAR 23
                    _start_i23 = _index.element
                    _label = 23
                }
                // STAR 23
                23 -> {
                    // CALLORVAR NL
                    var _r24: _KotlinParser_Item? = null
                    _r24 = _MemoCall(_memo, "NL", _index.element, ::NL, null)
                    if (_r24 != null) _index.element = _r24.nextIndex

                    // STAR 23
                    val _r23 = _memo.results.pop()
                    if (_r23 != null) {
                        _res23 += _r23.results
                        _label = 23
                        continue
                    } else {
                        _memo.results.push(_KotlinParser_Item(_start_i23, _index.element, _memo.input, _res23.filterNotNull(), true))
                    }

                    // AND shortcut 22
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 22
                        continue
                    }

                    // CALLORVAR COLON
                    var _r25: _KotlinParser_Item? = null
                    _r25 = _MemoCall(_memo, "COLON", _index.element, ::COLON, null)
                    if (_r25 != null) _index.element = _r25.nextIndex

                    _label = 22
                }
                // AND 22
                22 -> {
                    val _r22_2 = _memo.results.pop()
                    val _r22_1 = _memo.results.pop()

                    if (_r22_1 != null && _r22_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i22, _index.element, _memo.input, (_r22_1.results + _r22_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i22
                    }

                    // AND shortcut 21
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 21
                        continue
                    }

                    // STAR 26
                    _start_i26 = _index.element
                    _label = 26
                }
                // STAR 26
                26 -> {
                    // CALLORVAR NL
                    var _r27: _KotlinParser_Item? = null
                    _r27 = _MemoCall(_memo, "NL", _index.element, ::NL, null)
                    if (_r27 != null) _index.element = _r27.nextIndex

                    // STAR 26
                    val _r26 = _memo.results.pop()
                    if (_r26 != null) {
                        _res26 += _r26.results
                        _label = 26
                        continue
                    } else {
                        _memo.results.push(_KotlinParser_Item(_start_i26, _index.element, _memo.input, _res26.filterNotNull(), true))
                    }

                    _label = 21
                }
                // AND 21
                21 -> {
                    val _r21_2 = _memo.results.pop()
                    val _r21_1 = _memo.results.pop()

                    if (_r21_1 != null && _r21_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i21, _index.element, _memo.input, (_r21_1.results + _r21_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i21
                    }

                    // AND shortcut 20
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 20
                        continue
                    }

                    // CALLORVAR annotatedDelegationSpecifiers
                    var _r29: _KotlinParser_Item? = null
                    _r29 = _MemoCall(_memo, "annotatedDelegationSpecifiers", _index.element, ::annotatedDelegationSpecifiers, null)
                    if (_r29 != null) _index.element = _r29.nextIndex

                    // BIND ds
                    ds = _memo.results.peek()

                    _label = 20
                }
                // AND 20
                20 -> {
                    val _r20_2 = _memo.results.pop()
                    val _r20_1 = _memo.results.pop()

                    if (_r20_1 != null && _r20_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i20, _index.element, _memo.input, (_r20_1.results + _r20_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i20
                    }

                    // QUES 19
                    if (_memo.results.peek() == null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_index.element, _memo.input))
                    }
                    _label = 2
                }
                // AND 2
                2 -> {
                    val _r2_2 = _memo.results.pop()
                    val _r2_1 = _memo.results.pop()

                    if (_r2_1 != null && _r2_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i2, _index.element, _memo.input, (_r2_1.results + _r2_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i2
                    }

                    // AND shortcut 1
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 1
                        continue
                    }

                    // AND 31
                    _start_i31 = _index.element

                    // STAR 32
                    _start_i32 = _index.element
                    _label = 32
                }
                // STAR 32
                32 -> {
                    // CALLORVAR NL
                    var _r33: _KotlinParser_Item? = null
                    _r33 = _MemoCall(_memo, "NL", _index.element, ::NL, null)
                    if (_r33 != null) _index.element = _r33.nextIndex

                    // STAR 32
                    val _r32 = _memo.results.pop()
                    if (_r32 != null) {
                        _res32 += _r32.results
                        _label = 32
                        continue
                    } else {
                        _memo.results.push(_KotlinParser_Item(_start_i32, _index.element, _memo.input, _res32.filterNotNull(), true))
                    }

                    // AND shortcut 31
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 31
                        continue
                    }

                    // CALLORVAR typeConstraints
                    var _r35: _KotlinParser_Item? = null
                    _r35 = _MemoCall(_memo, "typeConstraints", _index.element, ::typeConstraints, null)
                    if (_r35 != null) _index.element = _r35.nextIndex

                    // BIND tc
                    tc = _memo.results.peek()

                    _label = 31
                }
                // AND 31
                31 -> {
                    val _r31_2 = _memo.results.pop()
                    val _r31_1 = _memo.results.pop()

                    if (_r31_1 != null && _r31_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i31, _index.element, _memo.input, (_r31_1.results + _r31_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i31
                    }

                    // QUES 30
                    if (_memo.results.peek() == null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_index.element, _memo.input))
                    }
                    _label = 1
                }
                // AND 1
                1 -> {
                    val _r1_2 = _memo.results.pop()
                    val _r1_1 = _memo.results.pop()

                    if (_r1_1 != null && _r1_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i1, _index.element, _memo.input, (_r1_1.results + _r1_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i1
                    }

                    // ACT 0
                    val _r0 = _memo.results.peek()
                    if (_r0 != null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_r0.startIndex, _r0.nextIndex, _memo.input, _Thunk({ AST.ClassHeader(name.s, tp.l, pc.nr, ds.l, tc.l) }, _r0), true))
                    }

                    break
                }
            }
        }
    }


    open fun primaryConstructor(_memo: _KotlinParser_Memo, __index: Int, _args: _KotlinParser_Args?) {
        val _index = Ref.IntRef()
        _index.element = __index

        val _arg_index = Ref.IntRef()
        val _arg_input_index = Ref.IntRef()

        var mods: _KotlinParser_Item? = null
        var cps: _KotlinParser_Item? = null

        // AND 1
        var _start_i1 = _index.element

        // AND 3
        var _start_i3 = _index.element

        // AND 4
        var _start_i4 = _index.element

        // STAR 9
        var _start_i9 = _index.element
        val _inp9 = arrayListOf<Token?>()
        val _res9 = arrayListOf<AST.AstNode?>()

        var _label = -1
        while(true) {
            when(_label) {
                -1 -> {
                    // AND 1
                    _start_i1 = _index.element

                    // AND 3
                    _start_i3 = _index.element

                    // AND 4
                    _start_i4 = _index.element

                    // CALLORVAR modifiers
                    var _r7: _KotlinParser_Item? = null
                    _r7 = _MemoCall(_memo, "modifiers", _index.element, ::modifiers, null)
                    if (_r7 != null) _index.element = _r7.nextIndex

                    // QUES 6
                    if (_memo.results.peek() == null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_index.element, _memo.input))
                    }
                    // BIND mods
                    mods = _memo.results.peek()

                    // AND shortcut 4
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 4
                        continue
                    }

                    // CALLORVAR CONSTRUCTOR
                    var _r8: _KotlinParser_Item? = null
                    _r8 = _MemoCall(_memo, "CONSTRUCTOR", _index.element, ::CONSTRUCTOR, null)
                    if (_r8 != null) _index.element = _r8.nextIndex

                    _label = 4
                }
                // AND 4
                4 -> {
                    val _r4_2 = _memo.results.pop()
                    val _r4_1 = _memo.results.pop()

                    if (_r4_1 != null && _r4_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i4, _index.element, _memo.input, (_r4_1.results + _r4_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i4
                    }

                    // AND shortcut 3
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 3
                        continue
                    }

                    // STAR 9
                    _start_i9 = _index.element
                    _label = 9
                }
                // STAR 9
                9 -> {
                    // CALLORVAR NL
                    var _r10: _KotlinParser_Item? = null
                    _r10 = _MemoCall(_memo, "NL", _index.element, ::NL, null)
                    if (_r10 != null) _index.element = _r10.nextIndex

                    // STAR 9
                    val _r9 = _memo.results.pop()
                    if (_r9 != null) {
                        _res9 += _r9.results
                        _label = 9
                        continue
                    } else {
                        _memo.results.push(_KotlinParser_Item(_start_i9, _index.element, _memo.input, _res9.filterNotNull(), true))
                    }

                    _label = 3
                }
                // AND 3
                3 -> {
                    val _r3_2 = _memo.results.pop()
                    val _r3_1 = _memo.results.pop()

                    if (_r3_1 != null && _r3_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i3, _index.element, _memo.input, (_r3_1.results + _r3_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i3
                    }

                    // QUES 2
                    if (_memo.results.peek() == null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_index.element, _memo.input))
                    }
                    // AND shortcut 1
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 1
                        continue
                    }

                    // CALLORVAR classParameters
                    var _r12: _KotlinParser_Item? = null
                    _r12 = _MemoCall(_memo, "classParameters", _index.element, ::classParameters, null)
                    if (_r12 != null) _index.element = _r12.nextIndex

                    // BIND cps
                    cps = _memo.results.peek()

                    _label = 1
                }
                // AND 1
                1 -> {
                    val _r1_2 = _memo.results.pop()
                    val _r1_1 = _memo.results.pop()

                    if (_r1_1 != null && _r1_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i1, _index.element, _memo.input, (_r1_1.results + _r1_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i1
                    }

                    // ACT 0
                    val _r0 = _memo.results.peek()
                    if (_r0 != null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_r0.startIndex, _r0.nextIndex, _memo.input, _Thunk({ AST.Constructor(mods.l, cps.l, null, null, primary = true) }, _r0), true))
                    }

                    break
                }
            }
        }
    }


    open fun classBody(_memo: _KotlinParser_Memo, __index: Int, _args: _KotlinParser_Args?) {
        val _index = Ref.IntRef()
        _index.element = __index

        val _arg_index = Ref.IntRef()
        val _arg_input_index = Ref.IntRef()

        var members: _KotlinParser_Item? = null

        // AND 1
        var _start_i1 = _index.element

        // AND 2
        var _start_i2 = _index.element

        // AND 3
        var _start_i3 = _index.element

        // AND 4
        var _start_i4 = _index.element

        // STAR 6
        var _start_i6 = _index.element
        val _inp6 = arrayListOf<Token?>()
        val _res6 = arrayListOf<AST.AstNode?>()

        // STAR 10
        var _start_i10 = _index.element
        val _inp10 = arrayListOf<Token?>()
        val _res10 = arrayListOf<AST.AstNode?>()

        var _label = -1
        while(true) {
            when(_label) {
                -1 -> {
                    // AND 1
                    _start_i1 = _index.element

                    // AND 2
                    _start_i2 = _index.element

                    // AND 3
                    _start_i3 = _index.element

                    // AND 4
                    _start_i4 = _index.element

                    // CALLORVAR LCURL
                    var _r5: _KotlinParser_Item? = null
                    _r5 = _MemoCall(_memo, "LCURL", _index.element, ::LCURL, null)
                    if (_r5 != null) _index.element = _r5.nextIndex

                    // AND shortcut 4
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 4
                        continue
                    }

                    // STAR 6
                    _start_i6 = _index.element
                    _label = 6
                }
                // STAR 6
                6 -> {
                    // CALLORVAR NL
                    var _r7: _KotlinParser_Item? = null
                    _r7 = _MemoCall(_memo, "NL", _index.element, ::NL, null)
                    if (_r7 != null) _index.element = _r7.nextIndex

                    // STAR 6
                    val _r6 = _memo.results.pop()
                    if (_r6 != null) {
                        _res6 += _r6.results
                        _label = 6
                        continue
                    } else {
                        _memo.results.push(_KotlinParser_Item(_start_i6, _index.element, _memo.input, _res6.filterNotNull(), true))
                    }

                    _label = 4
                }
                // AND 4
                4 -> {
                    val _r4_2 = _memo.results.pop()
                    val _r4_1 = _memo.results.pop()

                    if (_r4_1 != null && _r4_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i4, _index.element, _memo.input, (_r4_1.results + _r4_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i4
                    }

                    // AND shortcut 3
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 3
                        continue
                    }

                    // CALLORVAR classMemberDeclarations
                    var _r9: _KotlinParser_Item? = null
                    _r9 = _MemoCall(_memo, "classMemberDeclarations", _index.element, ::classMemberDeclarations, null)
                    if (_r9 != null) _index.element = _r9.nextIndex

                    // BIND members
                    members = _memo.results.peek()

                    _label = 3
                }
                // AND 3
                3 -> {
                    val _r3_2 = _memo.results.pop()
                    val _r3_1 = _memo.results.pop()

                    if (_r3_1 != null && _r3_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i3, _index.element, _memo.input, (_r3_1.results + _r3_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i3
                    }

                    // AND shortcut 2
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 2
                        continue
                    }

                    // STAR 10
                    _start_i10 = _index.element
                    _label = 10
                }
                // STAR 10
                10 -> {
                    // CALLORVAR NL
                    var _r11: _KotlinParser_Item? = null
                    _r11 = _MemoCall(_memo, "NL", _index.element, ::NL, null)
                    if (_r11 != null) _index.element = _r11.nextIndex

                    // STAR 10
                    val _r10 = _memo.results.pop()
                    if (_r10 != null) {
                        _res10 += _r10.results
                        _label = 10
                        continue
                    } else {
                        _memo.results.push(_KotlinParser_Item(_start_i10, _index.element, _memo.input, _res10.filterNotNull(), true))
                    }

                    _label = 2
                }
                // AND 2
                2 -> {
                    val _r2_2 = _memo.results.pop()
                    val _r2_1 = _memo.results.pop()

                    if (_r2_1 != null && _r2_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i2, _index.element, _memo.input, (_r2_1.results + _r2_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i2
                    }

                    // AND shortcut 1
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 1
                        continue
                    }

                    // CALLORVAR RCURL
                    var _r12: _KotlinParser_Item? = null
                    _r12 = _MemoCall(_memo, "RCURL", _index.element, ::RCURL, null)
                    if (_r12 != null) _index.element = _r12.nextIndex

                    _label = 1
                }
                // AND 1
                1 -> {
                    val _r1_2 = _memo.results.pop()
                    val _r1_1 = _memo.results.pop()

                    if (_r1_1 != null && _r1_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i1, _index.element, _memo.input, (_r1_1.results + _r1_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i1
                    }

                    // ACT 0
                    val _r0 = _memo.results.peek()
                    if (_r0 != null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_r0.startIndex, _r0.nextIndex, _memo.input, _Thunk({ AST.ClassBody(members.l) }, _r0), true))
                    }

                    break
                }
            }
        }
    }


    open fun classParameters(_memo: _KotlinParser_Memo, __index: Int, _args: _KotlinParser_Args?) {
        val _index = Ref.IntRef()
        _index.element = __index

        val _arg_index = Ref.IntRef()
        val _arg_input_index = Ref.IntRef()

        var cps: _KotlinParser_Item? = null

        // AND 1
        var _start_i1 = _index.element

        // AND 2
        var _start_i2 = _index.element

        // AND 3
        var _start_i3 = _index.element

        // AND 4
        var _start_i4 = _index.element

        // STAR 6
        var _start_i6 = _index.element
        val _inp6 = arrayListOf<Token?>()
        val _res6 = arrayListOf<AST.AstNode?>()

        // AND 10
        var _start_i10 = _index.element

        // AND 11
        var _start_i11 = _index.element

        // STAR 13
        var _start_i13 = _index.element
        val _inp13 = arrayListOf<Token?>()
        val _res13 = arrayListOf<AST.AstNode?>()

        // AND 14
        var _start_i14 = _index.element

        // AND 15
        var _start_i15 = _index.element

        // AND 16
        var _start_i16 = _index.element

        // STAR 17
        var _start_i17 = _index.element
        val _inp17 = arrayListOf<Token?>()
        val _res17 = arrayListOf<AST.AstNode?>()

        // STAR 20
        var _start_i20 = _index.element
        val _inp20 = arrayListOf<Token?>()
        val _res20 = arrayListOf<AST.AstNode?>()

        // AND 24
        var _start_i24 = _index.element

        // STAR 25
        var _start_i25 = _index.element
        val _inp25 = arrayListOf<Token?>()
        val _res25 = arrayListOf<AST.AstNode?>()

        // STAR 28
        var _start_i28 = _index.element
        val _inp28 = arrayListOf<Token?>()
        val _res28 = arrayListOf<AST.AstNode?>()

        var _label = -1
        while(true) {
            when(_label) {
                -1 -> {
                    // AND 1
                    _start_i1 = _index.element

                    // AND 2
                    _start_i2 = _index.element

                    // AND 3
                    _start_i3 = _index.element

                    // AND 4
                    _start_i4 = _index.element

                    // CALLORVAR LPAREN
                    var _r5: _KotlinParser_Item? = null
                    _r5 = _MemoCall(_memo, "LPAREN", _index.element, ::LPAREN, null)
                    if (_r5 != null) _index.element = _r5.nextIndex

                    // AND shortcut 4
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 4
                        continue
                    }

                    // STAR 6
                    _start_i6 = _index.element
                    _label = 6
                }
                // STAR 6
                6 -> {
                    // CALLORVAR NL
                    var _r7: _KotlinParser_Item? = null
                    _r7 = _MemoCall(_memo, "NL", _index.element, ::NL, null)
                    if (_r7 != null) _index.element = _r7.nextIndex

                    // STAR 6
                    val _r6 = _memo.results.pop()
                    if (_r6 != null) {
                        _res6 += _r6.results
                        _label = 6
                        continue
                    } else {
                        _memo.results.push(_KotlinParser_Item(_start_i6, _index.element, _memo.input, _res6.filterNotNull(), true))
                    }

                    _label = 4
                }
                // AND 4
                4 -> {
                    val _r4_2 = _memo.results.pop()
                    val _r4_1 = _memo.results.pop()

                    if (_r4_1 != null && _r4_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i4, _index.element, _memo.input, (_r4_1.results + _r4_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i4
                    }

                    // AND shortcut 3
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 3
                        continue
                    }

                    // AND 10
                    _start_i10 = _index.element

                    // AND 11
                    _start_i11 = _index.element

                    // CALLORVAR classParameter
                    var _r12: _KotlinParser_Item? = null
                    _r12 = _MemoCall(_memo, "classParameter", _index.element, ::classParameter, null)
                    if (_r12 != null) _index.element = _r12.nextIndex

                    // AND shortcut 11
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 11
                        continue
                    }

                    // STAR 13
                    _start_i13 = _index.element
                    _label = 13
                }
                // STAR 13
                13 -> {
                    // AND 14
                    _start_i14 = _index.element

                    // AND 15
                    _start_i15 = _index.element

                    // AND 16
                    _start_i16 = _index.element

                    // STAR 17
                    _start_i17 = _index.element
                    _label = 17
                }
                // STAR 17
                17 -> {
                    // CALLORVAR NL
                    var _r18: _KotlinParser_Item? = null
                    _r18 = _MemoCall(_memo, "NL", _index.element, ::NL, null)
                    if (_r18 != null) _index.element = _r18.nextIndex

                    // STAR 17
                    val _r17 = _memo.results.pop()
                    if (_r17 != null) {
                        _res17 += _r17.results
                        _label = 17
                        continue
                    } else {
                        _memo.results.push(_KotlinParser_Item(_start_i17, _index.element, _memo.input, _res17.filterNotNull(), true))
                    }

                    // AND shortcut 16
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 16
                        continue
                    }

                    // CALLORVAR COMMA
                    var _r19: _KotlinParser_Item? = null
                    _r19 = _MemoCall(_memo, "COMMA", _index.element, ::COMMA, null)
                    if (_r19 != null) _index.element = _r19.nextIndex

                    _label = 16
                }
                // AND 16
                16 -> {
                    val _r16_2 = _memo.results.pop()
                    val _r16_1 = _memo.results.pop()

                    if (_r16_1 != null && _r16_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i16, _index.element, _memo.input, (_r16_1.results + _r16_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i16
                    }

                    // AND shortcut 15
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 15
                        continue
                    }

                    // STAR 20
                    _start_i20 = _index.element
                    _label = 20
                }
                // STAR 20
                20 -> {
                    // CALLORVAR NL
                    var _r21: _KotlinParser_Item? = null
                    _r21 = _MemoCall(_memo, "NL", _index.element, ::NL, null)
                    if (_r21 != null) _index.element = _r21.nextIndex

                    // STAR 20
                    val _r20 = _memo.results.pop()
                    if (_r20 != null) {
                        _res20 += _r20.results
                        _label = 20
                        continue
                    } else {
                        _memo.results.push(_KotlinParser_Item(_start_i20, _index.element, _memo.input, _res20.filterNotNull(), true))
                    }

                    _label = 15
                }
                // AND 15
                15 -> {
                    val _r15_2 = _memo.results.pop()
                    val _r15_1 = _memo.results.pop()

                    if (_r15_1 != null && _r15_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i15, _index.element, _memo.input, (_r15_1.results + _r15_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i15
                    }

                    // AND shortcut 14
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 14
                        continue
                    }

                    // CALLORVAR classParameter
                    var _r22: _KotlinParser_Item? = null
                    _r22 = _MemoCall(_memo, "classParameter", _index.element, ::classParameter, null)
                    if (_r22 != null) _index.element = _r22.nextIndex

                    _label = 14
                }
                // AND 14
                14 -> {
                    val _r14_2 = _memo.results.pop()
                    val _r14_1 = _memo.results.pop()

                    if (_r14_1 != null && _r14_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i14, _index.element, _memo.input, (_r14_1.results + _r14_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i14
                    }

                    // STAR 13
                    val _r13 = _memo.results.pop()
                    if (_r13 != null) {
                        _res13 += _r13.results
                        _label = 13
                        continue
                    } else {
                        _memo.results.push(_KotlinParser_Item(_start_i13, _index.element, _memo.input, _res13.filterNotNull(), true))
                    }

                    _label = 11
                }
                // AND 11
                11 -> {
                    val _r11_2 = _memo.results.pop()
                    val _r11_1 = _memo.results.pop()

                    if (_r11_1 != null && _r11_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i11, _index.element, _memo.input, (_r11_1.results + _r11_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i11
                    }

                    // AND shortcut 10
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 10
                        continue
                    }

                    // AND 24
                    _start_i24 = _index.element

                    // STAR 25
                    _start_i25 = _index.element
                    _label = 25
                }
                // STAR 25
                25 -> {
                    // CALLORVAR NL
                    var _r26: _KotlinParser_Item? = null
                    _r26 = _MemoCall(_memo, "NL", _index.element, ::NL, null)
                    if (_r26 != null) _index.element = _r26.nextIndex

                    // STAR 25
                    val _r25 = _memo.results.pop()
                    if (_r25 != null) {
                        _res25 += _r25.results
                        _label = 25
                        continue
                    } else {
                        _memo.results.push(_KotlinParser_Item(_start_i25, _index.element, _memo.input, _res25.filterNotNull(), true))
                    }

                    // AND shortcut 24
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 24
                        continue
                    }

                    // CALLORVAR COMMA
                    var _r27: _KotlinParser_Item? = null
                    _r27 = _MemoCall(_memo, "COMMA", _index.element, ::COMMA, null)
                    if (_r27 != null) _index.element = _r27.nextIndex

                    _label = 24
                }
                // AND 24
                24 -> {
                    val _r24_2 = _memo.results.pop()
                    val _r24_1 = _memo.results.pop()

                    if (_r24_1 != null && _r24_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i24, _index.element, _memo.input, (_r24_1.results + _r24_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i24
                    }

                    // QUES 23
                    if (_memo.results.peek() == null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_index.element, _memo.input))
                    }
                    _label = 10
                }
                // AND 10
                10 -> {
                    val _r10_2 = _memo.results.pop()
                    val _r10_1 = _memo.results.pop()

                    if (_r10_1 != null && _r10_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i10, _index.element, _memo.input, (_r10_1.results + _r10_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i10
                    }

                    // QUES 9
                    if (_memo.results.peek() == null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_index.element, _memo.input))
                    }
                    // BIND cps
                    cps = _memo.results.peek()

                    _label = 3
                }
                // AND 3
                3 -> {
                    val _r3_2 = _memo.results.pop()
                    val _r3_1 = _memo.results.pop()

                    if (_r3_1 != null && _r3_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i3, _index.element, _memo.input, (_r3_1.results + _r3_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i3
                    }

                    // AND shortcut 2
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 2
                        continue
                    }

                    // STAR 28
                    _start_i28 = _index.element
                    _label = 28
                }
                // STAR 28
                28 -> {
                    // CALLORVAR NL
                    var _r29: _KotlinParser_Item? = null
                    _r29 = _MemoCall(_memo, "NL", _index.element, ::NL, null)
                    if (_r29 != null) _index.element = _r29.nextIndex

                    // STAR 28
                    val _r28 = _memo.results.pop()
                    if (_r28 != null) {
                        _res28 += _r28.results
                        _label = 28
                        continue
                    } else {
                        _memo.results.push(_KotlinParser_Item(_start_i28, _index.element, _memo.input, _res28.filterNotNull(), true))
                    }

                    _label = 2
                }
                // AND 2
                2 -> {
                    val _r2_2 = _memo.results.pop()
                    val _r2_1 = _memo.results.pop()

                    if (_r2_1 != null && _r2_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i2, _index.element, _memo.input, (_r2_1.results + _r2_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i2
                    }

                    // AND shortcut 1
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 1
                        continue
                    }

                    // CALLORVAR RPAREN
                    var _r30: _KotlinParser_Item? = null
                    _r30 = _MemoCall(_memo, "RPAREN", _index.element, ::RPAREN, null)
                    if (_r30 != null) _index.element = _r30.nextIndex

                    _label = 1
                }
                // AND 1
                1 -> {
                    val _r1_2 = _memo.results.pop()
                    val _r1_1 = _memo.results.pop()

                    if (_r1_1 != null && _r1_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i1, _index.element, _memo.input, (_r1_1.results + _r1_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i1
                    }

                    // ACT 0
                    val _r0 = _memo.results.peek()
                    if (_r0 != null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_r0.startIndex, _r0.nextIndex, _memo.input, _Thunk({ cps.l }, _r0), true))
                    }

                    break
                }
            }
        }
    }


    open fun classParameter(_memo: _KotlinParser_Memo, __index: Int, _args: _KotlinParser_Args?) {
        val _index = Ref.IntRef()
        _index.element = __index

        val _arg_index = Ref.IntRef()
        val _arg_input_index = Ref.IntRef()

        var mods: _KotlinParser_Item? = null
        var vov: _KotlinParser_Item? = null
        var name: _KotlinParser_Item? = null
        var t: _KotlinParser_Item? = null
        var expr: _KotlinParser_Item? = null

        // AND 1
        var _start_i1 = _index.element

        // AND 2
        var _start_i2 = _index.element

        // AND 3
        var _start_i3 = _index.element

        // AND 4
        var _start_i4 = _index.element

        // AND 5
        var _start_i5 = _index.element

        // AND 6
        var _start_i6 = _index.element

        // AND 7
        var _start_i7 = _index.element

        // STAR 14
        var _start_i14 = _index.element
        val _inp14 = arrayListOf<Token?>()
        val _res14 = arrayListOf<AST.AstNode?>()

        // STAR 19
        var _start_i19 = _index.element
        val _inp19 = arrayListOf<Token?>()
        val _res19 = arrayListOf<AST.AstNode?>()

        // AND 24
        var _start_i24 = _index.element

        // AND 25
        var _start_i25 = _index.element

        // AND 26
        var _start_i26 = _index.element

        // STAR 27
        var _start_i27 = _index.element
        val _inp27 = arrayListOf<Token?>()
        val _res27 = arrayListOf<AST.AstNode?>()

        // STAR 30
        var _start_i30 = _index.element
        val _inp30 = arrayListOf<Token?>()
        val _res30 = arrayListOf<AST.AstNode?>()

        var _label = -1
        while(true) {
            when(_label) {
                -1 -> {
                    // AND 1
                    _start_i1 = _index.element

                    // AND 2
                    _start_i2 = _index.element

                    // AND 3
                    _start_i3 = _index.element

                    // AND 4
                    _start_i4 = _index.element

                    // AND 5
                    _start_i5 = _index.element

                    // AND 6
                    _start_i6 = _index.element

                    // AND 7
                    _start_i7 = _index.element

                    // CALLORVAR modifiers
                    var _r10: _KotlinParser_Item? = null
                    _r10 = _MemoCall(_memo, "modifiers", _index.element, ::modifiers, null)
                    if (_r10 != null) _index.element = _r10.nextIndex

                    // QUES 9
                    if (_memo.results.peek() == null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_index.element, _memo.input))
                    }
                    // BIND mods
                    mods = _memo.results.peek()

                    // AND shortcut 7
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 7
                        continue
                    }

                    // CALLORVAR valOrVar
                    var _r13: _KotlinParser_Item? = null
                    _r13 = _MemoCall(_memo, "valOrVar", _index.element, ::valOrVar, null)
                    if (_r13 != null) _index.element = _r13.nextIndex

                    // QUES 12
                    if (_memo.results.peek() == null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_index.element, _memo.input))
                    }
                    // BIND vov
                    vov = _memo.results.peek()

                    _label = 7
                }
                // AND 7
                7 -> {
                    val _r7_2 = _memo.results.pop()
                    val _r7_1 = _memo.results.pop()

                    if (_r7_1 != null && _r7_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i7, _index.element, _memo.input, (_r7_1.results + _r7_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i7
                    }

                    // AND shortcut 6
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 6
                        continue
                    }

                    // STAR 14
                    _start_i14 = _index.element
                    _label = 14
                }
                // STAR 14
                14 -> {
                    // CALLORVAR NL
                    var _r15: _KotlinParser_Item? = null
                    _r15 = _MemoCall(_memo, "NL", _index.element, ::NL, null)
                    if (_r15 != null) _index.element = _r15.nextIndex

                    // STAR 14
                    val _r14 = _memo.results.pop()
                    if (_r14 != null) {
                        _res14 += _r14.results
                        _label = 14
                        continue
                    } else {
                        _memo.results.push(_KotlinParser_Item(_start_i14, _index.element, _memo.input, _res14.filterNotNull(), true))
                    }

                    _label = 6
                }
                // AND 6
                6 -> {
                    val _r6_2 = _memo.results.pop()
                    val _r6_1 = _memo.results.pop()

                    if (_r6_1 != null && _r6_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i6, _index.element, _memo.input, (_r6_1.results + _r6_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i6
                    }

                    // AND shortcut 5
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 5
                        continue
                    }

                    // CALLORVAR simpleIdentifier
                    var _r17: _KotlinParser_Item? = null
                    _r17 = _MemoCall(_memo, "simpleIdentifier", _index.element, ::simpleIdentifier, null)
                    if (_r17 != null) _index.element = _r17.nextIndex

                    // BIND name
                    name = _memo.results.peek()

                    _label = 5
                }
                // AND 5
                5 -> {
                    val _r5_2 = _memo.results.pop()
                    val _r5_1 = _memo.results.pop()

                    if (_r5_1 != null && _r5_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i5, _index.element, _memo.input, (_r5_1.results + _r5_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i5
                    }

                    // AND shortcut 4
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 4
                        continue
                    }

                    // CALLORVAR COLON
                    var _r18: _KotlinParser_Item? = null
                    _r18 = _MemoCall(_memo, "COLON", _index.element, ::COLON, null)
                    if (_r18 != null) _index.element = _r18.nextIndex

                    _label = 4
                }
                // AND 4
                4 -> {
                    val _r4_2 = _memo.results.pop()
                    val _r4_1 = _memo.results.pop()

                    if (_r4_1 != null && _r4_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i4, _index.element, _memo.input, (_r4_1.results + _r4_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i4
                    }

                    // AND shortcut 3
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 3
                        continue
                    }

                    // STAR 19
                    _start_i19 = _index.element
                    _label = 19
                }
                // STAR 19
                19 -> {
                    // CALLORVAR NL
                    var _r20: _KotlinParser_Item? = null
                    _r20 = _MemoCall(_memo, "NL", _index.element, ::NL, null)
                    if (_r20 != null) _index.element = _r20.nextIndex

                    // STAR 19
                    val _r19 = _memo.results.pop()
                    if (_r19 != null) {
                        _res19 += _r19.results
                        _label = 19
                        continue
                    } else {
                        _memo.results.push(_KotlinParser_Item(_start_i19, _index.element, _memo.input, _res19.filterNotNull(), true))
                    }

                    _label = 3
                }
                // AND 3
                3 -> {
                    val _r3_2 = _memo.results.pop()
                    val _r3_1 = _memo.results.pop()

                    if (_r3_1 != null && _r3_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i3, _index.element, _memo.input, (_r3_1.results + _r3_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i3
                    }

                    // AND shortcut 2
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 2
                        continue
                    }

                    // CALLORVAR type
                    var _r22: _KotlinParser_Item? = null
                    _r22 = _MemoCall(_memo, "type", _index.element, ::type, null)
                    if (_r22 != null) _index.element = _r22.nextIndex

                    // BIND t
                    t = _memo.results.peek()

                    _label = 2
                }
                // AND 2
                2 -> {
                    val _r2_2 = _memo.results.pop()
                    val _r2_1 = _memo.results.pop()

                    if (_r2_1 != null && _r2_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i2, _index.element, _memo.input, (_r2_1.results + _r2_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i2
                    }

                    // AND shortcut 1
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 1
                        continue
                    }

                    // AND 24
                    _start_i24 = _index.element

                    // AND 25
                    _start_i25 = _index.element

                    // AND 26
                    _start_i26 = _index.element

                    // STAR 27
                    _start_i27 = _index.element
                    _label = 27
                }
                // STAR 27
                27 -> {
                    // CALLORVAR NL
                    var _r28: _KotlinParser_Item? = null
                    _r28 = _MemoCall(_memo, "NL", _index.element, ::NL, null)
                    if (_r28 != null) _index.element = _r28.nextIndex

                    // STAR 27
                    val _r27 = _memo.results.pop()
                    if (_r27 != null) {
                        _res27 += _r27.results
                        _label = 27
                        continue
                    } else {
                        _memo.results.push(_KotlinParser_Item(_start_i27, _index.element, _memo.input, _res27.filterNotNull(), true))
                    }

                    // AND shortcut 26
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 26
                        continue
                    }

                    // CALLORVAR ASSIGNMENT
                    var _r29: _KotlinParser_Item? = null
                    _r29 = _MemoCall(_memo, "ASSIGNMENT", _index.element, ::ASSIGNMENT, null)
                    if (_r29 != null) _index.element = _r29.nextIndex

                    _label = 26
                }
                // AND 26
                26 -> {
                    val _r26_2 = _memo.results.pop()
                    val _r26_1 = _memo.results.pop()

                    if (_r26_1 != null && _r26_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i26, _index.element, _memo.input, (_r26_1.results + _r26_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i26
                    }

                    // AND shortcut 25
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 25
                        continue
                    }

                    // STAR 30
                    _start_i30 = _index.element
                    _label = 30
                }
                // STAR 30
                30 -> {
                    // CALLORVAR NL
                    var _r31: _KotlinParser_Item? = null
                    _r31 = _MemoCall(_memo, "NL", _index.element, ::NL, null)
                    if (_r31 != null) _index.element = _r31.nextIndex

                    // STAR 30
                    val _r30 = _memo.results.pop()
                    if (_r30 != null) {
                        _res30 += _r30.results
                        _label = 30
                        continue
                    } else {
                        _memo.results.push(_KotlinParser_Item(_start_i30, _index.element, _memo.input, _res30.filterNotNull(), true))
                    }

                    _label = 25
                }
                // AND 25
                25 -> {
                    val _r25_2 = _memo.results.pop()
                    val _r25_1 = _memo.results.pop()

                    if (_r25_1 != null && _r25_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i25, _index.element, _memo.input, (_r25_1.results + _r25_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i25
                    }

                    // AND shortcut 24
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 24
                        continue
                    }

                    // CALLORVAR expression
                    var _r33: _KotlinParser_Item? = null
                    _r33 = _MemoCall(_memo, "expression", _index.element, ::expression, null)
                    if (_r33 != null) _index.element = _r33.nextIndex

                    // BIND expr
                    expr = _memo.results.peek()

                    _label = 24
                }
                // AND 24
                24 -> {
                    val _r24_2 = _memo.results.pop()
                    val _r24_1 = _memo.results.pop()

                    if (_r24_1 != null && _r24_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i24, _index.element, _memo.input, (_r24_1.results + _r24_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i24
                    }

                    // QUES 23
                    if (_memo.results.peek() == null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_index.element, _memo.input))
                    }
                    _label = 1
                }
                // AND 1
                1 -> {
                    val _r1_2 = _memo.results.pop()
                    val _r1_1 = _memo.results.pop()

                    if (_r1_1 != null && _r1_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i1, _index.element, _memo.input, (_r1_1.results + _r1_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i1
                    }

                    // ACT 0
                    val _r0 = _memo.results.peek()
                    if (_r0 != null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_r0.startIndex, _r0.nextIndex, _memo.input, _Thunk({ AST.ClassParameter(mods.l, name.s, t.r, expr.nr, vov.nr) }, _r0), true))
                    }

                    break
                }
            }
        }
    }


    open fun valOrVar(_memo: _KotlinParser_Memo, __index: Int, _args: _KotlinParser_Args?) {
        val _index = Ref.IntRef()
        _index.element = __index

        val _arg_index = Ref.IntRef()
        val _arg_input_index = Ref.IntRef()

        // OR 0
        var _start_i0 = _index.element

        var _label = -1
        while(true) {
            when(_label) {
                -1 -> {
                    // OR 0
                    _start_i0 = _index.element

                    // CALLORVAR VAR
                    var _r2: _KotlinParser_Item? = null
                    _r2 = _MemoCall(_memo, "VAR", _index.element, ::VAR, null)
                    if (_r2 != null) _index.element = _r2.nextIndex

                    // ACT 1
                    val _r1 = _memo.results.peek()
                    if (_r1 != null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_r1.startIndex, _r1.nextIndex, _memo.input, _Thunk({ AST.VAR }, _r1), true))
                    }

                    // OR shortcut 0
                    if (_memo.results.peek() == null) {
                        _memo.results.pop()
                        _index.element = _start_i0
                    } else {
                        _label = 0
                        continue
                    }

                    // CALLORVAR VAL
                    var _r4: _KotlinParser_Item? = null
                    _r4 = _MemoCall(_memo, "VAL", _index.element, ::VAL, null)
                    if (_r4 != null) _index.element = _r4.nextIndex

                    // ACT 3
                    val _r3 = _memo.results.peek()
                    if (_r3 != null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_r3.startIndex, _r3.nextIndex, _memo.input, _Thunk({ AST.VAL }, _r3), true))
                    }

                    _label = 0
                }
                // OR 0
                0 -> {
                    break
                }
            }
        }
    }


    open fun annotatedDelegationSpecifiers(_memo: _KotlinParser_Memo, __index: Int, _args: _KotlinParser_Args?) {
        val _index = Ref.IntRef()
        _index.element = __index

        val _arg_index = Ref.IntRef()
        val _arg_input_index = Ref.IntRef()

        // AND 1
        var _start_i1 = _index.element

        // STAR 3
        var _start_i3 = _index.element
        val _inp3 = arrayListOf<Token?>()
        val _res3 = arrayListOf<AST.AstNode?>()

        // AND 4
        var _start_i4 = _index.element

        // AND 5
        var _start_i5 = _index.element

        // AND 6
        var _start_i6 = _index.element

        // STAR 7
        var _start_i7 = _index.element
        val _inp7 = arrayListOf<Token?>()
        val _res7 = arrayListOf<AST.AstNode?>()

        // STAR 10
        var _start_i10 = _index.element
        val _inp10 = arrayListOf<Token?>()
        val _res10 = arrayListOf<AST.AstNode?>()

        var _label = -1
        while(true) {
            when(_label) {
                -1 -> {
                    // AND 1
                    _start_i1 = _index.element

                    // CALLORVAR annotatedDelegationSpecifier
                    var _r2: _KotlinParser_Item? = null
                    _r2 = _MemoCall(_memo, "annotatedDelegationSpecifier", _index.element, ::annotatedDelegationSpecifier, null)
                    if (_r2 != null) _index.element = _r2.nextIndex

                    // AND shortcut 1
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 1
                        continue
                    }

                    // STAR 3
                    _start_i3 = _index.element
                    _label = 3
                }
                // STAR 3
                3 -> {
                    // AND 4
                    _start_i4 = _index.element

                    // AND 5
                    _start_i5 = _index.element

                    // AND 6
                    _start_i6 = _index.element

                    // STAR 7
                    _start_i7 = _index.element
                    _label = 7
                }
                // STAR 7
                7 -> {
                    // CALLORVAR NL
                    var _r8: _KotlinParser_Item? = null
                    _r8 = _MemoCall(_memo, "NL", _index.element, ::NL, null)
                    if (_r8 != null) _index.element = _r8.nextIndex

                    // STAR 7
                    val _r7 = _memo.results.pop()
                    if (_r7 != null) {
                        _res7 += _r7.results
                        _label = 7
                        continue
                    } else {
                        _memo.results.push(_KotlinParser_Item(_start_i7, _index.element, _memo.input, _res7.filterNotNull(), true))
                    }

                    // AND shortcut 6
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 6
                        continue
                    }

                    // CALLORVAR COMMA
                    var _r9: _KotlinParser_Item? = null
                    _r9 = _MemoCall(_memo, "COMMA", _index.element, ::COMMA, null)
                    if (_r9 != null) _index.element = _r9.nextIndex

                    _label = 6
                }
                // AND 6
                6 -> {
                    val _r6_2 = _memo.results.pop()
                    val _r6_1 = _memo.results.pop()

                    if (_r6_1 != null && _r6_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i6, _index.element, _memo.input, (_r6_1.results + _r6_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i6
                    }

                    // AND shortcut 5
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 5
                        continue
                    }

                    // STAR 10
                    _start_i10 = _index.element
                    _label = 10
                }
                // STAR 10
                10 -> {
                    // CALLORVAR NL
                    var _r11: _KotlinParser_Item? = null
                    _r11 = _MemoCall(_memo, "NL", _index.element, ::NL, null)
                    if (_r11 != null) _index.element = _r11.nextIndex

                    // STAR 10
                    val _r10 = _memo.results.pop()
                    if (_r10 != null) {
                        _res10 += _r10.results
                        _label = 10
                        continue
                    } else {
                        _memo.results.push(_KotlinParser_Item(_start_i10, _index.element, _memo.input, _res10.filterNotNull(), true))
                    }

                    _label = 5
                }
                // AND 5
                5 -> {
                    val _r5_2 = _memo.results.pop()
                    val _r5_1 = _memo.results.pop()

                    if (_r5_1 != null && _r5_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i5, _index.element, _memo.input, (_r5_1.results + _r5_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i5
                    }

                    // AND shortcut 4
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 4
                        continue
                    }

                    // CALLORVAR annotatedDelegationSpecifier
                    var _r12: _KotlinParser_Item? = null
                    _r12 = _MemoCall(_memo, "annotatedDelegationSpecifier", _index.element, ::annotatedDelegationSpecifier, null)
                    if (_r12 != null) _index.element = _r12.nextIndex

                    _label = 4
                }
                // AND 4
                4 -> {
                    val _r4_2 = _memo.results.pop()
                    val _r4_1 = _memo.results.pop()

                    if (_r4_1 != null && _r4_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i4, _index.element, _memo.input, (_r4_1.results + _r4_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i4
                    }

                    // STAR 3
                    val _r3 = _memo.results.pop()
                    if (_r3 != null) {
                        _res3 += _r3.results
                        _label = 3
                        continue
                    } else {
                        _memo.results.push(_KotlinParser_Item(_start_i3, _index.element, _memo.input, _res3.filterNotNull(), true))
                    }

                    _label = 1
                }
                // AND 1
                1 -> {
                    val _r1_2 = _memo.results.pop()
                    val _r1_1 = _memo.results.pop()

                    if (_r1_1 != null && _r1_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i1, _index.element, _memo.input, (_r1_1.results + _r1_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i1
                    }

                    // ACT 0
                    val _r0 = _memo.results.peek()
                    if (_r0 != null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_r0.startIndex, _r0.nextIndex, _memo.input, _Thunk({ it.l }, _r0), true))
                    }

                    break
                }
            }
        }
    }


    open fun delegationSpecifier(_memo: _KotlinParser_Memo, __index: Int, _args: _KotlinParser_Args?) {
        val _index = Ref.IntRef()
        _index.element = __index

        val _arg_index = Ref.IntRef()
        val _arg_input_index = Ref.IntRef()

        // OR 0
        var _start_i0 = _index.element

        // OR 1
        var _start_i1 = _index.element

        // OR 2
        var _start_i2 = _index.element

        var _label = -1
        while(true) {
            when(_label) {
                -1 -> {
                    // OR 0
                    _start_i0 = _index.element

                    // OR 1
                    _start_i1 = _index.element

                    // OR 2
                    _start_i2 = _index.element

                    // CALLORVAR constructorInvocation
                    var _r3: _KotlinParser_Item? = null
                    _r3 = _MemoCall(_memo, "constructorInvocation", _index.element, ::constructorInvocation, null)
                    if (_r3 != null) _index.element = _r3.nextIndex

                    // OR shortcut 2
                    if (_memo.results.peek() == null) {
                        _memo.results.pop()
                        _index.element = _start_i2
                    } else {
                        _label = 2
                        continue
                    }

                    // CALLORVAR explicitDelegation
                    var _r4: _KotlinParser_Item? = null
                    _r4 = _MemoCall(_memo, "explicitDelegation", _index.element, ::explicitDelegation, null)
                    if (_r4 != null) _index.element = _r4.nextIndex

                    _label = 2
                }
                // OR 2
                2 -> {
                    // OR shortcut 1
                    if (_memo.results.peek() == null) {
                        _memo.results.pop()
                        _index.element = _start_i1
                    } else {
                        _label = 1
                        continue
                    }

                    // CALLORVAR userType
                    var _r5: _KotlinParser_Item? = null
                    _r5 = _MemoCall(_memo, "userType", _index.element, ::userType, null)
                    if (_r5 != null) _index.element = _r5.nextIndex

                    _label = 1
                }
                // OR 1
                1 -> {
                    // OR shortcut 0
                    if (_memo.results.peek() == null) {
                        _memo.results.pop()
                        _index.element = _start_i0
                    } else {
                        _label = 0
                        continue
                    }

                    // CALLORVAR functionType
                    var _r6: _KotlinParser_Item? = null
                    _r6 = _MemoCall(_memo, "functionType", _index.element, ::functionType, null)
                    if (_r6 != null) _index.element = _r6.nextIndex

                    _label = 0
                }
                // OR 0
                0 -> {
                    break
                }
            }
        }
    }


    open fun constructorInvocation(_memo: _KotlinParser_Memo, __index: Int, _args: _KotlinParser_Args?) {
        val _index = Ref.IntRef()
        _index.element = __index

        val _arg_index = Ref.IntRef()
        val _arg_input_index = Ref.IntRef()

        var t: _KotlinParser_Item? = null
        var args: _KotlinParser_Item? = null

        // AND 1
        var _start_i1 = _index.element

        var _label = -1
        while(true) {
            when(_label) {
                -1 -> {
                    // AND 1
                    _start_i1 = _index.element

                    // CALLORVAR userType
                    var _r3: _KotlinParser_Item? = null
                    _r3 = _MemoCall(_memo, "userType", _index.element, ::userType, null)
                    if (_r3 != null) _index.element = _r3.nextIndex

                    // BIND t
                    t = _memo.results.peek()

                    // AND shortcut 1
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 1
                        continue
                    }

                    // CALLORVAR valueArguments
                    var _r5: _KotlinParser_Item? = null
                    _r5 = _MemoCall(_memo, "valueArguments", _index.element, ::valueArguments, null)
                    if (_r5 != null) _index.element = _r5.nextIndex

                    // BIND args
                    args = _memo.results.peek()

                    _label = 1
                }
                // AND 1
                1 -> {
                    val _r1_2 = _memo.results.pop()
                    val _r1_1 = _memo.results.pop()

                    if (_r1_1 != null && _r1_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i1, _index.element, _memo.input, (_r1_1.results + _r1_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i1
                    }

                    // ACT 0
                    val _r0 = _memo.results.peek()
                    if (_r0 != null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_r0.startIndex, _r0.nextIndex, _memo.input, _Thunk({ AST.ConstructorInvocation(t.r, args.l) }, _r0), true))
                    }

                    break
                }
            }
        }
    }


    open fun annotatedDelegationSpecifier(_memo: _KotlinParser_Memo, __index: Int, _args: _KotlinParser_Args?) {
        val _index = Ref.IntRef()
        _index.element = __index

        val _arg_index = Ref.IntRef()
        val _arg_input_index = Ref.IntRef()

        var a: _KotlinParser_Item? = null
        var ds: _KotlinParser_Item? = null

        // AND 1
        var _start_i1 = _index.element

        // AND 2
        var _start_i2 = _index.element

        // STAR 4
        var _start_i4 = _index.element
        val _inp4 = arrayListOf<Token?>()
        val _res4 = arrayListOf<AST.AstNode?>()

        // STAR 6
        var _start_i6 = _index.element
        val _inp6 = arrayListOf<Token?>()
        val _res6 = arrayListOf<AST.AstNode?>()

        var _label = -1
        while(true) {
            when(_label) {
                -1 -> {
                    // AND 1
                    _start_i1 = _index.element

                    // AND 2
                    _start_i2 = _index.element

                    // STAR 4
                    _start_i4 = _index.element
                    _label = 4
                }
                // STAR 4
                4 -> {
                    // CALLORVAR annotation
                    var _r5: _KotlinParser_Item? = null
                    _r5 = _MemoCall(_memo, "annotation", _index.element, ::annotation, null)
                    if (_r5 != null) _index.element = _r5.nextIndex

                    // STAR 4
                    val _r4 = _memo.results.pop()
                    if (_r4 != null) {
                        _res4 += _r4.results
                        _label = 4
                        continue
                    } else {
                        _memo.results.push(_KotlinParser_Item(_start_i4, _index.element, _memo.input, _res4.filterNotNull(), true))
                    }

                    // BIND a
                    a = _memo.results.peek()

                    // AND shortcut 2
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 2
                        continue
                    }

                    // STAR 6
                    _start_i6 = _index.element
                    _label = 6
                }
                // STAR 6
                6 -> {
                    // CALLORVAR NL
                    var _r7: _KotlinParser_Item? = null
                    _r7 = _MemoCall(_memo, "NL", _index.element, ::NL, null)
                    if (_r7 != null) _index.element = _r7.nextIndex

                    // STAR 6
                    val _r6 = _memo.results.pop()
                    if (_r6 != null) {
                        _res6 += _r6.results
                        _label = 6
                        continue
                    } else {
                        _memo.results.push(_KotlinParser_Item(_start_i6, _index.element, _memo.input, _res6.filterNotNull(), true))
                    }

                    _label = 2
                }
                // AND 2
                2 -> {
                    val _r2_2 = _memo.results.pop()
                    val _r2_1 = _memo.results.pop()

                    if (_r2_1 != null && _r2_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i2, _index.element, _memo.input, (_r2_1.results + _r2_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i2
                    }

                    // AND shortcut 1
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 1
                        continue
                    }

                    // CALLORVAR delegationSpecifier
                    var _r9: _KotlinParser_Item? = null
                    _r9 = _MemoCall(_memo, "delegationSpecifier", _index.element, ::delegationSpecifier, null)
                    if (_r9 != null) _index.element = _r9.nextIndex

                    // BIND ds
                    ds = _memo.results.peek()

                    _label = 1
                }
                // AND 1
                1 -> {
                    val _r1_2 = _memo.results.pop()
                    val _r1_1 = _memo.results.pop()

                    if (_r1_1 != null && _r1_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i1, _index.element, _memo.input, (_r1_1.results + _r1_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i1
                    }

                    // ACT 0
                    val _r0 = _memo.results.peek()
                    if (_r0 != null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_r0.startIndex, _r0.nextIndex, _memo.input, _Thunk({ AST.AnnotatedDelegationSpecifier.invoke(a.l, ds.l) }, _r0), true))
                    }

                    break
                }
            }
        }
    }


    open fun explicitDelegation(_memo: _KotlinParser_Memo, __index: Int, _args: _KotlinParser_Args?) {
        val _index = Ref.IntRef()
        _index.element = __index

        val _arg_index = Ref.IntRef()
        val _arg_input_index = Ref.IntRef()

        var t: _KotlinParser_Item? = null
        var expr: _KotlinParser_Item? = null

        // OR 0
        var _start_i0 = _index.element

        // AND 2
        var _start_i2 = _index.element

        // AND 3
        var _start_i3 = _index.element

        // AND 4
        var _start_i4 = _index.element

        // AND 5
        var _start_i5 = _index.element

        // STAR 8
        var _start_i8 = _index.element
        val _inp8 = arrayListOf<Token?>()
        val _res8 = arrayListOf<AST.AstNode?>()

        // STAR 11
        var _start_i11 = _index.element
        val _inp11 = arrayListOf<Token?>()
        val _res11 = arrayListOf<AST.AstNode?>()

        // AND 16
        var _start_i16 = _index.element

        // AND 17
        var _start_i17 = _index.element

        // AND 18
        var _start_i18 = _index.element

        // AND 19
        var _start_i19 = _index.element

        // STAR 22
        var _start_i22 = _index.element
        val _inp22 = arrayListOf<Token?>()
        val _res22 = arrayListOf<AST.AstNode?>()

        // STAR 25
        var _start_i25 = _index.element
        val _inp25 = arrayListOf<Token?>()
        val _res25 = arrayListOf<AST.AstNode?>()

        var _label = -1
        while(true) {
            when(_label) {
                -1 -> {
                    // OR 0
                    _start_i0 = _index.element

                    // AND 2
                    _start_i2 = _index.element

                    // AND 3
                    _start_i3 = _index.element

                    // AND 4
                    _start_i4 = _index.element

                    // AND 5
                    _start_i5 = _index.element

                    // CALLORVAR userType
                    var _r7: _KotlinParser_Item? = null
                    _r7 = _MemoCall(_memo, "userType", _index.element, ::userType, null)
                    if (_r7 != null) _index.element = _r7.nextIndex

                    // BIND t
                    t = _memo.results.peek()

                    // AND shortcut 5
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 5
                        continue
                    }

                    // STAR 8
                    _start_i8 = _index.element
                    _label = 8
                }
                // STAR 8
                8 -> {
                    // CALLORVAR NL
                    var _r9: _KotlinParser_Item? = null
                    _r9 = _MemoCall(_memo, "NL", _index.element, ::NL, null)
                    if (_r9 != null) _index.element = _r9.nextIndex

                    // STAR 8
                    val _r8 = _memo.results.pop()
                    if (_r8 != null) {
                        _res8 += _r8.results
                        _label = 8
                        continue
                    } else {
                        _memo.results.push(_KotlinParser_Item(_start_i8, _index.element, _memo.input, _res8.filterNotNull(), true))
                    }

                    _label = 5
                }
                // AND 5
                5 -> {
                    val _r5_2 = _memo.results.pop()
                    val _r5_1 = _memo.results.pop()

                    if (_r5_1 != null && _r5_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i5, _index.element, _memo.input, (_r5_1.results + _r5_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i5
                    }

                    // AND shortcut 4
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 4
                        continue
                    }

                    // CALLORVAR BY
                    var _r10: _KotlinParser_Item? = null
                    _r10 = _MemoCall(_memo, "BY", _index.element, ::BY, null)
                    if (_r10 != null) _index.element = _r10.nextIndex

                    _label = 4
                }
                // AND 4
                4 -> {
                    val _r4_2 = _memo.results.pop()
                    val _r4_1 = _memo.results.pop()

                    if (_r4_1 != null && _r4_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i4, _index.element, _memo.input, (_r4_1.results + _r4_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i4
                    }

                    // AND shortcut 3
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 3
                        continue
                    }

                    // STAR 11
                    _start_i11 = _index.element
                    _label = 11
                }
                // STAR 11
                11 -> {
                    // CALLORVAR NL
                    var _r12: _KotlinParser_Item? = null
                    _r12 = _MemoCall(_memo, "NL", _index.element, ::NL, null)
                    if (_r12 != null) _index.element = _r12.nextIndex

                    // STAR 11
                    val _r11 = _memo.results.pop()
                    if (_r11 != null) {
                        _res11 += _r11.results
                        _label = 11
                        continue
                    } else {
                        _memo.results.push(_KotlinParser_Item(_start_i11, _index.element, _memo.input, _res11.filterNotNull(), true))
                    }

                    _label = 3
                }
                // AND 3
                3 -> {
                    val _r3_2 = _memo.results.pop()
                    val _r3_1 = _memo.results.pop()

                    if (_r3_1 != null && _r3_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i3, _index.element, _memo.input, (_r3_1.results + _r3_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i3
                    }

                    // AND shortcut 2
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 2
                        continue
                    }

                    // CALLORVAR expression
                    var _r14: _KotlinParser_Item? = null
                    _r14 = _MemoCall(_memo, "expression", _index.element, ::expression, null)
                    if (_r14 != null) _index.element = _r14.nextIndex

                    // BIND expr
                    expr = _memo.results.peek()

                    _label = 2
                }
                // AND 2
                2 -> {
                    val _r2_2 = _memo.results.pop()
                    val _r2_1 = _memo.results.pop()

                    if (_r2_1 != null && _r2_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i2, _index.element, _memo.input, (_r2_1.results + _r2_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i2
                    }

                    // ACT 1
                    val _r1 = _memo.results.peek()
                    if (_r1 != null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_r1.startIndex, _r1.nextIndex, _memo.input, _Thunk({ AST.ExplicitDelegation(t.r, expr.r) }, _r1), true))
                    }

                    // OR shortcut 0
                    if (_memo.results.peek() == null) {
                        _memo.results.pop()
                        _index.element = _start_i0
                    } else {
                        _label = 0
                        continue
                    }

                    // AND 16
                    _start_i16 = _index.element

                    // AND 17
                    _start_i17 = _index.element

                    // AND 18
                    _start_i18 = _index.element

                    // AND 19
                    _start_i19 = _index.element

                    // CALLORVAR functionType
                    var _r21: _KotlinParser_Item? = null
                    _r21 = _MemoCall(_memo, "functionType", _index.element, ::functionType, null)
                    if (_r21 != null) _index.element = _r21.nextIndex

                    // BIND t
                    t = _memo.results.peek()

                    // AND shortcut 19
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 19
                        continue
                    }

                    // STAR 22
                    _start_i22 = _index.element
                    _label = 22
                }
                // STAR 22
                22 -> {
                    // CALLORVAR NL
                    var _r23: _KotlinParser_Item? = null
                    _r23 = _MemoCall(_memo, "NL", _index.element, ::NL, null)
                    if (_r23 != null) _index.element = _r23.nextIndex

                    // STAR 22
                    val _r22 = _memo.results.pop()
                    if (_r22 != null) {
                        _res22 += _r22.results
                        _label = 22
                        continue
                    } else {
                        _memo.results.push(_KotlinParser_Item(_start_i22, _index.element, _memo.input, _res22.filterNotNull(), true))
                    }

                    _label = 19
                }
                // AND 19
                19 -> {
                    val _r19_2 = _memo.results.pop()
                    val _r19_1 = _memo.results.pop()

                    if (_r19_1 != null && _r19_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i19, _index.element, _memo.input, (_r19_1.results + _r19_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i19
                    }

                    // AND shortcut 18
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 18
                        continue
                    }

                    // CALLORVAR BY
                    var _r24: _KotlinParser_Item? = null
                    _r24 = _MemoCall(_memo, "BY", _index.element, ::BY, null)
                    if (_r24 != null) _index.element = _r24.nextIndex

                    _label = 18
                }
                // AND 18
                18 -> {
                    val _r18_2 = _memo.results.pop()
                    val _r18_1 = _memo.results.pop()

                    if (_r18_1 != null && _r18_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i18, _index.element, _memo.input, (_r18_1.results + _r18_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i18
                    }

                    // AND shortcut 17
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 17
                        continue
                    }

                    // STAR 25
                    _start_i25 = _index.element
                    _label = 25
                }
                // STAR 25
                25 -> {
                    // CALLORVAR NL
                    var _r26: _KotlinParser_Item? = null
                    _r26 = _MemoCall(_memo, "NL", _index.element, ::NL, null)
                    if (_r26 != null) _index.element = _r26.nextIndex

                    // STAR 25
                    val _r25 = _memo.results.pop()
                    if (_r25 != null) {
                        _res25 += _r25.results
                        _label = 25
                        continue
                    } else {
                        _memo.results.push(_KotlinParser_Item(_start_i25, _index.element, _memo.input, _res25.filterNotNull(), true))
                    }

                    _label = 17
                }
                // AND 17
                17 -> {
                    val _r17_2 = _memo.results.pop()
                    val _r17_1 = _memo.results.pop()

                    if (_r17_1 != null && _r17_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i17, _index.element, _memo.input, (_r17_1.results + _r17_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i17
                    }

                    // AND shortcut 16
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 16
                        continue
                    }

                    // CALLORVAR expression
                    var _r28: _KotlinParser_Item? = null
                    _r28 = _MemoCall(_memo, "expression", _index.element, ::expression, null)
                    if (_r28 != null) _index.element = _r28.nextIndex

                    // BIND expr
                    expr = _memo.results.peek()

                    _label = 16
                }
                // AND 16
                16 -> {
                    val _r16_2 = _memo.results.pop()
                    val _r16_1 = _memo.results.pop()

                    if (_r16_1 != null && _r16_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i16, _index.element, _memo.input, (_r16_1.results + _r16_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i16
                    }

                    // ACT 15
                    val _r15 = _memo.results.peek()
                    if (_r15 != null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_r15.startIndex, _r15.nextIndex, _memo.input, _Thunk({ AST.ExplicitDelegation(t.r, expr.r) }, _r15), true))
                    }

                    _label = 0
                }
                // OR 0
                0 -> {
                    break
                }
            }
        }
    }


    open fun typeParameters(_memo: _KotlinParser_Memo, __index: Int, _args: _KotlinParser_Args?) {
        val _index = Ref.IntRef()
        _index.element = __index

        val _arg_index = Ref.IntRef()
        val _arg_input_index = Ref.IntRef()

        // AND 1
        var _start_i1 = _index.element

        // AND 2
        var _start_i2 = _index.element

        // AND 3
        var _start_i3 = _index.element

        // AND 4
        var _start_i4 = _index.element

        // AND 5
        var _start_i5 = _index.element

        // AND 6
        var _start_i6 = _index.element

        // STAR 8
        var _start_i8 = _index.element
        val _inp8 = arrayListOf<Token?>()
        val _res8 = arrayListOf<AST.AstNode?>()

        // STAR 11
        var _start_i11 = _index.element
        val _inp11 = arrayListOf<Token?>()
        val _res11 = arrayListOf<AST.AstNode?>()

        // AND 12
        var _start_i12 = _index.element

        // AND 13
        var _start_i13 = _index.element

        // AND 14
        var _start_i14 = _index.element

        // STAR 15
        var _start_i15 = _index.element
        val _inp15 = arrayListOf<Token?>()
        val _res15 = arrayListOf<AST.AstNode?>()

        // STAR 18
        var _start_i18 = _index.element
        val _inp18 = arrayListOf<Token?>()
        val _res18 = arrayListOf<AST.AstNode?>()

        // AND 22
        var _start_i22 = _index.element

        // STAR 23
        var _start_i23 = _index.element
        val _inp23 = arrayListOf<Token?>()
        val _res23 = arrayListOf<AST.AstNode?>()

        // STAR 26
        var _start_i26 = _index.element
        val _inp26 = arrayListOf<Token?>()
        val _res26 = arrayListOf<AST.AstNode?>()

        var _label = -1
        while(true) {
            when(_label) {
                -1 -> {
                    // AND 1
                    _start_i1 = _index.element

                    // AND 2
                    _start_i2 = _index.element

                    // AND 3
                    _start_i3 = _index.element

                    // AND 4
                    _start_i4 = _index.element

                    // AND 5
                    _start_i5 = _index.element

                    // AND 6
                    _start_i6 = _index.element

                    // CALLORVAR LANGLE
                    var _r7: _KotlinParser_Item? = null
                    _r7 = _MemoCall(_memo, "LANGLE", _index.element, ::LANGLE, null)
                    if (_r7 != null) _index.element = _r7.nextIndex

                    // AND shortcut 6
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 6
                        continue
                    }

                    // STAR 8
                    _start_i8 = _index.element
                    _label = 8
                }
                // STAR 8
                8 -> {
                    // CALLORVAR NL
                    var _r9: _KotlinParser_Item? = null
                    _r9 = _MemoCall(_memo, "NL", _index.element, ::NL, null)
                    if (_r9 != null) _index.element = _r9.nextIndex

                    // STAR 8
                    val _r8 = _memo.results.pop()
                    if (_r8 != null) {
                        _res8 += _r8.results
                        _label = 8
                        continue
                    } else {
                        _memo.results.push(_KotlinParser_Item(_start_i8, _index.element, _memo.input, _res8.filterNotNull(), true))
                    }

                    _label = 6
                }
                // AND 6
                6 -> {
                    val _r6_2 = _memo.results.pop()
                    val _r6_1 = _memo.results.pop()

                    if (_r6_1 != null && _r6_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i6, _index.element, _memo.input, (_r6_1.results + _r6_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i6
                    }

                    // AND shortcut 5
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 5
                        continue
                    }

                    // CALLORVAR typeParameter
                    var _r10: _KotlinParser_Item? = null
                    _r10 = _MemoCall(_memo, "typeParameter", _index.element, ::typeParameter, null)
                    if (_r10 != null) _index.element = _r10.nextIndex

                    _label = 5
                }
                // AND 5
                5 -> {
                    val _r5_2 = _memo.results.pop()
                    val _r5_1 = _memo.results.pop()

                    if (_r5_1 != null && _r5_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i5, _index.element, _memo.input, (_r5_1.results + _r5_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i5
                    }

                    // AND shortcut 4
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 4
                        continue
                    }

                    // STAR 11
                    _start_i11 = _index.element
                    _label = 11
                }
                // STAR 11
                11 -> {
                    // AND 12
                    _start_i12 = _index.element

                    // AND 13
                    _start_i13 = _index.element

                    // AND 14
                    _start_i14 = _index.element

                    // STAR 15
                    _start_i15 = _index.element
                    _label = 15
                }
                // STAR 15
                15 -> {
                    // CALLORVAR NL
                    var _r16: _KotlinParser_Item? = null
                    _r16 = _MemoCall(_memo, "NL", _index.element, ::NL, null)
                    if (_r16 != null) _index.element = _r16.nextIndex

                    // STAR 15
                    val _r15 = _memo.results.pop()
                    if (_r15 != null) {
                        _res15 += _r15.results
                        _label = 15
                        continue
                    } else {
                        _memo.results.push(_KotlinParser_Item(_start_i15, _index.element, _memo.input, _res15.filterNotNull(), true))
                    }

                    // AND shortcut 14
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 14
                        continue
                    }

                    // CALLORVAR COMMA
                    var _r17: _KotlinParser_Item? = null
                    _r17 = _MemoCall(_memo, "COMMA", _index.element, ::COMMA, null)
                    if (_r17 != null) _index.element = _r17.nextIndex

                    _label = 14
                }
                // AND 14
                14 -> {
                    val _r14_2 = _memo.results.pop()
                    val _r14_1 = _memo.results.pop()

                    if (_r14_1 != null && _r14_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i14, _index.element, _memo.input, (_r14_1.results + _r14_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i14
                    }

                    // AND shortcut 13
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 13
                        continue
                    }

                    // STAR 18
                    _start_i18 = _index.element
                    _label = 18
                }
                // STAR 18
                18 -> {
                    // CALLORVAR NL
                    var _r19: _KotlinParser_Item? = null
                    _r19 = _MemoCall(_memo, "NL", _index.element, ::NL, null)
                    if (_r19 != null) _index.element = _r19.nextIndex

                    // STAR 18
                    val _r18 = _memo.results.pop()
                    if (_r18 != null) {
                        _res18 += _r18.results
                        _label = 18
                        continue
                    } else {
                        _memo.results.push(_KotlinParser_Item(_start_i18, _index.element, _memo.input, _res18.filterNotNull(), true))
                    }

                    _label = 13
                }
                // AND 13
                13 -> {
                    val _r13_2 = _memo.results.pop()
                    val _r13_1 = _memo.results.pop()

                    if (_r13_1 != null && _r13_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i13, _index.element, _memo.input, (_r13_1.results + _r13_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i13
                    }

                    // AND shortcut 12
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 12
                        continue
                    }

                    // CALLORVAR typeParameter
                    var _r20: _KotlinParser_Item? = null
                    _r20 = _MemoCall(_memo, "typeParameter", _index.element, ::typeParameter, null)
                    if (_r20 != null) _index.element = _r20.nextIndex

                    _label = 12
                }
                // AND 12
                12 -> {
                    val _r12_2 = _memo.results.pop()
                    val _r12_1 = _memo.results.pop()

                    if (_r12_1 != null && _r12_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i12, _index.element, _memo.input, (_r12_1.results + _r12_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i12
                    }

                    // STAR 11
                    val _r11 = _memo.results.pop()
                    if (_r11 != null) {
                        _res11 += _r11.results
                        _label = 11
                        continue
                    } else {
                        _memo.results.push(_KotlinParser_Item(_start_i11, _index.element, _memo.input, _res11.filterNotNull(), true))
                    }

                    _label = 4
                }
                // AND 4
                4 -> {
                    val _r4_2 = _memo.results.pop()
                    val _r4_1 = _memo.results.pop()

                    if (_r4_1 != null && _r4_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i4, _index.element, _memo.input, (_r4_1.results + _r4_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i4
                    }

                    // AND shortcut 3
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 3
                        continue
                    }

                    // AND 22
                    _start_i22 = _index.element

                    // STAR 23
                    _start_i23 = _index.element
                    _label = 23
                }
                // STAR 23
                23 -> {
                    // CALLORVAR NL
                    var _r24: _KotlinParser_Item? = null
                    _r24 = _MemoCall(_memo, "NL", _index.element, ::NL, null)
                    if (_r24 != null) _index.element = _r24.nextIndex

                    // STAR 23
                    val _r23 = _memo.results.pop()
                    if (_r23 != null) {
                        _res23 += _r23.results
                        _label = 23
                        continue
                    } else {
                        _memo.results.push(_KotlinParser_Item(_start_i23, _index.element, _memo.input, _res23.filterNotNull(), true))
                    }

                    // AND shortcut 22
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 22
                        continue
                    }

                    // CALLORVAR COMMA
                    var _r25: _KotlinParser_Item? = null
                    _r25 = _MemoCall(_memo, "COMMA", _index.element, ::COMMA, null)
                    if (_r25 != null) _index.element = _r25.nextIndex

                    _label = 22
                }
                // AND 22
                22 -> {
                    val _r22_2 = _memo.results.pop()
                    val _r22_1 = _memo.results.pop()

                    if (_r22_1 != null && _r22_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i22, _index.element, _memo.input, (_r22_1.results + _r22_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i22
                    }

                    // QUES 21
                    if (_memo.results.peek() == null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_index.element, _memo.input))
                    }
                    _label = 3
                }
                // AND 3
                3 -> {
                    val _r3_2 = _memo.results.pop()
                    val _r3_1 = _memo.results.pop()

                    if (_r3_1 != null && _r3_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i3, _index.element, _memo.input, (_r3_1.results + _r3_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i3
                    }

                    // AND shortcut 2
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 2
                        continue
                    }

                    // STAR 26
                    _start_i26 = _index.element
                    _label = 26
                }
                // STAR 26
                26 -> {
                    // CALLORVAR NL
                    var _r27: _KotlinParser_Item? = null
                    _r27 = _MemoCall(_memo, "NL", _index.element, ::NL, null)
                    if (_r27 != null) _index.element = _r27.nextIndex

                    // STAR 26
                    val _r26 = _memo.results.pop()
                    if (_r26 != null) {
                        _res26 += _r26.results
                        _label = 26
                        continue
                    } else {
                        _memo.results.push(_KotlinParser_Item(_start_i26, _index.element, _memo.input, _res26.filterNotNull(), true))
                    }

                    _label = 2
                }
                // AND 2
                2 -> {
                    val _r2_2 = _memo.results.pop()
                    val _r2_1 = _memo.results.pop()

                    if (_r2_1 != null && _r2_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i2, _index.element, _memo.input, (_r2_1.results + _r2_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i2
                    }

                    // AND shortcut 1
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 1
                        continue
                    }

                    // CALLORVAR RANGLE
                    var _r28: _KotlinParser_Item? = null
                    _r28 = _MemoCall(_memo, "RANGLE", _index.element, ::RANGLE, null)
                    if (_r28 != null) _index.element = _r28.nextIndex

                    _label = 1
                }
                // AND 1
                1 -> {
                    val _r1_2 = _memo.results.pop()
                    val _r1_1 = _memo.results.pop()

                    if (_r1_1 != null && _r1_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i1, _index.element, _memo.input, (_r1_1.results + _r1_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i1
                    }

                    // ACT 0
                    val _r0 = _memo.results.peek()
                    if (_r0 != null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_r0.startIndex, _r0.nextIndex, _memo.input, _Thunk({ it.l }, _r0), true))
                    }

                    break
                }
            }
        }
    }


    open fun typeParameter(_memo: _KotlinParser_Memo, __index: Int, _args: _KotlinParser_Args?) {
        val _index = Ref.IntRef()
        _index.element = __index

        val _arg_index = Ref.IntRef()
        val _arg_input_index = Ref.IntRef()

        var mods: _KotlinParser_Item? = null
        var name: _KotlinParser_Item? = null
        var t: _KotlinParser_Item? = null

        // AND 1
        var _start_i1 = _index.element

        // AND 2
        var _start_i2 = _index.element

        // AND 3
        var _start_i3 = _index.element

        // STAR 7
        var _start_i7 = _index.element
        val _inp7 = arrayListOf<Token?>()
        val _res7 = arrayListOf<AST.AstNode?>()

        // AND 12
        var _start_i12 = _index.element

        // AND 13
        var _start_i13 = _index.element

        // AND 14
        var _start_i14 = _index.element

        // STAR 15
        var _start_i15 = _index.element
        val _inp15 = arrayListOf<Token?>()
        val _res15 = arrayListOf<AST.AstNode?>()

        // STAR 18
        var _start_i18 = _index.element
        val _inp18 = arrayListOf<Token?>()
        val _res18 = arrayListOf<AST.AstNode?>()

        var _label = -1
        while(true) {
            when(_label) {
                -1 -> {
                    // AND 1
                    _start_i1 = _index.element

                    // AND 2
                    _start_i2 = _index.element

                    // AND 3
                    _start_i3 = _index.element

                    // CALLORVAR typeParameterModifiers
                    var _r6: _KotlinParser_Item? = null
                    _r6 = _MemoCall(_memo, "typeParameterModifiers", _index.element, ::typeParameterModifiers, null)
                    if (_r6 != null) _index.element = _r6.nextIndex

                    // QUES 5
                    if (_memo.results.peek() == null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_index.element, _memo.input))
                    }
                    // BIND mods
                    mods = _memo.results.peek()

                    // AND shortcut 3
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 3
                        continue
                    }

                    // STAR 7
                    _start_i7 = _index.element
                    _label = 7
                }
                // STAR 7
                7 -> {
                    // CALLORVAR NL
                    var _r8: _KotlinParser_Item? = null
                    _r8 = _MemoCall(_memo, "NL", _index.element, ::NL, null)
                    if (_r8 != null) _index.element = _r8.nextIndex

                    // STAR 7
                    val _r7 = _memo.results.pop()
                    if (_r7 != null) {
                        _res7 += _r7.results
                        _label = 7
                        continue
                    } else {
                        _memo.results.push(_KotlinParser_Item(_start_i7, _index.element, _memo.input, _res7.filterNotNull(), true))
                    }

                    _label = 3
                }
                // AND 3
                3 -> {
                    val _r3_2 = _memo.results.pop()
                    val _r3_1 = _memo.results.pop()

                    if (_r3_1 != null && _r3_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i3, _index.element, _memo.input, (_r3_1.results + _r3_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i3
                    }

                    // AND shortcut 2
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 2
                        continue
                    }

                    // CALLORVAR simpleIdentifier
                    var _r10: _KotlinParser_Item? = null
                    _r10 = _MemoCall(_memo, "simpleIdentifier", _index.element, ::simpleIdentifier, null)
                    if (_r10 != null) _index.element = _r10.nextIndex

                    // BIND name
                    name = _memo.results.peek()

                    _label = 2
                }
                // AND 2
                2 -> {
                    val _r2_2 = _memo.results.pop()
                    val _r2_1 = _memo.results.pop()

                    if (_r2_1 != null && _r2_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i2, _index.element, _memo.input, (_r2_1.results + _r2_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i2
                    }

                    // AND shortcut 1
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 1
                        continue
                    }

                    // AND 12
                    _start_i12 = _index.element

                    // AND 13
                    _start_i13 = _index.element

                    // AND 14
                    _start_i14 = _index.element

                    // STAR 15
                    _start_i15 = _index.element
                    _label = 15
                }
                // STAR 15
                15 -> {
                    // CALLORVAR NL
                    var _r16: _KotlinParser_Item? = null
                    _r16 = _MemoCall(_memo, "NL", _index.element, ::NL, null)
                    if (_r16 != null) _index.element = _r16.nextIndex

                    // STAR 15
                    val _r15 = _memo.results.pop()
                    if (_r15 != null) {
                        _res15 += _r15.results
                        _label = 15
                        continue
                    } else {
                        _memo.results.push(_KotlinParser_Item(_start_i15, _index.element, _memo.input, _res15.filterNotNull(), true))
                    }

                    // AND shortcut 14
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 14
                        continue
                    }

                    // CALLORVAR COLON
                    var _r17: _KotlinParser_Item? = null
                    _r17 = _MemoCall(_memo, "COLON", _index.element, ::COLON, null)
                    if (_r17 != null) _index.element = _r17.nextIndex

                    _label = 14
                }
                // AND 14
                14 -> {
                    val _r14_2 = _memo.results.pop()
                    val _r14_1 = _memo.results.pop()

                    if (_r14_1 != null && _r14_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i14, _index.element, _memo.input, (_r14_1.results + _r14_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i14
                    }

                    // AND shortcut 13
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 13
                        continue
                    }

                    // STAR 18
                    _start_i18 = _index.element
                    _label = 18
                }
                // STAR 18
                18 -> {
                    // CALLORVAR NL
                    var _r19: _KotlinParser_Item? = null
                    _r19 = _MemoCall(_memo, "NL", _index.element, ::NL, null)
                    if (_r19 != null) _index.element = _r19.nextIndex

                    // STAR 18
                    val _r18 = _memo.results.pop()
                    if (_r18 != null) {
                        _res18 += _r18.results
                        _label = 18
                        continue
                    } else {
                        _memo.results.push(_KotlinParser_Item(_start_i18, _index.element, _memo.input, _res18.filterNotNull(), true))
                    }

                    _label = 13
                }
                // AND 13
                13 -> {
                    val _r13_2 = _memo.results.pop()
                    val _r13_1 = _memo.results.pop()

                    if (_r13_1 != null && _r13_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i13, _index.element, _memo.input, (_r13_1.results + _r13_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i13
                    }

                    // AND shortcut 12
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 12
                        continue
                    }

                    // CALLORVAR type
                    var _r21: _KotlinParser_Item? = null
                    _r21 = _MemoCall(_memo, "type", _index.element, ::type, null)
                    if (_r21 != null) _index.element = _r21.nextIndex

                    // BIND t
                    t = _memo.results.peek()

                    _label = 12
                }
                // AND 12
                12 -> {
                    val _r12_2 = _memo.results.pop()
                    val _r12_1 = _memo.results.pop()

                    if (_r12_1 != null && _r12_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i12, _index.element, _memo.input, (_r12_1.results + _r12_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i12
                    }

                    // QUES 11
                    if (_memo.results.peek() == null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_index.element, _memo.input))
                    }
                    _label = 1
                }
                // AND 1
                1 -> {
                    val _r1_2 = _memo.results.pop()
                    val _r1_1 = _memo.results.pop()

                    if (_r1_1 != null && _r1_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i1, _index.element, _memo.input, (_r1_1.results + _r1_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i1
                    }

                    // ACT 0
                    val _r0 = _memo.results.peek()
                    if (_r0 != null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_r0.startIndex, _r0.nextIndex, _memo.input, _Thunk({ AST.TypeParameter(mods.l, name.s, t.nr) }, _r0), true))
                    }

                    break
                }
            }
        }
    }


    open fun typeConstraints(_memo: _KotlinParser_Memo, __index: Int, _args: _KotlinParser_Args?) {
        val _index = Ref.IntRef()
        _index.element = __index

        val _arg_index = Ref.IntRef()
        val _arg_input_index = Ref.IntRef()

        // AND 1
        var _start_i1 = _index.element

        // AND 2
        var _start_i2 = _index.element

        // AND 3
        var _start_i3 = _index.element

        // STAR 5
        var _start_i5 = _index.element
        val _inp5 = arrayListOf<Token?>()
        val _res5 = arrayListOf<AST.AstNode?>()

        // STAR 8
        var _start_i8 = _index.element
        val _inp8 = arrayListOf<Token?>()
        val _res8 = arrayListOf<AST.AstNode?>()

        // AND 9
        var _start_i9 = _index.element

        // AND 10
        var _start_i10 = _index.element

        // AND 11
        var _start_i11 = _index.element

        // STAR 12
        var _start_i12 = _index.element
        val _inp12 = arrayListOf<Token?>()
        val _res12 = arrayListOf<AST.AstNode?>()

        // STAR 15
        var _start_i15 = _index.element
        val _inp15 = arrayListOf<Token?>()
        val _res15 = arrayListOf<AST.AstNode?>()

        var _label = -1
        while(true) {
            when(_label) {
                -1 -> {
                    // AND 1
                    _start_i1 = _index.element

                    // AND 2
                    _start_i2 = _index.element

                    // AND 3
                    _start_i3 = _index.element

                    // CALLORVAR WHERE
                    var _r4: _KotlinParser_Item? = null
                    _r4 = _MemoCall(_memo, "WHERE", _index.element, ::WHERE, null)
                    if (_r4 != null) _index.element = _r4.nextIndex

                    // AND shortcut 3
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 3
                        continue
                    }

                    // STAR 5
                    _start_i5 = _index.element
                    _label = 5
                }
                // STAR 5
                5 -> {
                    // CALLORVAR NL
                    var _r6: _KotlinParser_Item? = null
                    _r6 = _MemoCall(_memo, "NL", _index.element, ::NL, null)
                    if (_r6 != null) _index.element = _r6.nextIndex

                    // STAR 5
                    val _r5 = _memo.results.pop()
                    if (_r5 != null) {
                        _res5 += _r5.results
                        _label = 5
                        continue
                    } else {
                        _memo.results.push(_KotlinParser_Item(_start_i5, _index.element, _memo.input, _res5.filterNotNull(), true))
                    }

                    _label = 3
                }
                // AND 3
                3 -> {
                    val _r3_2 = _memo.results.pop()
                    val _r3_1 = _memo.results.pop()

                    if (_r3_1 != null && _r3_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i3, _index.element, _memo.input, (_r3_1.results + _r3_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i3
                    }

                    // AND shortcut 2
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 2
                        continue
                    }

                    // CALLORVAR typeConstraint
                    var _r7: _KotlinParser_Item? = null
                    _r7 = _MemoCall(_memo, "typeConstraint", _index.element, ::typeConstraint, null)
                    if (_r7 != null) _index.element = _r7.nextIndex

                    _label = 2
                }
                // AND 2
                2 -> {
                    val _r2_2 = _memo.results.pop()
                    val _r2_1 = _memo.results.pop()

                    if (_r2_1 != null && _r2_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i2, _index.element, _memo.input, (_r2_1.results + _r2_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i2
                    }

                    // AND shortcut 1
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 1
                        continue
                    }

                    // STAR 8
                    _start_i8 = _index.element
                    _label = 8
                }
                // STAR 8
                8 -> {
                    // AND 9
                    _start_i9 = _index.element

                    // AND 10
                    _start_i10 = _index.element

                    // AND 11
                    _start_i11 = _index.element

                    // STAR 12
                    _start_i12 = _index.element
                    _label = 12
                }
                // STAR 12
                12 -> {
                    // CALLORVAR NL
                    var _r13: _KotlinParser_Item? = null
                    _r13 = _MemoCall(_memo, "NL", _index.element, ::NL, null)
                    if (_r13 != null) _index.element = _r13.nextIndex

                    // STAR 12
                    val _r12 = _memo.results.pop()
                    if (_r12 != null) {
                        _res12 += _r12.results
                        _label = 12
                        continue
                    } else {
                        _memo.results.push(_KotlinParser_Item(_start_i12, _index.element, _memo.input, _res12.filterNotNull(), true))
                    }

                    // AND shortcut 11
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 11
                        continue
                    }

                    // CALLORVAR COMMA
                    var _r14: _KotlinParser_Item? = null
                    _r14 = _MemoCall(_memo, "COMMA", _index.element, ::COMMA, null)
                    if (_r14 != null) _index.element = _r14.nextIndex

                    _label = 11
                }
                // AND 11
                11 -> {
                    val _r11_2 = _memo.results.pop()
                    val _r11_1 = _memo.results.pop()

                    if (_r11_1 != null && _r11_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i11, _index.element, _memo.input, (_r11_1.results + _r11_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i11
                    }

                    // AND shortcut 10
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 10
                        continue
                    }

                    // STAR 15
                    _start_i15 = _index.element
                    _label = 15
                }
                // STAR 15
                15 -> {
                    // CALLORVAR NL
                    var _r16: _KotlinParser_Item? = null
                    _r16 = _MemoCall(_memo, "NL", _index.element, ::NL, null)
                    if (_r16 != null) _index.element = _r16.nextIndex

                    // STAR 15
                    val _r15 = _memo.results.pop()
                    if (_r15 != null) {
                        _res15 += _r15.results
                        _label = 15
                        continue
                    } else {
                        _memo.results.push(_KotlinParser_Item(_start_i15, _index.element, _memo.input, _res15.filterNotNull(), true))
                    }

                    _label = 10
                }
                // AND 10
                10 -> {
                    val _r10_2 = _memo.results.pop()
                    val _r10_1 = _memo.results.pop()

                    if (_r10_1 != null && _r10_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i10, _index.element, _memo.input, (_r10_1.results + _r10_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i10
                    }

                    // AND shortcut 9
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 9
                        continue
                    }

                    // CALLORVAR typeConstraint
                    var _r17: _KotlinParser_Item? = null
                    _r17 = _MemoCall(_memo, "typeConstraint", _index.element, ::typeConstraint, null)
                    if (_r17 != null) _index.element = _r17.nextIndex

                    _label = 9
                }
                // AND 9
                9 -> {
                    val _r9_2 = _memo.results.pop()
                    val _r9_1 = _memo.results.pop()

                    if (_r9_1 != null && _r9_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i9, _index.element, _memo.input, (_r9_1.results + _r9_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i9
                    }

                    // STAR 8
                    val _r8 = _memo.results.pop()
                    if (_r8 != null) {
                        _res8 += _r8.results
                        _label = 8
                        continue
                    } else {
                        _memo.results.push(_KotlinParser_Item(_start_i8, _index.element, _memo.input, _res8.filterNotNull(), true))
                    }

                    _label = 1
                }
                // AND 1
                1 -> {
                    val _r1_2 = _memo.results.pop()
                    val _r1_1 = _memo.results.pop()

                    if (_r1_1 != null && _r1_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i1, _index.element, _memo.input, (_r1_1.results + _r1_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i1
                    }

                    // ACT 0
                    val _r0 = _memo.results.peek()
                    if (_r0 != null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_r0.startIndex, _r0.nextIndex, _memo.input, _Thunk({ it.l }, _r0), true))
                    }

                    break
                }
            }
        }
    }


    open fun typeConstraint(_memo: _KotlinParser_Memo, __index: Int, _args: _KotlinParser_Args?) {
        val _index = Ref.IntRef()
        _index.element = __index

        val _arg_index = Ref.IntRef()
        val _arg_input_index = Ref.IntRef()

        var anns: _KotlinParser_Item? = null
        var name: _KotlinParser_Item? = null
        var t: _KotlinParser_Item? = null

        // AND 1
        var _start_i1 = _index.element

        // AND 2
        var _start_i2 = _index.element

        // AND 3
        var _start_i3 = _index.element

        // AND 4
        var _start_i4 = _index.element

        // AND 5
        var _start_i5 = _index.element

        // STAR 7
        var _start_i7 = _index.element
        val _inp7 = arrayListOf<Token?>()
        val _res7 = arrayListOf<AST.AstNode?>()

        // STAR 11
        var _start_i11 = _index.element
        val _inp11 = arrayListOf<Token?>()
        val _res11 = arrayListOf<AST.AstNode?>()

        // STAR 14
        var _start_i14 = _index.element
        val _inp14 = arrayListOf<Token?>()
        val _res14 = arrayListOf<AST.AstNode?>()

        var _label = -1
        while(true) {
            when(_label) {
                -1 -> {
                    // AND 1
                    _start_i1 = _index.element

                    // AND 2
                    _start_i2 = _index.element

                    // AND 3
                    _start_i3 = _index.element

                    // AND 4
                    _start_i4 = _index.element

                    // AND 5
                    _start_i5 = _index.element

                    // STAR 7
                    _start_i7 = _index.element
                    _label = 7
                }
                // STAR 7
                7 -> {
                    // CALLORVAR annotation
                    var _r8: _KotlinParser_Item? = null
                    _r8 = _MemoCall(_memo, "annotation", _index.element, ::annotation, null)
                    if (_r8 != null) _index.element = _r8.nextIndex

                    // STAR 7
                    val _r7 = _memo.results.pop()
                    if (_r7 != null) {
                        _res7 += _r7.results
                        _label = 7
                        continue
                    } else {
                        _memo.results.push(_KotlinParser_Item(_start_i7, _index.element, _memo.input, _res7.filterNotNull(), true))
                    }

                    // BIND anns
                    anns = _memo.results.peek()

                    // AND shortcut 5
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 5
                        continue
                    }

                    // CALLORVAR simpleIdentifier
                    var _r10: _KotlinParser_Item? = null
                    _r10 = _MemoCall(_memo, "simpleIdentifier", _index.element, ::simpleIdentifier, null)
                    if (_r10 != null) _index.element = _r10.nextIndex

                    // BIND name
                    name = _memo.results.peek()

                    _label = 5
                }
                // AND 5
                5 -> {
                    val _r5_2 = _memo.results.pop()
                    val _r5_1 = _memo.results.pop()

                    if (_r5_1 != null && _r5_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i5, _index.element, _memo.input, (_r5_1.results + _r5_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i5
                    }

                    // AND shortcut 4
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 4
                        continue
                    }

                    // STAR 11
                    _start_i11 = _index.element
                    _label = 11
                }
                // STAR 11
                11 -> {
                    // CALLORVAR NL
                    var _r12: _KotlinParser_Item? = null
                    _r12 = _MemoCall(_memo, "NL", _index.element, ::NL, null)
                    if (_r12 != null) _index.element = _r12.nextIndex

                    // STAR 11
                    val _r11 = _memo.results.pop()
                    if (_r11 != null) {
                        _res11 += _r11.results
                        _label = 11
                        continue
                    } else {
                        _memo.results.push(_KotlinParser_Item(_start_i11, _index.element, _memo.input, _res11.filterNotNull(), true))
                    }

                    _label = 4
                }
                // AND 4
                4 -> {
                    val _r4_2 = _memo.results.pop()
                    val _r4_1 = _memo.results.pop()

                    if (_r4_1 != null && _r4_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i4, _index.element, _memo.input, (_r4_1.results + _r4_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i4
                    }

                    // AND shortcut 3
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 3
                        continue
                    }

                    // CALLORVAR COLON
                    var _r13: _KotlinParser_Item? = null
                    _r13 = _MemoCall(_memo, "COLON", _index.element, ::COLON, null)
                    if (_r13 != null) _index.element = _r13.nextIndex

                    _label = 3
                }
                // AND 3
                3 -> {
                    val _r3_2 = _memo.results.pop()
                    val _r3_1 = _memo.results.pop()

                    if (_r3_1 != null && _r3_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i3, _index.element, _memo.input, (_r3_1.results + _r3_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i3
                    }

                    // AND shortcut 2
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 2
                        continue
                    }

                    // STAR 14
                    _start_i14 = _index.element
                    _label = 14
                }
                // STAR 14
                14 -> {
                    // CALLORVAR NL
                    var _r15: _KotlinParser_Item? = null
                    _r15 = _MemoCall(_memo, "NL", _index.element, ::NL, null)
                    if (_r15 != null) _index.element = _r15.nextIndex

                    // STAR 14
                    val _r14 = _memo.results.pop()
                    if (_r14 != null) {
                        _res14 += _r14.results
                        _label = 14
                        continue
                    } else {
                        _memo.results.push(_KotlinParser_Item(_start_i14, _index.element, _memo.input, _res14.filterNotNull(), true))
                    }

                    _label = 2
                }
                // AND 2
                2 -> {
                    val _r2_2 = _memo.results.pop()
                    val _r2_1 = _memo.results.pop()

                    if (_r2_1 != null && _r2_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i2, _index.element, _memo.input, (_r2_1.results + _r2_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i2
                    }

                    // AND shortcut 1
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 1
                        continue
                    }

                    // CALLORVAR type
                    var _r17: _KotlinParser_Item? = null
                    _r17 = _MemoCall(_memo, "type", _index.element, ::type, null)
                    if (_r17 != null) _index.element = _r17.nextIndex

                    // BIND t
                    t = _memo.results.peek()

                    _label = 1
                }
                // AND 1
                1 -> {
                    val _r1_2 = _memo.results.pop()
                    val _r1_1 = _memo.results.pop()

                    if (_r1_1 != null && _r1_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i1, _index.element, _memo.input, (_r1_1.results + _r1_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i1
                    }

                    // ACT 0
                    val _r0 = _memo.results.peek()
                    if (_r0 != null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_r0.startIndex, _r0.nextIndex, _memo.input, _Thunk({ AST.TypeConstraint(anns.l, name.s, t.r) }, _r0), true))
                    }

                    break
                }
            }
        }
    }


    open fun classMemberDeclarations(_memo: _KotlinParser_Memo, __index: Int, _args: _KotlinParser_Args?) {
        val _index = Ref.IntRef()
        _index.element = __index

        val _arg_index = Ref.IntRef()
        val _arg_input_index = Ref.IntRef()

        // STAR 1
        var _start_i1 = _index.element
        val _inp1 = arrayListOf<Token?>()
        val _res1 = arrayListOf<AST.AstNode?>()

        // AND 2
        var _start_i2 = _index.element

        var _label = -1
        while(true) {
            when(_label) {
                -1 -> {
                    // STAR 1
                    _start_i1 = _index.element
                    _label = 1
                }
                // STAR 1
                1 -> {
                    // AND 2
                    _start_i2 = _index.element

                    // CALLORVAR classMemberDeclaration
                    var _r3: _KotlinParser_Item? = null
                    _r3 = _MemoCall(_memo, "classMemberDeclaration", _index.element, ::classMemberDeclaration, null)
                    if (_r3 != null) _index.element = _r3.nextIndex

                    // AND shortcut 2
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 2
                        continue
                    }

                    // CALLORVAR semis
                    var _r5: _KotlinParser_Item? = null
                    _r5 = _MemoCall(_memo, "semis", _index.element, ::semis, null)
                    if (_r5 != null) _index.element = _r5.nextIndex

                    // QUES 4
                    if (_memo.results.peek() == null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_index.element, _memo.input))
                    }
                    _label = 2
                }
                // AND 2
                2 -> {
                    val _r2_2 = _memo.results.pop()
                    val _r2_1 = _memo.results.pop()

                    if (_r2_1 != null && _r2_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i2, _index.element, _memo.input, (_r2_1.results + _r2_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i2
                    }

                    // STAR 1
                    val _r1 = _memo.results.pop()
                    if (_r1 != null) {
                        _res1 += _r1.results
                        _label = 1
                        continue
                    } else {
                        _memo.results.push(_KotlinParser_Item(_start_i1, _index.element, _memo.input, _res1.filterNotNull(), true))
                    }

                    // ACT 0
                    val _r0 = _memo.results.peek()
                    if (_r0 != null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_r0.startIndex, _r0.nextIndex, _memo.input, _Thunk({ it.l }, _r0), true))
                    }

                    break
                }
            }
        }
    }


    open fun classMemberDeclaration(_memo: _KotlinParser_Memo, __index: Int, _args: _KotlinParser_Args?) {
        val _index = Ref.IntRef()
        _index.element = __index

        val _arg_index = Ref.IntRef()
        val _arg_input_index = Ref.IntRef()

        // OR 0
        var _start_i0 = _index.element

        // OR 1
        var _start_i1 = _index.element

        // OR 2
        var _start_i2 = _index.element

        var _label = -1
        while(true) {
            when(_label) {
                -1 -> {
                    // OR 0
                    _start_i0 = _index.element

                    // OR 1
                    _start_i1 = _index.element

                    // OR 2
                    _start_i2 = _index.element

                    // CALLORVAR declaration
                    var _r3: _KotlinParser_Item? = null
                    _r3 = _MemoCall(_memo, "declaration", _index.element, ::declaration, null)
                    if (_r3 != null) _index.element = _r3.nextIndex

                    // OR shortcut 2
                    if (_memo.results.peek() == null) {
                        _memo.results.pop()
                        _index.element = _start_i2
                    } else {
                        _label = 2
                        continue
                    }

                    // CALLORVAR companionObject
                    var _r4: _KotlinParser_Item? = null
                    _r4 = _MemoCall(_memo, "companionObject", _index.element, ::companionObject, null)
                    if (_r4 != null) _index.element = _r4.nextIndex

                    _label = 2
                }
                // OR 2
                2 -> {
                    // OR shortcut 1
                    if (_memo.results.peek() == null) {
                        _memo.results.pop()
                        _index.element = _start_i1
                    } else {
                        _label = 1
                        continue
                    }

                    // CALLORVAR anonymousInitializer
                    var _r5: _KotlinParser_Item? = null
                    _r5 = _MemoCall(_memo, "anonymousInitializer", _index.element, ::anonymousInitializer, null)
                    if (_r5 != null) _index.element = _r5.nextIndex

                    _label = 1
                }
                // OR 1
                1 -> {
                    // OR shortcut 0
                    if (_memo.results.peek() == null) {
                        _memo.results.pop()
                        _index.element = _start_i0
                    } else {
                        _label = 0
                        continue
                    }

                    // CALLORVAR secondaryConstructor
                    var _r6: _KotlinParser_Item? = null
                    _r6 = _MemoCall(_memo, "secondaryConstructor", _index.element, ::secondaryConstructor, null)
                    if (_r6 != null) _index.element = _r6.nextIndex

                    _label = 0
                }
                // OR 0
                0 -> {
                    break
                }
            }
        }
    }


    open fun anonymousInitializer(_memo: _KotlinParser_Memo, __index: Int, _args: _KotlinParser_Args?) {
        val _index = Ref.IntRef()
        _index.element = __index

        val _arg_index = Ref.IntRef()
        val _arg_input_index = Ref.IntRef()

        var b: _KotlinParser_Item? = null

        // AND 1
        var _start_i1 = _index.element

        // AND 2
        var _start_i2 = _index.element

        // STAR 4
        var _start_i4 = _index.element
        val _inp4 = arrayListOf<Token?>()
        val _res4 = arrayListOf<AST.AstNode?>()

        var _label = -1
        while(true) {
            when(_label) {
                -1 -> {
                    // AND 1
                    _start_i1 = _index.element

                    // AND 2
                    _start_i2 = _index.element

                    // CALLORVAR INIT
                    var _r3: _KotlinParser_Item? = null
                    _r3 = _MemoCall(_memo, "INIT", _index.element, ::INIT, null)
                    if (_r3 != null) _index.element = _r3.nextIndex

                    // AND shortcut 2
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 2
                        continue
                    }

                    // STAR 4
                    _start_i4 = _index.element
                    _label = 4
                }
                // STAR 4
                4 -> {
                    // CALLORVAR NL
                    var _r5: _KotlinParser_Item? = null
                    _r5 = _MemoCall(_memo, "NL", _index.element, ::NL, null)
                    if (_r5 != null) _index.element = _r5.nextIndex

                    // STAR 4
                    val _r4 = _memo.results.pop()
                    if (_r4 != null) {
                        _res4 += _r4.results
                        _label = 4
                        continue
                    } else {
                        _memo.results.push(_KotlinParser_Item(_start_i4, _index.element, _memo.input, _res4.filterNotNull(), true))
                    }

                    _label = 2
                }
                // AND 2
                2 -> {
                    val _r2_2 = _memo.results.pop()
                    val _r2_1 = _memo.results.pop()

                    if (_r2_1 != null && _r2_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i2, _index.element, _memo.input, (_r2_1.results + _r2_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i2
                    }

                    // AND shortcut 1
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 1
                        continue
                    }

                    // CALLORVAR block
                    var _r7: _KotlinParser_Item? = null
                    _r7 = _MemoCall(_memo, "block", _index.element, ::block, null)
                    if (_r7 != null) _index.element = _r7.nextIndex

                    // BIND b
                    b = _memo.results.peek()

                    _label = 1
                }
                // AND 1
                1 -> {
                    val _r1_2 = _memo.results.pop()
                    val _r1_1 = _memo.results.pop()

                    if (_r1_1 != null && _r1_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i1, _index.element, _memo.input, (_r1_1.results + _r1_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i1
                    }

                    // ACT 0
                    val _r0 = _memo.results.peek()
                    if (_r0 != null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_r0.startIndex, _r0.nextIndex, _memo.input, _Thunk({ AST.AnonymousInitializer(b.r) }, _r0), true))
                    }

                    break
                }
            }
        }
    }


    open fun companionObject(_memo: _KotlinParser_Memo, __index: Int, _args: _KotlinParser_Args?) {
        val _index = Ref.IntRef()
        _index.element = __index

        val _arg_index = Ref.IntRef()
        val _arg_input_index = Ref.IntRef()

        var mods: _KotlinParser_Item? = null
        var name: _KotlinParser_Item? = null
        var ds: _KotlinParser_Item? = null
        var b: _KotlinParser_Item? = null

        // AND 1
        var _start_i1 = _index.element

        // AND 2
        var _start_i2 = _index.element

        // AND 3
        var _start_i3 = _index.element

        // AND 4
        var _start_i4 = _index.element

        // AND 5
        var _start_i5 = _index.element

        // AND 6
        var _start_i6 = _index.element

        // STAR 11
        var _start_i11 = _index.element
        val _inp11 = arrayListOf<Token?>()
        val _res11 = arrayListOf<AST.AstNode?>()

        // AND 15
        var _start_i15 = _index.element

        // STAR 16
        var _start_i16 = _index.element
        val _inp16 = arrayListOf<Token?>()
        val _res16 = arrayListOf<AST.AstNode?>()

        // AND 21
        var _start_i21 = _index.element

        // AND 22
        var _start_i22 = _index.element

        // AND 23
        var _start_i23 = _index.element

        // STAR 24
        var _start_i24 = _index.element
        val _inp24 = arrayListOf<Token?>()
        val _res24 = arrayListOf<AST.AstNode?>()

        // STAR 27
        var _start_i27 = _index.element
        val _inp27 = arrayListOf<Token?>()
        val _res27 = arrayListOf<AST.AstNode?>()

        // AND 32
        var _start_i32 = _index.element

        // STAR 33
        var _start_i33 = _index.element
        val _inp33 = arrayListOf<Token?>()
        val _res33 = arrayListOf<AST.AstNode?>()

        var _label = -1
        while(true) {
            when(_label) {
                -1 -> {
                    // AND 1
                    _start_i1 = _index.element

                    // AND 2
                    _start_i2 = _index.element

                    // AND 3
                    _start_i3 = _index.element

                    // AND 4
                    _start_i4 = _index.element

                    // AND 5
                    _start_i5 = _index.element

                    // AND 6
                    _start_i6 = _index.element

                    // CALLORVAR modifiers
                    var _r9: _KotlinParser_Item? = null
                    _r9 = _MemoCall(_memo, "modifiers", _index.element, ::modifiers, null)
                    if (_r9 != null) _index.element = _r9.nextIndex

                    // QUES 8
                    if (_memo.results.peek() == null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_index.element, _memo.input))
                    }
                    // BIND mods
                    mods = _memo.results.peek()

                    // AND shortcut 6
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 6
                        continue
                    }

                    // CALLORVAR COMPANION
                    var _r10: _KotlinParser_Item? = null
                    _r10 = _MemoCall(_memo, "COMPANION", _index.element, ::COMPANION, null)
                    if (_r10 != null) _index.element = _r10.nextIndex

                    _label = 6
                }
                // AND 6
                6 -> {
                    val _r6_2 = _memo.results.pop()
                    val _r6_1 = _memo.results.pop()

                    if (_r6_1 != null && _r6_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i6, _index.element, _memo.input, (_r6_1.results + _r6_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i6
                    }

                    // AND shortcut 5
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 5
                        continue
                    }

                    // STAR 11
                    _start_i11 = _index.element
                    _label = 11
                }
                // STAR 11
                11 -> {
                    // CALLORVAR NL
                    var _r12: _KotlinParser_Item? = null
                    _r12 = _MemoCall(_memo, "NL", _index.element, ::NL, null)
                    if (_r12 != null) _index.element = _r12.nextIndex

                    // STAR 11
                    val _r11 = _memo.results.pop()
                    if (_r11 != null) {
                        _res11 += _r11.results
                        _label = 11
                        continue
                    } else {
                        _memo.results.push(_KotlinParser_Item(_start_i11, _index.element, _memo.input, _res11.filterNotNull(), true))
                    }

                    _label = 5
                }
                // AND 5
                5 -> {
                    val _r5_2 = _memo.results.pop()
                    val _r5_1 = _memo.results.pop()

                    if (_r5_1 != null && _r5_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i5, _index.element, _memo.input, (_r5_1.results + _r5_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i5
                    }

                    // AND shortcut 4
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 4
                        continue
                    }

                    // CALLORVAR OBJECT
                    var _r13: _KotlinParser_Item? = null
                    _r13 = _MemoCall(_memo, "OBJECT", _index.element, ::OBJECT, null)
                    if (_r13 != null) _index.element = _r13.nextIndex

                    _label = 4
                }
                // AND 4
                4 -> {
                    val _r4_2 = _memo.results.pop()
                    val _r4_1 = _memo.results.pop()

                    if (_r4_1 != null && _r4_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i4, _index.element, _memo.input, (_r4_1.results + _r4_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i4
                    }

                    // AND shortcut 3
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 3
                        continue
                    }

                    // AND 15
                    _start_i15 = _index.element

                    // STAR 16
                    _start_i16 = _index.element
                    _label = 16
                }
                // STAR 16
                16 -> {
                    // CALLORVAR NL
                    var _r17: _KotlinParser_Item? = null
                    _r17 = _MemoCall(_memo, "NL", _index.element, ::NL, null)
                    if (_r17 != null) _index.element = _r17.nextIndex

                    // STAR 16
                    val _r16 = _memo.results.pop()
                    if (_r16 != null) {
                        _res16 += _r16.results
                        _label = 16
                        continue
                    } else {
                        _memo.results.push(_KotlinParser_Item(_start_i16, _index.element, _memo.input, _res16.filterNotNull(), true))
                    }

                    // AND shortcut 15
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 15
                        continue
                    }

                    // CALLORVAR simpleIdentifier
                    var _r19: _KotlinParser_Item? = null
                    _r19 = _MemoCall(_memo, "simpleIdentifier", _index.element, ::simpleIdentifier, null)
                    if (_r19 != null) _index.element = _r19.nextIndex

                    // BIND name
                    name = _memo.results.peek()

                    _label = 15
                }
                // AND 15
                15 -> {
                    val _r15_2 = _memo.results.pop()
                    val _r15_1 = _memo.results.pop()

                    if (_r15_1 != null && _r15_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i15, _index.element, _memo.input, (_r15_1.results + _r15_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i15
                    }

                    // QUES 14
                    if (_memo.results.peek() == null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_index.element, _memo.input))
                    }
                    _label = 3
                }
                // AND 3
                3 -> {
                    val _r3_2 = _memo.results.pop()
                    val _r3_1 = _memo.results.pop()

                    if (_r3_1 != null && _r3_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i3, _index.element, _memo.input, (_r3_1.results + _r3_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i3
                    }

                    // AND shortcut 2
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 2
                        continue
                    }

                    // AND 21
                    _start_i21 = _index.element

                    // AND 22
                    _start_i22 = _index.element

                    // AND 23
                    _start_i23 = _index.element

                    // STAR 24
                    _start_i24 = _index.element
                    _label = 24
                }
                // STAR 24
                24 -> {
                    // CALLORVAR NL
                    var _r25: _KotlinParser_Item? = null
                    _r25 = _MemoCall(_memo, "NL", _index.element, ::NL, null)
                    if (_r25 != null) _index.element = _r25.nextIndex

                    // STAR 24
                    val _r24 = _memo.results.pop()
                    if (_r24 != null) {
                        _res24 += _r24.results
                        _label = 24
                        continue
                    } else {
                        _memo.results.push(_KotlinParser_Item(_start_i24, _index.element, _memo.input, _res24.filterNotNull(), true))
                    }

                    // AND shortcut 23
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 23
                        continue
                    }

                    // CALLORVAR COLON
                    var _r26: _KotlinParser_Item? = null
                    _r26 = _MemoCall(_memo, "COLON", _index.element, ::COLON, null)
                    if (_r26 != null) _index.element = _r26.nextIndex

                    _label = 23
                }
                // AND 23
                23 -> {
                    val _r23_2 = _memo.results.pop()
                    val _r23_1 = _memo.results.pop()

                    if (_r23_1 != null && _r23_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i23, _index.element, _memo.input, (_r23_1.results + _r23_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i23
                    }

                    // AND shortcut 22
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 22
                        continue
                    }

                    // STAR 27
                    _start_i27 = _index.element
                    _label = 27
                }
                // STAR 27
                27 -> {
                    // CALLORVAR NL
                    var _r28: _KotlinParser_Item? = null
                    _r28 = _MemoCall(_memo, "NL", _index.element, ::NL, null)
                    if (_r28 != null) _index.element = _r28.nextIndex

                    // STAR 27
                    val _r27 = _memo.results.pop()
                    if (_r27 != null) {
                        _res27 += _r27.results
                        _label = 27
                        continue
                    } else {
                        _memo.results.push(_KotlinParser_Item(_start_i27, _index.element, _memo.input, _res27.filterNotNull(), true))
                    }

                    _label = 22
                }
                // AND 22
                22 -> {
                    val _r22_2 = _memo.results.pop()
                    val _r22_1 = _memo.results.pop()

                    if (_r22_1 != null && _r22_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i22, _index.element, _memo.input, (_r22_1.results + _r22_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i22
                    }

                    // AND shortcut 21
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 21
                        continue
                    }

                    // CALLORVAR annotatedDelegationSpecifiers
                    var _r30: _KotlinParser_Item? = null
                    _r30 = _MemoCall(_memo, "annotatedDelegationSpecifiers", _index.element, ::annotatedDelegationSpecifiers, null)
                    if (_r30 != null) _index.element = _r30.nextIndex

                    // BIND ds
                    ds = _memo.results.peek()

                    _label = 21
                }
                // AND 21
                21 -> {
                    val _r21_2 = _memo.results.pop()
                    val _r21_1 = _memo.results.pop()

                    if (_r21_1 != null && _r21_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i21, _index.element, _memo.input, (_r21_1.results + _r21_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i21
                    }

                    // QUES 20
                    if (_memo.results.peek() == null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_index.element, _memo.input))
                    }
                    _label = 2
                }
                // AND 2
                2 -> {
                    val _r2_2 = _memo.results.pop()
                    val _r2_1 = _memo.results.pop()

                    if (_r2_1 != null && _r2_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i2, _index.element, _memo.input, (_r2_1.results + _r2_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i2
                    }

                    // AND shortcut 1
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 1
                        continue
                    }

                    // AND 32
                    _start_i32 = _index.element

                    // STAR 33
                    _start_i33 = _index.element
                    _label = 33
                }
                // STAR 33
                33 -> {
                    // CALLORVAR NL
                    var _r34: _KotlinParser_Item? = null
                    _r34 = _MemoCall(_memo, "NL", _index.element, ::NL, null)
                    if (_r34 != null) _index.element = _r34.nextIndex

                    // STAR 33
                    val _r33 = _memo.results.pop()
                    if (_r33 != null) {
                        _res33 += _r33.results
                        _label = 33
                        continue
                    } else {
                        _memo.results.push(_KotlinParser_Item(_start_i33, _index.element, _memo.input, _res33.filterNotNull(), true))
                    }

                    // AND shortcut 32
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 32
                        continue
                    }

                    // CALLORVAR classBody
                    var _r36: _KotlinParser_Item? = null
                    _r36 = _MemoCall(_memo, "classBody", _index.element, ::classBody, null)
                    if (_r36 != null) _index.element = _r36.nextIndex

                    // BIND b
                    b = _memo.results.peek()

                    _label = 32
                }
                // AND 32
                32 -> {
                    val _r32_2 = _memo.results.pop()
                    val _r32_1 = _memo.results.pop()

                    if (_r32_1 != null && _r32_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i32, _index.element, _memo.input, (_r32_1.results + _r32_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i32
                    }

                    // QUES 31
                    if (_memo.results.peek() == null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_index.element, _memo.input))
                    }
                    _label = 1
                }
                // AND 1
                1 -> {
                    val _r1_2 = _memo.results.pop()
                    val _r1_1 = _memo.results.pop()

                    if (_r1_1 != null && _r1_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i1, _index.element, _memo.input, (_r1_1.results + _r1_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i1
                    }

                    // ACT 0
                    val _r0 = _memo.results.peek()
                    if (_r0 != null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_r0.startIndex, _r0.nextIndex, _memo.input, _Thunk({ AST.CompanionObject(mods.l, name.ns, ds.l, b.nr) }, _r0), true))
                    }

                    break
                }
            }
        }
    }


    open fun functionValueParameters(_memo: _KotlinParser_Memo, __index: Int, _args: _KotlinParser_Args?) {
        val _index = Ref.IntRef()
        _index.element = __index

        val _arg_index = Ref.IntRef()
        val _arg_input_index = Ref.IntRef()

        // AND 1
        var _start_i1 = _index.element

        // AND 2
        var _start_i2 = _index.element

        // AND 3
        var _start_i3 = _index.element

        // AND 4
        var _start_i4 = _index.element

        // STAR 6
        var _start_i6 = _index.element
        val _inp6 = arrayListOf<Token?>()
        val _res6 = arrayListOf<AST.AstNode?>()

        // AND 9
        var _start_i9 = _index.element

        // AND 10
        var _start_i10 = _index.element

        // STAR 12
        var _start_i12 = _index.element
        val _inp12 = arrayListOf<Token?>()
        val _res12 = arrayListOf<AST.AstNode?>()

        // AND 13
        var _start_i13 = _index.element

        // AND 14
        var _start_i14 = _index.element

        // AND 15
        var _start_i15 = _index.element

        // STAR 16
        var _start_i16 = _index.element
        val _inp16 = arrayListOf<Token?>()
        val _res16 = arrayListOf<AST.AstNode?>()

        // STAR 19
        var _start_i19 = _index.element
        val _inp19 = arrayListOf<Token?>()
        val _res19 = arrayListOf<AST.AstNode?>()

        // AND 23
        var _start_i23 = _index.element

        // STAR 24
        var _start_i24 = _index.element
        val _inp24 = arrayListOf<Token?>()
        val _res24 = arrayListOf<AST.AstNode?>()

        // STAR 27
        var _start_i27 = _index.element
        val _inp27 = arrayListOf<Token?>()
        val _res27 = arrayListOf<AST.AstNode?>()

        var _label = -1
        while(true) {
            when(_label) {
                -1 -> {
                    // AND 1
                    _start_i1 = _index.element

                    // AND 2
                    _start_i2 = _index.element

                    // AND 3
                    _start_i3 = _index.element

                    // AND 4
                    _start_i4 = _index.element

                    // CALLORVAR LPAREN
                    var _r5: _KotlinParser_Item? = null
                    _r5 = _MemoCall(_memo, "LPAREN", _index.element, ::LPAREN, null)
                    if (_r5 != null) _index.element = _r5.nextIndex

                    // AND shortcut 4
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 4
                        continue
                    }

                    // STAR 6
                    _start_i6 = _index.element
                    _label = 6
                }
                // STAR 6
                6 -> {
                    // CALLORVAR NL
                    var _r7: _KotlinParser_Item? = null
                    _r7 = _MemoCall(_memo, "NL", _index.element, ::NL, null)
                    if (_r7 != null) _index.element = _r7.nextIndex

                    // STAR 6
                    val _r6 = _memo.results.pop()
                    if (_r6 != null) {
                        _res6 += _r6.results
                        _label = 6
                        continue
                    } else {
                        _memo.results.push(_KotlinParser_Item(_start_i6, _index.element, _memo.input, _res6.filterNotNull(), true))
                    }

                    _label = 4
                }
                // AND 4
                4 -> {
                    val _r4_2 = _memo.results.pop()
                    val _r4_1 = _memo.results.pop()

                    if (_r4_1 != null && _r4_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i4, _index.element, _memo.input, (_r4_1.results + _r4_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i4
                    }

                    // AND shortcut 3
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 3
                        continue
                    }

                    // AND 9
                    _start_i9 = _index.element

                    // AND 10
                    _start_i10 = _index.element

                    // CALLORVAR functionValueParameter
                    var _r11: _KotlinParser_Item? = null
                    _r11 = _MemoCall(_memo, "functionValueParameter", _index.element, ::functionValueParameter, null)
                    if (_r11 != null) _index.element = _r11.nextIndex

                    // AND shortcut 10
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 10
                        continue
                    }

                    // STAR 12
                    _start_i12 = _index.element
                    _label = 12
                }
                // STAR 12
                12 -> {
                    // AND 13
                    _start_i13 = _index.element

                    // AND 14
                    _start_i14 = _index.element

                    // AND 15
                    _start_i15 = _index.element

                    // STAR 16
                    _start_i16 = _index.element
                    _label = 16
                }
                // STAR 16
                16 -> {
                    // CALLORVAR NL
                    var _r17: _KotlinParser_Item? = null
                    _r17 = _MemoCall(_memo, "NL", _index.element, ::NL, null)
                    if (_r17 != null) _index.element = _r17.nextIndex

                    // STAR 16
                    val _r16 = _memo.results.pop()
                    if (_r16 != null) {
                        _res16 += _r16.results
                        _label = 16
                        continue
                    } else {
                        _memo.results.push(_KotlinParser_Item(_start_i16, _index.element, _memo.input, _res16.filterNotNull(), true))
                    }

                    // AND shortcut 15
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 15
                        continue
                    }

                    // CALLORVAR COMMA
                    var _r18: _KotlinParser_Item? = null
                    _r18 = _MemoCall(_memo, "COMMA", _index.element, ::COMMA, null)
                    if (_r18 != null) _index.element = _r18.nextIndex

                    _label = 15
                }
                // AND 15
                15 -> {
                    val _r15_2 = _memo.results.pop()
                    val _r15_1 = _memo.results.pop()

                    if (_r15_1 != null && _r15_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i15, _index.element, _memo.input, (_r15_1.results + _r15_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i15
                    }

                    // AND shortcut 14
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 14
                        continue
                    }

                    // STAR 19
                    _start_i19 = _index.element
                    _label = 19
                }
                // STAR 19
                19 -> {
                    // CALLORVAR NL
                    var _r20: _KotlinParser_Item? = null
                    _r20 = _MemoCall(_memo, "NL", _index.element, ::NL, null)
                    if (_r20 != null) _index.element = _r20.nextIndex

                    // STAR 19
                    val _r19 = _memo.results.pop()
                    if (_r19 != null) {
                        _res19 += _r19.results
                        _label = 19
                        continue
                    } else {
                        _memo.results.push(_KotlinParser_Item(_start_i19, _index.element, _memo.input, _res19.filterNotNull(), true))
                    }

                    _label = 14
                }
                // AND 14
                14 -> {
                    val _r14_2 = _memo.results.pop()
                    val _r14_1 = _memo.results.pop()

                    if (_r14_1 != null && _r14_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i14, _index.element, _memo.input, (_r14_1.results + _r14_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i14
                    }

                    // AND shortcut 13
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 13
                        continue
                    }

                    // CALLORVAR functionValueParameter
                    var _r21: _KotlinParser_Item? = null
                    _r21 = _MemoCall(_memo, "functionValueParameter", _index.element, ::functionValueParameter, null)
                    if (_r21 != null) _index.element = _r21.nextIndex

                    _label = 13
                }
                // AND 13
                13 -> {
                    val _r13_2 = _memo.results.pop()
                    val _r13_1 = _memo.results.pop()

                    if (_r13_1 != null && _r13_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i13, _index.element, _memo.input, (_r13_1.results + _r13_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i13
                    }

                    // STAR 12
                    val _r12 = _memo.results.pop()
                    if (_r12 != null) {
                        _res12 += _r12.results
                        _label = 12
                        continue
                    } else {
                        _memo.results.push(_KotlinParser_Item(_start_i12, _index.element, _memo.input, _res12.filterNotNull(), true))
                    }

                    _label = 10
                }
                // AND 10
                10 -> {
                    val _r10_2 = _memo.results.pop()
                    val _r10_1 = _memo.results.pop()

                    if (_r10_1 != null && _r10_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i10, _index.element, _memo.input, (_r10_1.results + _r10_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i10
                    }

                    // AND shortcut 9
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 9
                        continue
                    }

                    // AND 23
                    _start_i23 = _index.element

                    // STAR 24
                    _start_i24 = _index.element
                    _label = 24
                }
                // STAR 24
                24 -> {
                    // CALLORVAR NL
                    var _r25: _KotlinParser_Item? = null
                    _r25 = _MemoCall(_memo, "NL", _index.element, ::NL, null)
                    if (_r25 != null) _index.element = _r25.nextIndex

                    // STAR 24
                    val _r24 = _memo.results.pop()
                    if (_r24 != null) {
                        _res24 += _r24.results
                        _label = 24
                        continue
                    } else {
                        _memo.results.push(_KotlinParser_Item(_start_i24, _index.element, _memo.input, _res24.filterNotNull(), true))
                    }

                    // AND shortcut 23
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 23
                        continue
                    }

                    // CALLORVAR COMMA
                    var _r26: _KotlinParser_Item? = null
                    _r26 = _MemoCall(_memo, "COMMA", _index.element, ::COMMA, null)
                    if (_r26 != null) _index.element = _r26.nextIndex

                    _label = 23
                }
                // AND 23
                23 -> {
                    val _r23_2 = _memo.results.pop()
                    val _r23_1 = _memo.results.pop()

                    if (_r23_1 != null && _r23_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i23, _index.element, _memo.input, (_r23_1.results + _r23_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i23
                    }

                    // QUES 22
                    if (_memo.results.peek() == null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_index.element, _memo.input))
                    }
                    _label = 9
                }
                // AND 9
                9 -> {
                    val _r9_2 = _memo.results.pop()
                    val _r9_1 = _memo.results.pop()

                    if (_r9_1 != null && _r9_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i9, _index.element, _memo.input, (_r9_1.results + _r9_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i9
                    }

                    // QUES 8
                    if (_memo.results.peek() == null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_index.element, _memo.input))
                    }
                    _label = 3
                }
                // AND 3
                3 -> {
                    val _r3_2 = _memo.results.pop()
                    val _r3_1 = _memo.results.pop()

                    if (_r3_1 != null && _r3_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i3, _index.element, _memo.input, (_r3_1.results + _r3_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i3
                    }

                    // AND shortcut 2
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 2
                        continue
                    }

                    // STAR 27
                    _start_i27 = _index.element
                    _label = 27
                }
                // STAR 27
                27 -> {
                    // CALLORVAR NL
                    var _r28: _KotlinParser_Item? = null
                    _r28 = _MemoCall(_memo, "NL", _index.element, ::NL, null)
                    if (_r28 != null) _index.element = _r28.nextIndex

                    // STAR 27
                    val _r27 = _memo.results.pop()
                    if (_r27 != null) {
                        _res27 += _r27.results
                        _label = 27
                        continue
                    } else {
                        _memo.results.push(_KotlinParser_Item(_start_i27, _index.element, _memo.input, _res27.filterNotNull(), true))
                    }

                    _label = 2
                }
                // AND 2
                2 -> {
                    val _r2_2 = _memo.results.pop()
                    val _r2_1 = _memo.results.pop()

                    if (_r2_1 != null && _r2_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i2, _index.element, _memo.input, (_r2_1.results + _r2_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i2
                    }

                    // AND shortcut 1
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 1
                        continue
                    }

                    // CALLORVAR RPAREN
                    var _r29: _KotlinParser_Item? = null
                    _r29 = _MemoCall(_memo, "RPAREN", _index.element, ::RPAREN, null)
                    if (_r29 != null) _index.element = _r29.nextIndex

                    _label = 1
                }
                // AND 1
                1 -> {
                    val _r1_2 = _memo.results.pop()
                    val _r1_1 = _memo.results.pop()

                    if (_r1_1 != null && _r1_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i1, _index.element, _memo.input, (_r1_1.results + _r1_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i1
                    }

                    // ACT 0
                    val _r0 = _memo.results.peek()
                    if (_r0 != null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_r0.startIndex, _r0.nextIndex, _memo.input, _Thunk({ it.l }, _r0), true))
                    }

                    break
                }
            }
        }
    }


    open fun functionValueParameter(_memo: _KotlinParser_Memo, __index: Int, _args: _KotlinParser_Args?) {
        val _index = Ref.IntRef()
        _index.element = __index

        val _arg_index = Ref.IntRef()
        val _arg_input_index = Ref.IntRef()

        var mods: _KotlinParser_Item? = null
        var param: _KotlinParser_Item? = null
        var expr: _KotlinParser_Item? = null

        // AND 1
        var _start_i1 = _index.element

        // AND 2
        var _start_i2 = _index.element

        // AND 9
        var _start_i9 = _index.element

        // AND 10
        var _start_i10 = _index.element

        // AND 11
        var _start_i11 = _index.element

        // STAR 12
        var _start_i12 = _index.element
        val _inp12 = arrayListOf<Token?>()
        val _res12 = arrayListOf<AST.AstNode?>()

        // STAR 15
        var _start_i15 = _index.element
        val _inp15 = arrayListOf<Token?>()
        val _res15 = arrayListOf<AST.AstNode?>()

        var _label = -1
        while(true) {
            when(_label) {
                -1 -> {
                    // AND 1
                    _start_i1 = _index.element

                    // AND 2
                    _start_i2 = _index.element

                    // CALLORVAR parameterModifiers
                    var _r5: _KotlinParser_Item? = null
                    _r5 = _MemoCall(_memo, "parameterModifiers", _index.element, ::parameterModifiers, null)
                    if (_r5 != null) _index.element = _r5.nextIndex

                    // QUES 4
                    if (_memo.results.peek() == null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_index.element, _memo.input))
                    }
                    // BIND mods
                    mods = _memo.results.peek()

                    // AND shortcut 2
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 2
                        continue
                    }

                    // CALLORVAR parameter
                    var _r7: _KotlinParser_Item? = null
                    _r7 = _MemoCall(_memo, "parameter", _index.element, ::parameter, null)
                    if (_r7 != null) _index.element = _r7.nextIndex

                    // BIND param
                    param = _memo.results.peek()

                    _label = 2
                }
                // AND 2
                2 -> {
                    val _r2_2 = _memo.results.pop()
                    val _r2_1 = _memo.results.pop()

                    if (_r2_1 != null && _r2_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i2, _index.element, _memo.input, (_r2_1.results + _r2_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i2
                    }

                    // AND shortcut 1
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 1
                        continue
                    }

                    // AND 9
                    _start_i9 = _index.element

                    // AND 10
                    _start_i10 = _index.element

                    // AND 11
                    _start_i11 = _index.element

                    // STAR 12
                    _start_i12 = _index.element
                    _label = 12
                }
                // STAR 12
                12 -> {
                    // CALLORVAR NL
                    var _r13: _KotlinParser_Item? = null
                    _r13 = _MemoCall(_memo, "NL", _index.element, ::NL, null)
                    if (_r13 != null) _index.element = _r13.nextIndex

                    // STAR 12
                    val _r12 = _memo.results.pop()
                    if (_r12 != null) {
                        _res12 += _r12.results
                        _label = 12
                        continue
                    } else {
                        _memo.results.push(_KotlinParser_Item(_start_i12, _index.element, _memo.input, _res12.filterNotNull(), true))
                    }

                    // AND shortcut 11
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 11
                        continue
                    }

                    // CALLORVAR ASSIGNMENT
                    var _r14: _KotlinParser_Item? = null
                    _r14 = _MemoCall(_memo, "ASSIGNMENT", _index.element, ::ASSIGNMENT, null)
                    if (_r14 != null) _index.element = _r14.nextIndex

                    _label = 11
                }
                // AND 11
                11 -> {
                    val _r11_2 = _memo.results.pop()
                    val _r11_1 = _memo.results.pop()

                    if (_r11_1 != null && _r11_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i11, _index.element, _memo.input, (_r11_1.results + _r11_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i11
                    }

                    // AND shortcut 10
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 10
                        continue
                    }

                    // STAR 15
                    _start_i15 = _index.element
                    _label = 15
                }
                // STAR 15
                15 -> {
                    // CALLORVAR NL
                    var _r16: _KotlinParser_Item? = null
                    _r16 = _MemoCall(_memo, "NL", _index.element, ::NL, null)
                    if (_r16 != null) _index.element = _r16.nextIndex

                    // STAR 15
                    val _r15 = _memo.results.pop()
                    if (_r15 != null) {
                        _res15 += _r15.results
                        _label = 15
                        continue
                    } else {
                        _memo.results.push(_KotlinParser_Item(_start_i15, _index.element, _memo.input, _res15.filterNotNull(), true))
                    }

                    _label = 10
                }
                // AND 10
                10 -> {
                    val _r10_2 = _memo.results.pop()
                    val _r10_1 = _memo.results.pop()

                    if (_r10_1 != null && _r10_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i10, _index.element, _memo.input, (_r10_1.results + _r10_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i10
                    }

                    // AND shortcut 9
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 9
                        continue
                    }

                    // CALLORVAR expression
                    var _r18: _KotlinParser_Item? = null
                    _r18 = _MemoCall(_memo, "expression", _index.element, ::expression, null)
                    if (_r18 != null) _index.element = _r18.nextIndex

                    // BIND expr
                    expr = _memo.results.peek()

                    _label = 9
                }
                // AND 9
                9 -> {
                    val _r9_2 = _memo.results.pop()
                    val _r9_1 = _memo.results.pop()

                    if (_r9_1 != null && _r9_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i9, _index.element, _memo.input, (_r9_1.results + _r9_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i9
                    }

                    // QUES 8
                    if (_memo.results.peek() == null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_index.element, _memo.input))
                    }
                    _label = 1
                }
                // AND 1
                1 -> {
                    val _r1_2 = _memo.results.pop()
                    val _r1_1 = _memo.results.pop()

                    if (_r1_1 != null && _r1_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i1, _index.element, _memo.input, (_r1_1.results + _r1_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i1
                    }

                    // ACT 0
                    val _r0 = _memo.results.peek()
                    if (_r0 != null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_r0.startIndex, _r0.nextIndex, _memo.input, _Thunk({ val (name, type) = param.r as AST.NameAndType
                                AST.ValueParameter(mods.l, name!!, type!!, expr.nr) }, _r0), true))
                    }

                    break
                }
            }
        }
    }


    open fun functionDeclaration(_memo: _KotlinParser_Memo, __index: Int, _args: _KotlinParser_Args?) {
        val _index = Ref.IntRef()
        _index.element = __index

        val _arg_index = Ref.IntRef()
        val _arg_input_index = Ref.IntRef()

        var mods: _KotlinParser_Item? = null
        var tp: _KotlinParser_Item? = null
        var rt: _KotlinParser_Item? = null
        var name: _KotlinParser_Item? = null
        var params: _KotlinParser_Item? = null
        var t: _KotlinParser_Item? = null
        var tcs: _KotlinParser_Item? = null
        var b: _KotlinParser_Item? = null

        // AND 1
        var _start_i1 = _index.element

        // AND 2
        var _start_i2 = _index.element

        // AND 3
        var _start_i3 = _index.element

        // AND 4
        var _start_i4 = _index.element

        // AND 5
        var _start_i5 = _index.element

        // AND 6
        var _start_i6 = _index.element

        // AND 7
        var _start_i7 = _index.element

        // AND 8
        var _start_i8 = _index.element

        // AND 9
        var _start_i9 = _index.element

        // AND 10
        var _start_i10 = _index.element

        // AND 16
        var _start_i16 = _index.element

        // STAR 17
        var _start_i17 = _index.element
        val _inp17 = arrayListOf<Token?>()
        val _res17 = arrayListOf<AST.AstNode?>()

        // AND 23
        var _start_i23 = _index.element

        // AND 24
        var _start_i24 = _index.element

        // AND 25
        var _start_i25 = _index.element

        // STAR 26
        var _start_i26 = _index.element
        val _inp26 = arrayListOf<Token?>()
        val _res26 = arrayListOf<AST.AstNode?>()

        // STAR 29
        var _start_i29 = _index.element
        val _inp29 = arrayListOf<Token?>()
        val _res29 = arrayListOf<AST.AstNode?>()

        // STAR 32
        var _start_i32 = _index.element
        val _inp32 = arrayListOf<Token?>()
        val _res32 = arrayListOf<AST.AstNode?>()

        // STAR 36
        var _start_i36 = _index.element
        val _inp36 = arrayListOf<Token?>()
        val _res36 = arrayListOf<AST.AstNode?>()

        // AND 41
        var _start_i41 = _index.element

        // AND 42
        var _start_i42 = _index.element

        // AND 43
        var _start_i43 = _index.element

        // STAR 44
        var _start_i44 = _index.element
        val _inp44 = arrayListOf<Token?>()
        val _res44 = arrayListOf<AST.AstNode?>()

        // STAR 47
        var _start_i47 = _index.element
        val _inp47 = arrayListOf<Token?>()
        val _res47 = arrayListOf<AST.AstNode?>()

        // AND 52
        var _start_i52 = _index.element

        // STAR 53
        var _start_i53 = _index.element
        val _inp53 = arrayListOf<Token?>()
        val _res53 = arrayListOf<AST.AstNode?>()

        // AND 58
        var _start_i58 = _index.element

        // STAR 59
        var _start_i59 = _index.element
        val _inp59 = arrayListOf<Token?>()
        val _res59 = arrayListOf<AST.AstNode?>()

        var _label = -1
        while(true) {
            when(_label) {
                -1 -> {
                    // AND 1
                    _start_i1 = _index.element

                    // AND 2
                    _start_i2 = _index.element

                    // AND 3
                    _start_i3 = _index.element

                    // AND 4
                    _start_i4 = _index.element

                    // AND 5
                    _start_i5 = _index.element

                    // AND 6
                    _start_i6 = _index.element

                    // AND 7
                    _start_i7 = _index.element

                    // AND 8
                    _start_i8 = _index.element

                    // AND 9
                    _start_i9 = _index.element

                    // AND 10
                    _start_i10 = _index.element

                    // CALLORVAR modifiers
                    var _r13: _KotlinParser_Item? = null
                    _r13 = _MemoCall(_memo, "modifiers", _index.element, ::modifiers, null)
                    if (_r13 != null) _index.element = _r13.nextIndex

                    // QUES 12
                    if (_memo.results.peek() == null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_index.element, _memo.input))
                    }
                    // BIND mods
                    mods = _memo.results.peek()

                    // AND shortcut 10
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 10
                        continue
                    }

                    // CALLORVAR FUN
                    var _r14: _KotlinParser_Item? = null
                    _r14 = _MemoCall(_memo, "FUN", _index.element, ::FUN, null)
                    if (_r14 != null) _index.element = _r14.nextIndex

                    _label = 10
                }
                // AND 10
                10 -> {
                    val _r10_2 = _memo.results.pop()
                    val _r10_1 = _memo.results.pop()

                    if (_r10_1 != null && _r10_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i10, _index.element, _memo.input, (_r10_1.results + _r10_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i10
                    }

                    // AND shortcut 9
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 9
                        continue
                    }

                    // AND 16
                    _start_i16 = _index.element

                    // STAR 17
                    _start_i17 = _index.element
                    _label = 17
                }
                // STAR 17
                17 -> {
                    // CALLORVAR NL
                    var _r18: _KotlinParser_Item? = null
                    _r18 = _MemoCall(_memo, "NL", _index.element, ::NL, null)
                    if (_r18 != null) _index.element = _r18.nextIndex

                    // STAR 17
                    val _r17 = _memo.results.pop()
                    if (_r17 != null) {
                        _res17 += _r17.results
                        _label = 17
                        continue
                    } else {
                        _memo.results.push(_KotlinParser_Item(_start_i17, _index.element, _memo.input, _res17.filterNotNull(), true))
                    }

                    // AND shortcut 16
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 16
                        continue
                    }

                    // CALLORVAR typeParameters
                    var _r20: _KotlinParser_Item? = null
                    _r20 = _MemoCall(_memo, "typeParameters", _index.element, ::typeParameters, null)
                    if (_r20 != null) _index.element = _r20.nextIndex

                    // BIND tp
                    tp = _memo.results.peek()

                    _label = 16
                }
                // AND 16
                16 -> {
                    val _r16_2 = _memo.results.pop()
                    val _r16_1 = _memo.results.pop()

                    if (_r16_1 != null && _r16_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i16, _index.element, _memo.input, (_r16_1.results + _r16_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i16
                    }

                    // QUES 15
                    if (_memo.results.peek() == null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_index.element, _memo.input))
                    }
                    _label = 9
                }
                // AND 9
                9 -> {
                    val _r9_2 = _memo.results.pop()
                    val _r9_1 = _memo.results.pop()

                    if (_r9_1 != null && _r9_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i9, _index.element, _memo.input, (_r9_1.results + _r9_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i9
                    }

                    // AND shortcut 8
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 8
                        continue
                    }

                    // AND 23
                    _start_i23 = _index.element

                    // AND 24
                    _start_i24 = _index.element

                    // AND 25
                    _start_i25 = _index.element

                    // STAR 26
                    _start_i26 = _index.element
                    _label = 26
                }
                // STAR 26
                26 -> {
                    // CALLORVAR NL
                    var _r27: _KotlinParser_Item? = null
                    _r27 = _MemoCall(_memo, "NL", _index.element, ::NL, null)
                    if (_r27 != null) _index.element = _r27.nextIndex

                    // STAR 26
                    val _r26 = _memo.results.pop()
                    if (_r26 != null) {
                        _res26 += _r26.results
                        _label = 26
                        continue
                    } else {
                        _memo.results.push(_KotlinParser_Item(_start_i26, _index.element, _memo.input, _res26.filterNotNull(), true))
                    }

                    // AND shortcut 25
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 25
                        continue
                    }

                    // CALLORVAR receiverType
                    var _r28: _KotlinParser_Item? = null
                    _r28 = _MemoCall(_memo, "receiverType", _index.element, ::receiverType, null)
                    if (_r28 != null) _index.element = _r28.nextIndex

                    _label = 25
                }
                // AND 25
                25 -> {
                    val _r25_2 = _memo.results.pop()
                    val _r25_1 = _memo.results.pop()

                    if (_r25_1 != null && _r25_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i25, _index.element, _memo.input, (_r25_1.results + _r25_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i25
                    }

                    // AND shortcut 24
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 24
                        continue
                    }

                    // STAR 29
                    _start_i29 = _index.element
                    _label = 29
                }
                // STAR 29
                29 -> {
                    // CALLORVAR NL
                    var _r30: _KotlinParser_Item? = null
                    _r30 = _MemoCall(_memo, "NL", _index.element, ::NL, null)
                    if (_r30 != null) _index.element = _r30.nextIndex

                    // STAR 29
                    val _r29 = _memo.results.pop()
                    if (_r29 != null) {
                        _res29 += _r29.results
                        _label = 29
                        continue
                    } else {
                        _memo.results.push(_KotlinParser_Item(_start_i29, _index.element, _memo.input, _res29.filterNotNull(), true))
                    }

                    _label = 24
                }
                // AND 24
                24 -> {
                    val _r24_2 = _memo.results.pop()
                    val _r24_1 = _memo.results.pop()

                    if (_r24_1 != null && _r24_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i24, _index.element, _memo.input, (_r24_1.results + _r24_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i24
                    }

                    // AND shortcut 23
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 23
                        continue
                    }

                    // CALLORVAR DOT
                    var _r31: _KotlinParser_Item? = null
                    _r31 = _MemoCall(_memo, "DOT", _index.element, ::DOT, null)
                    if (_r31 != null) _index.element = _r31.nextIndex

                    _label = 23
                }
                // AND 23
                23 -> {
                    val _r23_2 = _memo.results.pop()
                    val _r23_1 = _memo.results.pop()

                    if (_r23_1 != null && _r23_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i23, _index.element, _memo.input, (_r23_1.results + _r23_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i23
                    }

                    // QUES 22
                    if (_memo.results.peek() == null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_index.element, _memo.input))
                    }
                    // BIND rt
                    rt = _memo.results.peek()

                    _label = 8
                }
                // AND 8
                8 -> {
                    val _r8_2 = _memo.results.pop()
                    val _r8_1 = _memo.results.pop()

                    if (_r8_1 != null && _r8_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i8, _index.element, _memo.input, (_r8_1.results + _r8_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i8
                    }

                    // AND shortcut 7
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 7
                        continue
                    }

                    // STAR 32
                    _start_i32 = _index.element
                    _label = 32
                }
                // STAR 32
                32 -> {
                    // CALLORVAR NL
                    var _r33: _KotlinParser_Item? = null
                    _r33 = _MemoCall(_memo, "NL", _index.element, ::NL, null)
                    if (_r33 != null) _index.element = _r33.nextIndex

                    // STAR 32
                    val _r32 = _memo.results.pop()
                    if (_r32 != null) {
                        _res32 += _r32.results
                        _label = 32
                        continue
                    } else {
                        _memo.results.push(_KotlinParser_Item(_start_i32, _index.element, _memo.input, _res32.filterNotNull(), true))
                    }

                    _label = 7
                }
                // AND 7
                7 -> {
                    val _r7_2 = _memo.results.pop()
                    val _r7_1 = _memo.results.pop()

                    if (_r7_1 != null && _r7_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i7, _index.element, _memo.input, (_r7_1.results + _r7_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i7
                    }

                    // AND shortcut 6
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 6
                        continue
                    }

                    // CALLORVAR simpleIdentifier
                    var _r35: _KotlinParser_Item? = null
                    _r35 = _MemoCall(_memo, "simpleIdentifier", _index.element, ::simpleIdentifier, null)
                    if (_r35 != null) _index.element = _r35.nextIndex

                    // BIND name
                    name = _memo.results.peek()

                    _label = 6
                }
                // AND 6
                6 -> {
                    val _r6_2 = _memo.results.pop()
                    val _r6_1 = _memo.results.pop()

                    if (_r6_1 != null && _r6_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i6, _index.element, _memo.input, (_r6_1.results + _r6_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i6
                    }

                    // AND shortcut 5
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 5
                        continue
                    }

                    // STAR 36
                    _start_i36 = _index.element
                    _label = 36
                }
                // STAR 36
                36 -> {
                    // CALLORVAR NL
                    var _r37: _KotlinParser_Item? = null
                    _r37 = _MemoCall(_memo, "NL", _index.element, ::NL, null)
                    if (_r37 != null) _index.element = _r37.nextIndex

                    // STAR 36
                    val _r36 = _memo.results.pop()
                    if (_r36 != null) {
                        _res36 += _r36.results
                        _label = 36
                        continue
                    } else {
                        _memo.results.push(_KotlinParser_Item(_start_i36, _index.element, _memo.input, _res36.filterNotNull(), true))
                    }

                    _label = 5
                }
                // AND 5
                5 -> {
                    val _r5_2 = _memo.results.pop()
                    val _r5_1 = _memo.results.pop()

                    if (_r5_1 != null && _r5_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i5, _index.element, _memo.input, (_r5_1.results + _r5_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i5
                    }

                    // AND shortcut 4
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 4
                        continue
                    }

                    // CALLORVAR functionValueParameters
                    var _r39: _KotlinParser_Item? = null
                    _r39 = _MemoCall(_memo, "functionValueParameters", _index.element, ::functionValueParameters, null)
                    if (_r39 != null) _index.element = _r39.nextIndex

                    // BIND params
                    params = _memo.results.peek()

                    _label = 4
                }
                // AND 4
                4 -> {
                    val _r4_2 = _memo.results.pop()
                    val _r4_1 = _memo.results.pop()

                    if (_r4_1 != null && _r4_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i4, _index.element, _memo.input, (_r4_1.results + _r4_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i4
                    }

                    // AND shortcut 3
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 3
                        continue
                    }

                    // AND 41
                    _start_i41 = _index.element

                    // AND 42
                    _start_i42 = _index.element

                    // AND 43
                    _start_i43 = _index.element

                    // STAR 44
                    _start_i44 = _index.element
                    _label = 44
                }
                // STAR 44
                44 -> {
                    // CALLORVAR NL
                    var _r45: _KotlinParser_Item? = null
                    _r45 = _MemoCall(_memo, "NL", _index.element, ::NL, null)
                    if (_r45 != null) _index.element = _r45.nextIndex

                    // STAR 44
                    val _r44 = _memo.results.pop()
                    if (_r44 != null) {
                        _res44 += _r44.results
                        _label = 44
                        continue
                    } else {
                        _memo.results.push(_KotlinParser_Item(_start_i44, _index.element, _memo.input, _res44.filterNotNull(), true))
                    }

                    // AND shortcut 43
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 43
                        continue
                    }

                    // CALLORVAR COLON
                    var _r46: _KotlinParser_Item? = null
                    _r46 = _MemoCall(_memo, "COLON", _index.element, ::COLON, null)
                    if (_r46 != null) _index.element = _r46.nextIndex

                    _label = 43
                }
                // AND 43
                43 -> {
                    val _r43_2 = _memo.results.pop()
                    val _r43_1 = _memo.results.pop()

                    if (_r43_1 != null && _r43_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i43, _index.element, _memo.input, (_r43_1.results + _r43_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i43
                    }

                    // AND shortcut 42
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 42
                        continue
                    }

                    // STAR 47
                    _start_i47 = _index.element
                    _label = 47
                }
                // STAR 47
                47 -> {
                    // CALLORVAR NL
                    var _r48: _KotlinParser_Item? = null
                    _r48 = _MemoCall(_memo, "NL", _index.element, ::NL, null)
                    if (_r48 != null) _index.element = _r48.nextIndex

                    // STAR 47
                    val _r47 = _memo.results.pop()
                    if (_r47 != null) {
                        _res47 += _r47.results
                        _label = 47
                        continue
                    } else {
                        _memo.results.push(_KotlinParser_Item(_start_i47, _index.element, _memo.input, _res47.filterNotNull(), true))
                    }

                    _label = 42
                }
                // AND 42
                42 -> {
                    val _r42_2 = _memo.results.pop()
                    val _r42_1 = _memo.results.pop()

                    if (_r42_1 != null && _r42_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i42, _index.element, _memo.input, (_r42_1.results + _r42_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i42
                    }

                    // AND shortcut 41
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 41
                        continue
                    }

                    // CALLORVAR type
                    var _r50: _KotlinParser_Item? = null
                    _r50 = _MemoCall(_memo, "type", _index.element, ::type, null)
                    if (_r50 != null) _index.element = _r50.nextIndex

                    // BIND t
                    t = _memo.results.peek()

                    _label = 41
                }
                // AND 41
                41 -> {
                    val _r41_2 = _memo.results.pop()
                    val _r41_1 = _memo.results.pop()

                    if (_r41_1 != null && _r41_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i41, _index.element, _memo.input, (_r41_1.results + _r41_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i41
                    }

                    // QUES 40
                    if (_memo.results.peek() == null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_index.element, _memo.input))
                    }
                    _label = 3
                }
                // AND 3
                3 -> {
                    val _r3_2 = _memo.results.pop()
                    val _r3_1 = _memo.results.pop()

                    if (_r3_1 != null && _r3_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i3, _index.element, _memo.input, (_r3_1.results + _r3_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i3
                    }

                    // AND shortcut 2
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 2
                        continue
                    }

                    // AND 52
                    _start_i52 = _index.element

                    // STAR 53
                    _start_i53 = _index.element
                    _label = 53
                }
                // STAR 53
                53 -> {
                    // CALLORVAR NL
                    var _r54: _KotlinParser_Item? = null
                    _r54 = _MemoCall(_memo, "NL", _index.element, ::NL, null)
                    if (_r54 != null) _index.element = _r54.nextIndex

                    // STAR 53
                    val _r53 = _memo.results.pop()
                    if (_r53 != null) {
                        _res53 += _r53.results
                        _label = 53
                        continue
                    } else {
                        _memo.results.push(_KotlinParser_Item(_start_i53, _index.element, _memo.input, _res53.filterNotNull(), true))
                    }

                    // AND shortcut 52
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 52
                        continue
                    }

                    // CALLORVAR typeConstraints
                    var _r56: _KotlinParser_Item? = null
                    _r56 = _MemoCall(_memo, "typeConstraints", _index.element, ::typeConstraints, null)
                    if (_r56 != null) _index.element = _r56.nextIndex

                    // BIND tcs
                    tcs = _memo.results.peek()

                    _label = 52
                }
                // AND 52
                52 -> {
                    val _r52_2 = _memo.results.pop()
                    val _r52_1 = _memo.results.pop()

                    if (_r52_1 != null && _r52_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i52, _index.element, _memo.input, (_r52_1.results + _r52_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i52
                    }

                    // QUES 51
                    if (_memo.results.peek() == null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_index.element, _memo.input))
                    }
                    _label = 2
                }
                // AND 2
                2 -> {
                    val _r2_2 = _memo.results.pop()
                    val _r2_1 = _memo.results.pop()

                    if (_r2_1 != null && _r2_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i2, _index.element, _memo.input, (_r2_1.results + _r2_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i2
                    }

                    // AND shortcut 1
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 1
                        continue
                    }

                    // AND 58
                    _start_i58 = _index.element

                    // STAR 59
                    _start_i59 = _index.element
                    _label = 59
                }
                // STAR 59
                59 -> {
                    // CALLORVAR NL
                    var _r60: _KotlinParser_Item? = null
                    _r60 = _MemoCall(_memo, "NL", _index.element, ::NL, null)
                    if (_r60 != null) _index.element = _r60.nextIndex

                    // STAR 59
                    val _r59 = _memo.results.pop()
                    if (_r59 != null) {
                        _res59 += _r59.results
                        _label = 59
                        continue
                    } else {
                        _memo.results.push(_KotlinParser_Item(_start_i59, _index.element, _memo.input, _res59.filterNotNull(), true))
                    }

                    // AND shortcut 58
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 58
                        continue
                    }

                    // CALLORVAR functionBody
                    var _r62: _KotlinParser_Item? = null
                    _r62 = _MemoCall(_memo, "functionBody", _index.element, ::functionBody, null)
                    if (_r62 != null) _index.element = _r62.nextIndex

                    // BIND b
                    b = _memo.results.peek()

                    _label = 58
                }
                // AND 58
                58 -> {
                    val _r58_2 = _memo.results.pop()
                    val _r58_1 = _memo.results.pop()

                    if (_r58_1 != null && _r58_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i58, _index.element, _memo.input, (_r58_1.results + _r58_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i58
                    }

                    // QUES 57
                    if (_memo.results.peek() == null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_index.element, _memo.input))
                    }
                    _label = 1
                }
                // AND 1
                1 -> {
                    val _r1_2 = _memo.results.pop()
                    val _r1_1 = _memo.results.pop()

                    if (_r1_1 != null && _r1_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i1, _index.element, _memo.input, (_r1_1.results + _r1_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i1
                    }

                    // ACT 0
                    val _r0 = _memo.results.peek()
                    if (_r0 != null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_r0.startIndex, _r0.nextIndex, _memo.input, _Thunk({ AST.FunctionDeclaration(mods.l, tp.l, rt.nr, name.s, params.l, t.nr, tcs.l, b.nr) }, _r0), true))
                    }

                    break
                }
            }
        }
    }


    open fun functionBody(_memo: _KotlinParser_Memo, __index: Int, _args: _KotlinParser_Args?) {
        val _index = Ref.IntRef()
        _index.element = __index

        val _arg_index = Ref.IntRef()
        val _arg_input_index = Ref.IntRef()

        // OR 0
        var _start_i0 = _index.element

        var _label = -1
        while(true) {
            when(_label) {
                -1 -> {
                    // OR 0
                    _start_i0 = _index.element

                    // CALLORVAR blockBody
                    var _r1: _KotlinParser_Item? = null
                    _r1 = _MemoCall(_memo, "blockBody", _index.element, ::blockBody, null)
                    if (_r1 != null) _index.element = _r1.nextIndex

                    // OR shortcut 0
                    if (_memo.results.peek() == null) {
                        _memo.results.pop()
                        _index.element = _start_i0
                    } else {
                        _label = 0
                        continue
                    }

                    // CALLORVAR expressionBody
                    var _r2: _KotlinParser_Item? = null
                    _r2 = _MemoCall(_memo, "expressionBody", _index.element, ::expressionBody, null)
                    if (_r2 != null) _index.element = _r2.nextIndex

                    _label = 0
                }
                // OR 0
                0 -> {
                    break
                }
            }
        }
    }


    open fun blockBody(_memo: _KotlinParser_Memo, __index: Int, _args: _KotlinParser_Args?) {
        val _index = Ref.IntRef()
        _index.element = __index

        val _arg_index = Ref.IntRef()
        val _arg_input_index = Ref.IntRef()

        var _label = -1
        while(true) {
            when(_label) {
                -1 -> {
                    // CALLORVAR block
                    var _r1: _KotlinParser_Item? = null
                    _r1 = _MemoCall(_memo, "block", _index.element, ::block, null)
                    if (_r1 != null) _index.element = _r1.nextIndex

                    // ACT 0
                    val _r0 = _memo.results.peek()
                    if (_r0 != null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_r0.startIndex, _r0.nextIndex, _memo.input, _Thunk({ AST.BlockBody(it.r) }, _r0), true))
                    }

                    break
                }
            }
        }
    }


    open fun expressionBody(_memo: _KotlinParser_Memo, __index: Int, _args: _KotlinParser_Args?) {
        val _index = Ref.IntRef()
        _index.element = __index

        val _arg_index = Ref.IntRef()
        val _arg_input_index = Ref.IntRef()

        var expr: _KotlinParser_Item? = null

        // AND 1
        var _start_i1 = _index.element

        // AND 2
        var _start_i2 = _index.element

        // STAR 4
        var _start_i4 = _index.element
        val _inp4 = arrayListOf<Token?>()
        val _res4 = arrayListOf<AST.AstNode?>()

        var _label = -1
        while(true) {
            when(_label) {
                -1 -> {
                    // AND 1
                    _start_i1 = _index.element

                    // AND 2
                    _start_i2 = _index.element

                    // CALLORVAR ASSIGNMENT
                    var _r3: _KotlinParser_Item? = null
                    _r3 = _MemoCall(_memo, "ASSIGNMENT", _index.element, ::ASSIGNMENT, null)
                    if (_r3 != null) _index.element = _r3.nextIndex

                    // AND shortcut 2
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 2
                        continue
                    }

                    // STAR 4
                    _start_i4 = _index.element
                    _label = 4
                }
                // STAR 4
                4 -> {
                    // CALLORVAR NL
                    var _r5: _KotlinParser_Item? = null
                    _r5 = _MemoCall(_memo, "NL", _index.element, ::NL, null)
                    if (_r5 != null) _index.element = _r5.nextIndex

                    // STAR 4
                    val _r4 = _memo.results.pop()
                    if (_r4 != null) {
                        _res4 += _r4.results
                        _label = 4
                        continue
                    } else {
                        _memo.results.push(_KotlinParser_Item(_start_i4, _index.element, _memo.input, _res4.filterNotNull(), true))
                    }

                    _label = 2
                }
                // AND 2
                2 -> {
                    val _r2_2 = _memo.results.pop()
                    val _r2_1 = _memo.results.pop()

                    if (_r2_1 != null && _r2_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i2, _index.element, _memo.input, (_r2_1.results + _r2_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i2
                    }

                    // AND shortcut 1
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 1
                        continue
                    }

                    // CALLORVAR expression
                    var _r7: _KotlinParser_Item? = null
                    _r7 = _MemoCall(_memo, "expression", _index.element, ::expression, null)
                    if (_r7 != null) _index.element = _r7.nextIndex

                    // BIND expr
                    expr = _memo.results.peek()

                    _label = 1
                }
                // AND 1
                1 -> {
                    val _r1_2 = _memo.results.pop()
                    val _r1_1 = _memo.results.pop()

                    if (_r1_1 != null && _r1_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i1, _index.element, _memo.input, (_r1_1.results + _r1_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i1
                    }

                    // ACT 0
                    val _r0 = _memo.results.peek()
                    if (_r0 != null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_r0.startIndex, _r0.nextIndex, _memo.input, _Thunk({ AST.ExpressionBody(expr.r) }, _r0), true))
                    }

                    break
                }
            }
        }
    }


    open fun variableDeclaration(_memo: _KotlinParser_Memo, __index: Int, _args: _KotlinParser_Args?) {
        val _index = Ref.IntRef()
        _index.element = __index

        val _arg_index = Ref.IntRef()
        val _arg_input_index = Ref.IntRef()

        var anns: _KotlinParser_Item? = null
        var name: _KotlinParser_Item? = null
        var t: _KotlinParser_Item? = null

        // AND 1
        var _start_i1 = _index.element

        // AND 2
        var _start_i2 = _index.element

        // AND 3
        var _start_i3 = _index.element

        // STAR 5
        var _start_i5 = _index.element
        val _inp5 = arrayListOf<Token?>()
        val _res5 = arrayListOf<AST.AstNode?>()

        // STAR 7
        var _start_i7 = _index.element
        val _inp7 = arrayListOf<Token?>()
        val _res7 = arrayListOf<AST.AstNode?>()

        // AND 12
        var _start_i12 = _index.element

        // AND 13
        var _start_i13 = _index.element

        // AND 14
        var _start_i14 = _index.element

        // STAR 15
        var _start_i15 = _index.element
        val _inp15 = arrayListOf<Token?>()
        val _res15 = arrayListOf<AST.AstNode?>()

        // STAR 18
        var _start_i18 = _index.element
        val _inp18 = arrayListOf<Token?>()
        val _res18 = arrayListOf<AST.AstNode?>()

        var _label = -1
        while(true) {
            when(_label) {
                -1 -> {
                    // AND 1
                    _start_i1 = _index.element

                    // AND 2
                    _start_i2 = _index.element

                    // AND 3
                    _start_i3 = _index.element

                    // STAR 5
                    _start_i5 = _index.element
                    _label = 5
                }
                // STAR 5
                5 -> {
                    // CALLORVAR annotation
                    var _r6: _KotlinParser_Item? = null
                    _r6 = _MemoCall(_memo, "annotation", _index.element, ::annotation, null)
                    if (_r6 != null) _index.element = _r6.nextIndex

                    // STAR 5
                    val _r5 = _memo.results.pop()
                    if (_r5 != null) {
                        _res5 += _r5.results
                        _label = 5
                        continue
                    } else {
                        _memo.results.push(_KotlinParser_Item(_start_i5, _index.element, _memo.input, _res5.filterNotNull(), true))
                    }

                    // BIND anns
                    anns = _memo.results.peek()

                    // AND shortcut 3
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 3
                        continue
                    }

                    // STAR 7
                    _start_i7 = _index.element
                    _label = 7
                }
                // STAR 7
                7 -> {
                    // CALLORVAR NL
                    var _r8: _KotlinParser_Item? = null
                    _r8 = _MemoCall(_memo, "NL", _index.element, ::NL, null)
                    if (_r8 != null) _index.element = _r8.nextIndex

                    // STAR 7
                    val _r7 = _memo.results.pop()
                    if (_r7 != null) {
                        _res7 += _r7.results
                        _label = 7
                        continue
                    } else {
                        _memo.results.push(_KotlinParser_Item(_start_i7, _index.element, _memo.input, _res7.filterNotNull(), true))
                    }

                    _label = 3
                }
                // AND 3
                3 -> {
                    val _r3_2 = _memo.results.pop()
                    val _r3_1 = _memo.results.pop()

                    if (_r3_1 != null && _r3_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i3, _index.element, _memo.input, (_r3_1.results + _r3_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i3
                    }

                    // AND shortcut 2
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 2
                        continue
                    }

                    // CALLORVAR simpleIdentifier
                    var _r10: _KotlinParser_Item? = null
                    _r10 = _MemoCall(_memo, "simpleIdentifier", _index.element, ::simpleIdentifier, null)
                    if (_r10 != null) _index.element = _r10.nextIndex

                    // BIND name
                    name = _memo.results.peek()

                    _label = 2
                }
                // AND 2
                2 -> {
                    val _r2_2 = _memo.results.pop()
                    val _r2_1 = _memo.results.pop()

                    if (_r2_1 != null && _r2_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i2, _index.element, _memo.input, (_r2_1.results + _r2_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i2
                    }

                    // AND shortcut 1
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 1
                        continue
                    }

                    // AND 12
                    _start_i12 = _index.element

                    // AND 13
                    _start_i13 = _index.element

                    // AND 14
                    _start_i14 = _index.element

                    // STAR 15
                    _start_i15 = _index.element
                    _label = 15
                }
                // STAR 15
                15 -> {
                    // CALLORVAR NL
                    var _r16: _KotlinParser_Item? = null
                    _r16 = _MemoCall(_memo, "NL", _index.element, ::NL, null)
                    if (_r16 != null) _index.element = _r16.nextIndex

                    // STAR 15
                    val _r15 = _memo.results.pop()
                    if (_r15 != null) {
                        _res15 += _r15.results
                        _label = 15
                        continue
                    } else {
                        _memo.results.push(_KotlinParser_Item(_start_i15, _index.element, _memo.input, _res15.filterNotNull(), true))
                    }

                    // AND shortcut 14
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 14
                        continue
                    }

                    // CALLORVAR COLON
                    var _r17: _KotlinParser_Item? = null
                    _r17 = _MemoCall(_memo, "COLON", _index.element, ::COLON, null)
                    if (_r17 != null) _index.element = _r17.nextIndex

                    _label = 14
                }
                // AND 14
                14 -> {
                    val _r14_2 = _memo.results.pop()
                    val _r14_1 = _memo.results.pop()

                    if (_r14_1 != null && _r14_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i14, _index.element, _memo.input, (_r14_1.results + _r14_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i14
                    }

                    // AND shortcut 13
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 13
                        continue
                    }

                    // STAR 18
                    _start_i18 = _index.element
                    _label = 18
                }
                // STAR 18
                18 -> {
                    // CALLORVAR NL
                    var _r19: _KotlinParser_Item? = null
                    _r19 = _MemoCall(_memo, "NL", _index.element, ::NL, null)
                    if (_r19 != null) _index.element = _r19.nextIndex

                    // STAR 18
                    val _r18 = _memo.results.pop()
                    if (_r18 != null) {
                        _res18 += _r18.results
                        _label = 18
                        continue
                    } else {
                        _memo.results.push(_KotlinParser_Item(_start_i18, _index.element, _memo.input, _res18.filterNotNull(), true))
                    }

                    _label = 13
                }
                // AND 13
                13 -> {
                    val _r13_2 = _memo.results.pop()
                    val _r13_1 = _memo.results.pop()

                    if (_r13_1 != null && _r13_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i13, _index.element, _memo.input, (_r13_1.results + _r13_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i13
                    }

                    // AND shortcut 12
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 12
                        continue
                    }

                    // CALLORVAR type
                    var _r21: _KotlinParser_Item? = null
                    _r21 = _MemoCall(_memo, "type", _index.element, ::type, null)
                    if (_r21 != null) _index.element = _r21.nextIndex

                    // BIND t
                    t = _memo.results.peek()

                    _label = 12
                }
                // AND 12
                12 -> {
                    val _r12_2 = _memo.results.pop()
                    val _r12_1 = _memo.results.pop()

                    if (_r12_1 != null && _r12_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i12, _index.element, _memo.input, (_r12_1.results + _r12_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i12
                    }

                    // QUES 11
                    if (_memo.results.peek() == null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_index.element, _memo.input))
                    }
                    _label = 1
                }
                // AND 1
                1 -> {
                    val _r1_2 = _memo.results.pop()
                    val _r1_1 = _memo.results.pop()

                    if (_r1_1 != null && _r1_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i1, _index.element, _memo.input, (_r1_1.results + _r1_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i1
                    }

                    // ACT 0
                    val _r0 = _memo.results.peek()
                    if (_r0 != null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_r0.startIndex, _r0.nextIndex, _memo.input, _Thunk({ AST.SingleVariableDeclaration(anns.l, name.s, t.nr) }, _r0), true))
                    }

                    break
                }
            }
        }
    }


    open fun multiVariableDeclaration(_memo: _KotlinParser_Memo, __index: Int, _args: _KotlinParser_Args?) {
        val _index = Ref.IntRef()
        _index.element = __index

        val _arg_index = Ref.IntRef()
        val _arg_input_index = Ref.IntRef()

        // AND 1
        var _start_i1 = _index.element

        // AND 2
        var _start_i2 = _index.element

        // AND 3
        var _start_i3 = _index.element

        // AND 4
        var _start_i4 = _index.element

        // AND 5
        var _start_i5 = _index.element

        // AND 6
        var _start_i6 = _index.element

        // STAR 8
        var _start_i8 = _index.element
        val _inp8 = arrayListOf<Token?>()
        val _res8 = arrayListOf<AST.AstNode?>()

        // STAR 11
        var _start_i11 = _index.element
        val _inp11 = arrayListOf<Token?>()
        val _res11 = arrayListOf<AST.AstNode?>()

        // AND 12
        var _start_i12 = _index.element

        // AND 13
        var _start_i13 = _index.element

        // AND 14
        var _start_i14 = _index.element

        // STAR 15
        var _start_i15 = _index.element
        val _inp15 = arrayListOf<Token?>()
        val _res15 = arrayListOf<AST.AstNode?>()

        // STAR 18
        var _start_i18 = _index.element
        val _inp18 = arrayListOf<Token?>()
        val _res18 = arrayListOf<AST.AstNode?>()

        // AND 22
        var _start_i22 = _index.element

        // STAR 23
        var _start_i23 = _index.element
        val _inp23 = arrayListOf<Token?>()
        val _res23 = arrayListOf<AST.AstNode?>()

        // STAR 26
        var _start_i26 = _index.element
        val _inp26 = arrayListOf<Token?>()
        val _res26 = arrayListOf<AST.AstNode?>()

        var _label = -1
        while(true) {
            when(_label) {
                -1 -> {
                    // AND 1
                    _start_i1 = _index.element

                    // AND 2
                    _start_i2 = _index.element

                    // AND 3
                    _start_i3 = _index.element

                    // AND 4
                    _start_i4 = _index.element

                    // AND 5
                    _start_i5 = _index.element

                    // AND 6
                    _start_i6 = _index.element

                    // CALLORVAR LPAREN
                    var _r7: _KotlinParser_Item? = null
                    _r7 = _MemoCall(_memo, "LPAREN", _index.element, ::LPAREN, null)
                    if (_r7 != null) _index.element = _r7.nextIndex

                    // AND shortcut 6
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 6
                        continue
                    }

                    // STAR 8
                    _start_i8 = _index.element
                    _label = 8
                }
                // STAR 8
                8 -> {
                    // CALLORVAR NL
                    var _r9: _KotlinParser_Item? = null
                    _r9 = _MemoCall(_memo, "NL", _index.element, ::NL, null)
                    if (_r9 != null) _index.element = _r9.nextIndex

                    // STAR 8
                    val _r8 = _memo.results.pop()
                    if (_r8 != null) {
                        _res8 += _r8.results
                        _label = 8
                        continue
                    } else {
                        _memo.results.push(_KotlinParser_Item(_start_i8, _index.element, _memo.input, _res8.filterNotNull(), true))
                    }

                    _label = 6
                }
                // AND 6
                6 -> {
                    val _r6_2 = _memo.results.pop()
                    val _r6_1 = _memo.results.pop()

                    if (_r6_1 != null && _r6_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i6, _index.element, _memo.input, (_r6_1.results + _r6_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i6
                    }

                    // AND shortcut 5
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 5
                        continue
                    }

                    // CALLORVAR variableDeclaration
                    var _r10: _KotlinParser_Item? = null
                    _r10 = _MemoCall(_memo, "variableDeclaration", _index.element, ::variableDeclaration, null)
                    if (_r10 != null) _index.element = _r10.nextIndex

                    _label = 5
                }
                // AND 5
                5 -> {
                    val _r5_2 = _memo.results.pop()
                    val _r5_1 = _memo.results.pop()

                    if (_r5_1 != null && _r5_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i5, _index.element, _memo.input, (_r5_1.results + _r5_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i5
                    }

                    // AND shortcut 4
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 4
                        continue
                    }

                    // STAR 11
                    _start_i11 = _index.element
                    _label = 11
                }
                // STAR 11
                11 -> {
                    // AND 12
                    _start_i12 = _index.element

                    // AND 13
                    _start_i13 = _index.element

                    // AND 14
                    _start_i14 = _index.element

                    // STAR 15
                    _start_i15 = _index.element
                    _label = 15
                }
                // STAR 15
                15 -> {
                    // CALLORVAR NL
                    var _r16: _KotlinParser_Item? = null
                    _r16 = _MemoCall(_memo, "NL", _index.element, ::NL, null)
                    if (_r16 != null) _index.element = _r16.nextIndex

                    // STAR 15
                    val _r15 = _memo.results.pop()
                    if (_r15 != null) {
                        _res15 += _r15.results
                        _label = 15
                        continue
                    } else {
                        _memo.results.push(_KotlinParser_Item(_start_i15, _index.element, _memo.input, _res15.filterNotNull(), true))
                    }

                    // AND shortcut 14
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 14
                        continue
                    }

                    // CALLORVAR COMMA
                    var _r17: _KotlinParser_Item? = null
                    _r17 = _MemoCall(_memo, "COMMA", _index.element, ::COMMA, null)
                    if (_r17 != null) _index.element = _r17.nextIndex

                    _label = 14
                }
                // AND 14
                14 -> {
                    val _r14_2 = _memo.results.pop()
                    val _r14_1 = _memo.results.pop()

                    if (_r14_1 != null && _r14_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i14, _index.element, _memo.input, (_r14_1.results + _r14_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i14
                    }

                    // AND shortcut 13
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 13
                        continue
                    }

                    // STAR 18
                    _start_i18 = _index.element
                    _label = 18
                }
                // STAR 18
                18 -> {
                    // CALLORVAR NL
                    var _r19: _KotlinParser_Item? = null
                    _r19 = _MemoCall(_memo, "NL", _index.element, ::NL, null)
                    if (_r19 != null) _index.element = _r19.nextIndex

                    // STAR 18
                    val _r18 = _memo.results.pop()
                    if (_r18 != null) {
                        _res18 += _r18.results
                        _label = 18
                        continue
                    } else {
                        _memo.results.push(_KotlinParser_Item(_start_i18, _index.element, _memo.input, _res18.filterNotNull(), true))
                    }

                    _label = 13
                }
                // AND 13
                13 -> {
                    val _r13_2 = _memo.results.pop()
                    val _r13_1 = _memo.results.pop()

                    if (_r13_1 != null && _r13_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i13, _index.element, _memo.input, (_r13_1.results + _r13_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i13
                    }

                    // AND shortcut 12
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 12
                        continue
                    }

                    // CALLORVAR variableDeclaration
                    var _r20: _KotlinParser_Item? = null
                    _r20 = _MemoCall(_memo, "variableDeclaration", _index.element, ::variableDeclaration, null)
                    if (_r20 != null) _index.element = _r20.nextIndex

                    _label = 12
                }
                // AND 12
                12 -> {
                    val _r12_2 = _memo.results.pop()
                    val _r12_1 = _memo.results.pop()

                    if (_r12_1 != null && _r12_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i12, _index.element, _memo.input, (_r12_1.results + _r12_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i12
                    }

                    // STAR 11
                    val _r11 = _memo.results.pop()
                    if (_r11 != null) {
                        _res11 += _r11.results
                        _label = 11
                        continue
                    } else {
                        _memo.results.push(_KotlinParser_Item(_start_i11, _index.element, _memo.input, _res11.filterNotNull(), true))
                    }

                    _label = 4
                }
                // AND 4
                4 -> {
                    val _r4_2 = _memo.results.pop()
                    val _r4_1 = _memo.results.pop()

                    if (_r4_1 != null && _r4_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i4, _index.element, _memo.input, (_r4_1.results + _r4_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i4
                    }

                    // AND shortcut 3
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 3
                        continue
                    }

                    // AND 22
                    _start_i22 = _index.element

                    // STAR 23
                    _start_i23 = _index.element
                    _label = 23
                }
                // STAR 23
                23 -> {
                    // CALLORVAR NL
                    var _r24: _KotlinParser_Item? = null
                    _r24 = _MemoCall(_memo, "NL", _index.element, ::NL, null)
                    if (_r24 != null) _index.element = _r24.nextIndex

                    // STAR 23
                    val _r23 = _memo.results.pop()
                    if (_r23 != null) {
                        _res23 += _r23.results
                        _label = 23
                        continue
                    } else {
                        _memo.results.push(_KotlinParser_Item(_start_i23, _index.element, _memo.input, _res23.filterNotNull(), true))
                    }

                    // AND shortcut 22
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 22
                        continue
                    }

                    // CALLORVAR COMMA
                    var _r25: _KotlinParser_Item? = null
                    _r25 = _MemoCall(_memo, "COMMA", _index.element, ::COMMA, null)
                    if (_r25 != null) _index.element = _r25.nextIndex

                    _label = 22
                }
                // AND 22
                22 -> {
                    val _r22_2 = _memo.results.pop()
                    val _r22_1 = _memo.results.pop()

                    if (_r22_1 != null && _r22_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i22, _index.element, _memo.input, (_r22_1.results + _r22_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i22
                    }

                    // QUES 21
                    if (_memo.results.peek() == null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_index.element, _memo.input))
                    }
                    _label = 3
                }
                // AND 3
                3 -> {
                    val _r3_2 = _memo.results.pop()
                    val _r3_1 = _memo.results.pop()

                    if (_r3_1 != null && _r3_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i3, _index.element, _memo.input, (_r3_1.results + _r3_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i3
                    }

                    // AND shortcut 2
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 2
                        continue
                    }

                    // STAR 26
                    _start_i26 = _index.element
                    _label = 26
                }
                // STAR 26
                26 -> {
                    // CALLORVAR NL
                    var _r27: _KotlinParser_Item? = null
                    _r27 = _MemoCall(_memo, "NL", _index.element, ::NL, null)
                    if (_r27 != null) _index.element = _r27.nextIndex

                    // STAR 26
                    val _r26 = _memo.results.pop()
                    if (_r26 != null) {
                        _res26 += _r26.results
                        _label = 26
                        continue
                    } else {
                        _memo.results.push(_KotlinParser_Item(_start_i26, _index.element, _memo.input, _res26.filterNotNull(), true))
                    }

                    _label = 2
                }
                // AND 2
                2 -> {
                    val _r2_2 = _memo.results.pop()
                    val _r2_1 = _memo.results.pop()

                    if (_r2_1 != null && _r2_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i2, _index.element, _memo.input, (_r2_1.results + _r2_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i2
                    }

                    // AND shortcut 1
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 1
                        continue
                    }

                    // CALLORVAR RPAREN
                    var _r28: _KotlinParser_Item? = null
                    _r28 = _MemoCall(_memo, "RPAREN", _index.element, ::RPAREN, null)
                    if (_r28 != null) _index.element = _r28.nextIndex

                    _label = 1
                }
                // AND 1
                1 -> {
                    val _r1_2 = _memo.results.pop()
                    val _r1_1 = _memo.results.pop()

                    if (_r1_1 != null && _r1_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i1, _index.element, _memo.input, (_r1_1.results + _r1_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i1
                    }

                    // ACT 0
                    val _r0 = _memo.results.peek()
                    if (_r0 != null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_r0.startIndex, _r0.nextIndex, _memo.input, _Thunk({ AST.MultiVariableDeclaration(it.l) }, _r0), true))
                    }

                    break
                }
            }
        }
    }


    open fun propertyDeclaration(_memo: _KotlinParser_Memo, __index: Int, _args: _KotlinParser_Args?) {
        val _index = Ref.IntRef()
        _index.element = __index

        val _arg_index = Ref.IntRef()
        val _arg_input_index = Ref.IntRef()

        var mods: _KotlinParser_Item? = null
        var vov: _KotlinParser_Item? = null
        var tps: _KotlinParser_Item? = null
        var rt: _KotlinParser_Item? = null
        var vds: _KotlinParser_Item? = null
        var tcs: _KotlinParser_Item? = null
        var b: _KotlinParser_Item? = null
        var gttr: _KotlinParser_Item? = null
        var sttr: _KotlinParser_Item? = null

        // AND 1
        var _start_i1 = _index.element

        // AND 2
        var _start_i2 = _index.element

        // AND 3
        var _start_i3 = _index.element

        // AND 4
        var _start_i4 = _index.element

        // AND 5
        var _start_i5 = _index.element

        // AND 6
        var _start_i6 = _index.element

        // AND 7
        var _start_i7 = _index.element

        // AND 8
        var _start_i8 = _index.element

        // AND 15
        var _start_i15 = _index.element

        // STAR 16
        var _start_i16 = _index.element
        val _inp16 = arrayListOf<Token?>()
        val _res16 = arrayListOf<AST.AstNode?>()

        // AND 22
        var _start_i22 = _index.element

        // AND 23
        var _start_i23 = _index.element

        // AND 24
        var _start_i24 = _index.element

        // STAR 25
        var _start_i25 = _index.element
        val _inp25 = arrayListOf<Token?>()
        val _res25 = arrayListOf<AST.AstNode?>()

        // STAR 28
        var _start_i28 = _index.element
        val _inp28 = arrayListOf<Token?>()
        val _res28 = arrayListOf<AST.AstNode?>()

        // STAR 31
        var _start_i31 = _index.element
        val _inp31 = arrayListOf<Token?>()
        val _res31 = arrayListOf<AST.AstNode?>()

        // AND 36
        var _start_i36 = _index.element

        // STAR 37
        var _start_i37 = _index.element
        val _inp37 = arrayListOf<Token?>()
        val _res37 = arrayListOf<AST.AstNode?>()

        // AND 42
        var _start_i42 = _index.element

        // STAR 43
        var _start_i43 = _index.element
        val _inp43 = arrayListOf<Token?>()
        val _res43 = arrayListOf<AST.AstNode?>()

        // OR 46
        var _start_i46 = _index.element

        // AND 49
        var _start_i49 = _index.element

        // OR 52
        var _start_i52 = _index.element

        // AND 53
        var _start_i53 = _index.element

        // AND 58
        var _start_i58 = _index.element

        // AND 59
        var _start_i59 = _index.element

        // STAR 60
        var _start_i60 = _index.element
        val _inp60 = arrayListOf<Token?>()
        val _res60 = arrayListOf<AST.AstNode?>()

        // AND 66
        var _start_i66 = _index.element

        // AND 71
        var _start_i71 = _index.element

        // AND 72
        var _start_i72 = _index.element

        // STAR 73
        var _start_i73 = _index.element
        val _inp73 = arrayListOf<Token?>()
        val _res73 = arrayListOf<AST.AstNode?>()

        var _label = -1
        while(true) {
            when(_label) {
                -1 -> {
                    // AND 1
                    _start_i1 = _index.element

                    // AND 2
                    _start_i2 = _index.element

                    // AND 3
                    _start_i3 = _index.element

                    // AND 4
                    _start_i4 = _index.element

                    // AND 5
                    _start_i5 = _index.element

                    // AND 6
                    _start_i6 = _index.element

                    // AND 7
                    _start_i7 = _index.element

                    // AND 8
                    _start_i8 = _index.element

                    // CALLORVAR modifiers
                    var _r11: _KotlinParser_Item? = null
                    _r11 = _MemoCall(_memo, "modifiers", _index.element, ::modifiers, null)
                    if (_r11 != null) _index.element = _r11.nextIndex

                    // QUES 10
                    if (_memo.results.peek() == null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_index.element, _memo.input))
                    }
                    // BIND mods
                    mods = _memo.results.peek()

                    // AND shortcut 8
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 8
                        continue
                    }

                    // CALLORVAR valOrVar
                    var _r13: _KotlinParser_Item? = null
                    _r13 = _MemoCall(_memo, "valOrVar", _index.element, ::valOrVar, null)
                    if (_r13 != null) _index.element = _r13.nextIndex

                    // BIND vov
                    vov = _memo.results.peek()

                    _label = 8
                }
                // AND 8
                8 -> {
                    val _r8_2 = _memo.results.pop()
                    val _r8_1 = _memo.results.pop()

                    if (_r8_1 != null && _r8_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i8, _index.element, _memo.input, (_r8_1.results + _r8_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i8
                    }

                    // AND shortcut 7
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 7
                        continue
                    }

                    // AND 15
                    _start_i15 = _index.element

                    // STAR 16
                    _start_i16 = _index.element
                    _label = 16
                }
                // STAR 16
                16 -> {
                    // CALLORVAR NL
                    var _r17: _KotlinParser_Item? = null
                    _r17 = _MemoCall(_memo, "NL", _index.element, ::NL, null)
                    if (_r17 != null) _index.element = _r17.nextIndex

                    // STAR 16
                    val _r16 = _memo.results.pop()
                    if (_r16 != null) {
                        _res16 += _r16.results
                        _label = 16
                        continue
                    } else {
                        _memo.results.push(_KotlinParser_Item(_start_i16, _index.element, _memo.input, _res16.filterNotNull(), true))
                    }

                    // AND shortcut 15
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 15
                        continue
                    }

                    // CALLORVAR typeParameters
                    var _r19: _KotlinParser_Item? = null
                    _r19 = _MemoCall(_memo, "typeParameters", _index.element, ::typeParameters, null)
                    if (_r19 != null) _index.element = _r19.nextIndex

                    // BIND tps
                    tps = _memo.results.peek()

                    _label = 15
                }
                // AND 15
                15 -> {
                    val _r15_2 = _memo.results.pop()
                    val _r15_1 = _memo.results.pop()

                    if (_r15_1 != null && _r15_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i15, _index.element, _memo.input, (_r15_1.results + _r15_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i15
                    }

                    // QUES 14
                    if (_memo.results.peek() == null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_index.element, _memo.input))
                    }
                    _label = 7
                }
                // AND 7
                7 -> {
                    val _r7_2 = _memo.results.pop()
                    val _r7_1 = _memo.results.pop()

                    if (_r7_1 != null && _r7_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i7, _index.element, _memo.input, (_r7_1.results + _r7_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i7
                    }

                    // AND shortcut 6
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 6
                        continue
                    }

                    // AND 22
                    _start_i22 = _index.element

                    // AND 23
                    _start_i23 = _index.element

                    // AND 24
                    _start_i24 = _index.element

                    // STAR 25
                    _start_i25 = _index.element
                    _label = 25
                }
                // STAR 25
                25 -> {
                    // CALLORVAR NL
                    var _r26: _KotlinParser_Item? = null
                    _r26 = _MemoCall(_memo, "NL", _index.element, ::NL, null)
                    if (_r26 != null) _index.element = _r26.nextIndex

                    // STAR 25
                    val _r25 = _memo.results.pop()
                    if (_r25 != null) {
                        _res25 += _r25.results
                        _label = 25
                        continue
                    } else {
                        _memo.results.push(_KotlinParser_Item(_start_i25, _index.element, _memo.input, _res25.filterNotNull(), true))
                    }

                    // AND shortcut 24
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 24
                        continue
                    }

                    // CALLORVAR receiverType
                    var _r27: _KotlinParser_Item? = null
                    _r27 = _MemoCall(_memo, "receiverType", _index.element, ::receiverType, null)
                    if (_r27 != null) _index.element = _r27.nextIndex

                    _label = 24
                }
                // AND 24
                24 -> {
                    val _r24_2 = _memo.results.pop()
                    val _r24_1 = _memo.results.pop()

                    if (_r24_1 != null && _r24_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i24, _index.element, _memo.input, (_r24_1.results + _r24_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i24
                    }

                    // AND shortcut 23
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 23
                        continue
                    }

                    // STAR 28
                    _start_i28 = _index.element
                    _label = 28
                }
                // STAR 28
                28 -> {
                    // CALLORVAR NL
                    var _r29: _KotlinParser_Item? = null
                    _r29 = _MemoCall(_memo, "NL", _index.element, ::NL, null)
                    if (_r29 != null) _index.element = _r29.nextIndex

                    // STAR 28
                    val _r28 = _memo.results.pop()
                    if (_r28 != null) {
                        _res28 += _r28.results
                        _label = 28
                        continue
                    } else {
                        _memo.results.push(_KotlinParser_Item(_start_i28, _index.element, _memo.input, _res28.filterNotNull(), true))
                    }

                    _label = 23
                }
                // AND 23
                23 -> {
                    val _r23_2 = _memo.results.pop()
                    val _r23_1 = _memo.results.pop()

                    if (_r23_1 != null && _r23_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i23, _index.element, _memo.input, (_r23_1.results + _r23_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i23
                    }

                    // AND shortcut 22
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 22
                        continue
                    }

                    // CALLORVAR DOT
                    var _r30: _KotlinParser_Item? = null
                    _r30 = _MemoCall(_memo, "DOT", _index.element, ::DOT, null)
                    if (_r30 != null) _index.element = _r30.nextIndex

                    _label = 22
                }
                // AND 22
                22 -> {
                    val _r22_2 = _memo.results.pop()
                    val _r22_1 = _memo.results.pop()

                    if (_r22_1 != null && _r22_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i22, _index.element, _memo.input, (_r22_1.results + _r22_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i22
                    }

                    // QUES 21
                    if (_memo.results.peek() == null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_index.element, _memo.input))
                    }
                    // BIND rt
                    rt = _memo.results.peek()

                    _label = 6
                }
                // AND 6
                6 -> {
                    val _r6_2 = _memo.results.pop()
                    val _r6_1 = _memo.results.pop()

                    if (_r6_1 != null && _r6_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i6, _index.element, _memo.input, (_r6_1.results + _r6_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i6
                    }

                    // AND shortcut 5
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 5
                        continue
                    }

                    // STAR 31
                    _start_i31 = _index.element
                    _label = 31
                }
                // STAR 31
                31 -> {
                    // CALLORVAR NL
                    var _r32: _KotlinParser_Item? = null
                    _r32 = _MemoCall(_memo, "NL", _index.element, ::NL, null)
                    if (_r32 != null) _index.element = _r32.nextIndex

                    // STAR 31
                    val _r31 = _memo.results.pop()
                    if (_r31 != null) {
                        _res31 += _r31.results
                        _label = 31
                        continue
                    } else {
                        _memo.results.push(_KotlinParser_Item(_start_i31, _index.element, _memo.input, _res31.filterNotNull(), true))
                    }

                    _label = 5
                }
                // AND 5
                5 -> {
                    val _r5_2 = _memo.results.pop()
                    val _r5_1 = _memo.results.pop()

                    if (_r5_1 != null && _r5_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i5, _index.element, _memo.input, (_r5_1.results + _r5_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i5
                    }

                    // AND shortcut 4
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 4
                        continue
                    }

                    // CALLORVAR varDecls
                    var _r34: _KotlinParser_Item? = null
                    _r34 = _MemoCall(_memo, "varDecls", _index.element, ::varDecls, null)
                    if (_r34 != null) _index.element = _r34.nextIndex

                    // BIND vds
                    vds = _memo.results.peek()

                    _label = 4
                }
                // AND 4
                4 -> {
                    val _r4_2 = _memo.results.pop()
                    val _r4_1 = _memo.results.pop()

                    if (_r4_1 != null && _r4_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i4, _index.element, _memo.input, (_r4_1.results + _r4_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i4
                    }

                    // AND shortcut 3
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 3
                        continue
                    }

                    // AND 36
                    _start_i36 = _index.element

                    // STAR 37
                    _start_i37 = _index.element
                    _label = 37
                }
                // STAR 37
                37 -> {
                    // CALLORVAR NL
                    var _r38: _KotlinParser_Item? = null
                    _r38 = _MemoCall(_memo, "NL", _index.element, ::NL, null)
                    if (_r38 != null) _index.element = _r38.nextIndex

                    // STAR 37
                    val _r37 = _memo.results.pop()
                    if (_r37 != null) {
                        _res37 += _r37.results
                        _label = 37
                        continue
                    } else {
                        _memo.results.push(_KotlinParser_Item(_start_i37, _index.element, _memo.input, _res37.filterNotNull(), true))
                    }

                    // AND shortcut 36
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 36
                        continue
                    }

                    // CALLORVAR typeConstraints
                    var _r40: _KotlinParser_Item? = null
                    _r40 = _MemoCall(_memo, "typeConstraints", _index.element, ::typeConstraints, null)
                    if (_r40 != null) _index.element = _r40.nextIndex

                    // BIND tcs
                    tcs = _memo.results.peek()

                    _label = 36
                }
                // AND 36
                36 -> {
                    val _r36_2 = _memo.results.pop()
                    val _r36_1 = _memo.results.pop()

                    if (_r36_1 != null && _r36_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i36, _index.element, _memo.input, (_r36_1.results + _r36_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i36
                    }

                    // QUES 35
                    if (_memo.results.peek() == null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_index.element, _memo.input))
                    }
                    _label = 3
                }
                // AND 3
                3 -> {
                    val _r3_2 = _memo.results.pop()
                    val _r3_1 = _memo.results.pop()

                    if (_r3_1 != null && _r3_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i3, _index.element, _memo.input, (_r3_1.results + _r3_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i3
                    }

                    // AND shortcut 2
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 2
                        continue
                    }

                    // AND 42
                    _start_i42 = _index.element

                    // STAR 43
                    _start_i43 = _index.element
                    _label = 43
                }
                // STAR 43
                43 -> {
                    // CALLORVAR NL
                    var _r44: _KotlinParser_Item? = null
                    _r44 = _MemoCall(_memo, "NL", _index.element, ::NL, null)
                    if (_r44 != null) _index.element = _r44.nextIndex

                    // STAR 43
                    val _r43 = _memo.results.pop()
                    if (_r43 != null) {
                        _res43 += _r43.results
                        _label = 43
                        continue
                    } else {
                        _memo.results.push(_KotlinParser_Item(_start_i43, _index.element, _memo.input, _res43.filterNotNull(), true))
                    }

                    // AND shortcut 42
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 42
                        continue
                    }

                    // OR 46
                    _start_i46 = _index.element

                    // CALLORVAR expressionBody
                    var _r47: _KotlinParser_Item? = null
                    _r47 = _MemoCall(_memo, "expressionBody", _index.element, ::expressionBody, null)
                    if (_r47 != null) _index.element = _r47.nextIndex

                    // OR shortcut 46
                    if (_memo.results.peek() == null) {
                        _memo.results.pop()
                        _index.element = _start_i46
                    } else {
                        _label = 46
                        continue
                    }

                    // CALLORVAR propertyDelegate
                    var _r48: _KotlinParser_Item? = null
                    _r48 = _MemoCall(_memo, "propertyDelegate", _index.element, ::propertyDelegate, null)
                    if (_r48 != null) _index.element = _r48.nextIndex

                    _label = 46
                }
                // OR 46
                46 -> {
                    // BIND b
                    b = _memo.results.peek()

                    _label = 42
                }
                // AND 42
                42 -> {
                    val _r42_2 = _memo.results.pop()
                    val _r42_1 = _memo.results.pop()

                    if (_r42_1 != null && _r42_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i42, _index.element, _memo.input, (_r42_1.results + _r42_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i42
                    }

                    // QUES 41
                    if (_memo.results.peek() == null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_index.element, _memo.input))
                    }
                    _label = 2
                }
                // AND 2
                2 -> {
                    val _r2_2 = _memo.results.pop()
                    val _r2_1 = _memo.results.pop()

                    if (_r2_1 != null && _r2_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i2, _index.element, _memo.input, (_r2_1.results + _r2_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i2
                    }

                    // AND shortcut 1
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 1
                        continue
                    }

                    // AND 49
                    _start_i49 = _index.element

                    // CALLORVAR semi
                    var _r51: _KotlinParser_Item? = null
                    _r51 = _MemoCall(_memo, "semi", _index.element, ::semi, null)
                    if (_r51 != null) _index.element = _r51.nextIndex

                    // QUES 50
                    if (_memo.results.peek() == null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_index.element, _memo.input))
                    }
                    // AND shortcut 49
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 49
                        continue
                    }

                    // OR 52
                    _start_i52 = _index.element

                    // AND 53
                    _start_i53 = _index.element

                    // CALLORVAR getter
                    var _r56: _KotlinParser_Item? = null
                    _r56 = _MemoCall(_memo, "getter", _index.element, ::getter, null)
                    if (_r56 != null) _index.element = _r56.nextIndex

                    // QUES 55
                    if (_memo.results.peek() == null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_index.element, _memo.input))
                    }
                    // BIND gttr
                    gttr = _memo.results.peek()

                    // AND shortcut 53
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 53
                        continue
                    }

                    // AND 58
                    _start_i58 = _index.element

                    // AND 59
                    _start_i59 = _index.element

                    // STAR 60
                    _start_i60 = _index.element
                    _label = 60
                }
                // STAR 60
                60 -> {
                    // CALLORVAR NL
                    var _r61: _KotlinParser_Item? = null
                    _r61 = _MemoCall(_memo, "NL", _index.element, ::NL, null)
                    if (_r61 != null) _index.element = _r61.nextIndex

                    // STAR 60
                    val _r60 = _memo.results.pop()
                    if (_r60 != null) {
                        _res60 += _r60.results
                        _label = 60
                        continue
                    } else {
                        _memo.results.push(_KotlinParser_Item(_start_i60, _index.element, _memo.input, _res60.filterNotNull(), true))
                    }

                    // AND shortcut 59
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 59
                        continue
                    }

                    // CALLORVAR semi
                    var _r63: _KotlinParser_Item? = null
                    _r63 = _MemoCall(_memo, "semi", _index.element, ::semi, null)
                    if (_r63 != null) _index.element = _r63.nextIndex

                    // QUES 62
                    if (_memo.results.peek() == null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_index.element, _memo.input))
                    }
                    _label = 59
                }
                // AND 59
                59 -> {
                    val _r59_2 = _memo.results.pop()
                    val _r59_1 = _memo.results.pop()

                    if (_r59_1 != null && _r59_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i59, _index.element, _memo.input, (_r59_1.results + _r59_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i59
                    }

                    // AND shortcut 58
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 58
                        continue
                    }

                    // CALLORVAR setter
                    var _r65: _KotlinParser_Item? = null
                    _r65 = _MemoCall(_memo, "setter", _index.element, ::setter, null)
                    if (_r65 != null) _index.element = _r65.nextIndex

                    // BIND sttr
                    sttr = _memo.results.peek()

                    _label = 58
                }
                // AND 58
                58 -> {
                    val _r58_2 = _memo.results.pop()
                    val _r58_1 = _memo.results.pop()

                    if (_r58_1 != null && _r58_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i58, _index.element, _memo.input, (_r58_1.results + _r58_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i58
                    }

                    // QUES 57
                    if (_memo.results.peek() == null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_index.element, _memo.input))
                    }
                    _label = 53
                }
                // AND 53
                53 -> {
                    val _r53_2 = _memo.results.pop()
                    val _r53_1 = _memo.results.pop()

                    if (_r53_1 != null && _r53_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i53, _index.element, _memo.input, (_r53_1.results + _r53_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i53
                    }

                    // OR shortcut 52
                    if (_memo.results.peek() == null) {
                        _memo.results.pop()
                        _index.element = _start_i52
                    } else {
                        _label = 52
                        continue
                    }

                    // AND 66
                    _start_i66 = _index.element

                    // CALLORVAR setter
                    var _r69: _KotlinParser_Item? = null
                    _r69 = _MemoCall(_memo, "setter", _index.element, ::setter, null)
                    if (_r69 != null) _index.element = _r69.nextIndex

                    // QUES 68
                    if (_memo.results.peek() == null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_index.element, _memo.input))
                    }
                    // BIND sttr
                    sttr = _memo.results.peek()

                    // AND shortcut 66
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 66
                        continue
                    }

                    // AND 71
                    _start_i71 = _index.element

                    // AND 72
                    _start_i72 = _index.element

                    // STAR 73
                    _start_i73 = _index.element
                    _label = 73
                }
                // STAR 73
                73 -> {
                    // CALLORVAR NL
                    var _r74: _KotlinParser_Item? = null
                    _r74 = _MemoCall(_memo, "NL", _index.element, ::NL, null)
                    if (_r74 != null) _index.element = _r74.nextIndex

                    // STAR 73
                    val _r73 = _memo.results.pop()
                    if (_r73 != null) {
                        _res73 += _r73.results
                        _label = 73
                        continue
                    } else {
                        _memo.results.push(_KotlinParser_Item(_start_i73, _index.element, _memo.input, _res73.filterNotNull(), true))
                    }

                    // AND shortcut 72
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 72
                        continue
                    }

                    // CALLORVAR semi
                    var _r76: _KotlinParser_Item? = null
                    _r76 = _MemoCall(_memo, "semi", _index.element, ::semi, null)
                    if (_r76 != null) _index.element = _r76.nextIndex

                    // QUES 75
                    if (_memo.results.peek() == null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_index.element, _memo.input))
                    }
                    _label = 72
                }
                // AND 72
                72 -> {
                    val _r72_2 = _memo.results.pop()
                    val _r72_1 = _memo.results.pop()

                    if (_r72_1 != null && _r72_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i72, _index.element, _memo.input, (_r72_1.results + _r72_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i72
                    }

                    // AND shortcut 71
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 71
                        continue
                    }

                    // CALLORVAR getter
                    var _r78: _KotlinParser_Item? = null
                    _r78 = _MemoCall(_memo, "getter", _index.element, ::getter, null)
                    if (_r78 != null) _index.element = _r78.nextIndex

                    // BIND gttr
                    gttr = _memo.results.peek()

                    _label = 71
                }
                // AND 71
                71 -> {
                    val _r71_2 = _memo.results.pop()
                    val _r71_1 = _memo.results.pop()

                    if (_r71_1 != null && _r71_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i71, _index.element, _memo.input, (_r71_1.results + _r71_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i71
                    }

                    // QUES 70
                    if (_memo.results.peek() == null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_index.element, _memo.input))
                    }
                    _label = 66
                }
                // AND 66
                66 -> {
                    val _r66_2 = _memo.results.pop()
                    val _r66_1 = _memo.results.pop()

                    if (_r66_1 != null && _r66_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i66, _index.element, _memo.input, (_r66_1.results + _r66_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i66
                    }

                    _label = 52
                }
                // OR 52
                52 -> {
                    _label = 49
                }
                // AND 49
                49 -> {
                    val _r49_2 = _memo.results.pop()
                    val _r49_1 = _memo.results.pop()

                    if (_r49_1 != null && _r49_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i49, _index.element, _memo.input, (_r49_1.results + _r49_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i49
                    }

                    _label = 1
                }
                // AND 1
                1 -> {
                    val _r1_2 = _memo.results.pop()
                    val _r1_1 = _memo.results.pop()

                    if (_r1_1 != null && _r1_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i1, _index.element, _memo.input, (_r1_1.results + _r1_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i1
                    }

                    // ACT 0
                    val _r0 = _memo.results.peek()
                    if (_r0 != null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_r0.startIndex, _r0.nextIndex, _memo.input, _Thunk({ AST.PropertyDeclaration(mods.l, vov.r, tps.l, rt.nr, vds.r, tcs.l, b.nr, gttr.nr, sttr.nr) }, _r0), true))
                    }

                    break
                }
            }
        }
    }


    open fun localVariableDeclaration(_memo: _KotlinParser_Memo, __index: Int, _args: _KotlinParser_Args?) {
        val _index = Ref.IntRef()
        _index.element = __index

        val _arg_index = Ref.IntRef()
        val _arg_input_index = Ref.IntRef()

        var mods: _KotlinParser_Item? = null
        var vov: _KotlinParser_Item? = null
        var tps: _KotlinParser_Item? = null
        var rt: _KotlinParser_Item? = null
        var vds: _KotlinParser_Item? = null
        var tcs: _KotlinParser_Item? = null
        var b: _KotlinParser_Item? = null

        // AND 1
        var _start_i1 = _index.element

        // AND 2
        var _start_i2 = _index.element

        // AND 3
        var _start_i3 = _index.element

        // AND 4
        var _start_i4 = _index.element

        // AND 5
        var _start_i5 = _index.element

        // AND 6
        var _start_i6 = _index.element

        // AND 7
        var _start_i7 = _index.element

        // AND 14
        var _start_i14 = _index.element

        // STAR 15
        var _start_i15 = _index.element
        val _inp15 = arrayListOf<Token?>()
        val _res15 = arrayListOf<AST.AstNode?>()

        // AND 21
        var _start_i21 = _index.element

        // AND 22
        var _start_i22 = _index.element

        // AND 23
        var _start_i23 = _index.element

        // STAR 24
        var _start_i24 = _index.element
        val _inp24 = arrayListOf<Token?>()
        val _res24 = arrayListOf<AST.AstNode?>()

        // STAR 27
        var _start_i27 = _index.element
        val _inp27 = arrayListOf<Token?>()
        val _res27 = arrayListOf<AST.AstNode?>()

        // STAR 30
        var _start_i30 = _index.element
        val _inp30 = arrayListOf<Token?>()
        val _res30 = arrayListOf<AST.AstNode?>()

        // AND 35
        var _start_i35 = _index.element

        // STAR 36
        var _start_i36 = _index.element
        val _inp36 = arrayListOf<Token?>()
        val _res36 = arrayListOf<AST.AstNode?>()

        // AND 41
        var _start_i41 = _index.element

        // STAR 42
        var _start_i42 = _index.element
        val _inp42 = arrayListOf<Token?>()
        val _res42 = arrayListOf<AST.AstNode?>()

        // OR 45
        var _start_i45 = _index.element

        var _label = -1
        while(true) {
            when(_label) {
                -1 -> {
                    // AND 1
                    _start_i1 = _index.element

                    // AND 2
                    _start_i2 = _index.element

                    // AND 3
                    _start_i3 = _index.element

                    // AND 4
                    _start_i4 = _index.element

                    // AND 5
                    _start_i5 = _index.element

                    // AND 6
                    _start_i6 = _index.element

                    // AND 7
                    _start_i7 = _index.element

                    // CALLORVAR modifiers
                    var _r10: _KotlinParser_Item? = null
                    _r10 = _MemoCall(_memo, "modifiers", _index.element, ::modifiers, null)
                    if (_r10 != null) _index.element = _r10.nextIndex

                    // QUES 9
                    if (_memo.results.peek() == null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_index.element, _memo.input))
                    }
                    // BIND mods
                    mods = _memo.results.peek()

                    // AND shortcut 7
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 7
                        continue
                    }

                    // CALLORVAR valOrVar
                    var _r12: _KotlinParser_Item? = null
                    _r12 = _MemoCall(_memo, "valOrVar", _index.element, ::valOrVar, null)
                    if (_r12 != null) _index.element = _r12.nextIndex

                    // BIND vov
                    vov = _memo.results.peek()

                    _label = 7
                }
                // AND 7
                7 -> {
                    val _r7_2 = _memo.results.pop()
                    val _r7_1 = _memo.results.pop()

                    if (_r7_1 != null && _r7_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i7, _index.element, _memo.input, (_r7_1.results + _r7_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i7
                    }

                    // AND shortcut 6
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 6
                        continue
                    }

                    // AND 14
                    _start_i14 = _index.element

                    // STAR 15
                    _start_i15 = _index.element
                    _label = 15
                }
                // STAR 15
                15 -> {
                    // CALLORVAR NL
                    var _r16: _KotlinParser_Item? = null
                    _r16 = _MemoCall(_memo, "NL", _index.element, ::NL, null)
                    if (_r16 != null) _index.element = _r16.nextIndex

                    // STAR 15
                    val _r15 = _memo.results.pop()
                    if (_r15 != null) {
                        _res15 += _r15.results
                        _label = 15
                        continue
                    } else {
                        _memo.results.push(_KotlinParser_Item(_start_i15, _index.element, _memo.input, _res15.filterNotNull(), true))
                    }

                    // AND shortcut 14
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 14
                        continue
                    }

                    // CALLORVAR typeParameters
                    var _r18: _KotlinParser_Item? = null
                    _r18 = _MemoCall(_memo, "typeParameters", _index.element, ::typeParameters, null)
                    if (_r18 != null) _index.element = _r18.nextIndex

                    // BIND tps
                    tps = _memo.results.peek()

                    _label = 14
                }
                // AND 14
                14 -> {
                    val _r14_2 = _memo.results.pop()
                    val _r14_1 = _memo.results.pop()

                    if (_r14_1 != null && _r14_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i14, _index.element, _memo.input, (_r14_1.results + _r14_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i14
                    }

                    // QUES 13
                    if (_memo.results.peek() == null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_index.element, _memo.input))
                    }
                    _label = 6
                }
                // AND 6
                6 -> {
                    val _r6_2 = _memo.results.pop()
                    val _r6_1 = _memo.results.pop()

                    if (_r6_1 != null && _r6_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i6, _index.element, _memo.input, (_r6_1.results + _r6_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i6
                    }

                    // AND shortcut 5
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 5
                        continue
                    }

                    // AND 21
                    _start_i21 = _index.element

                    // AND 22
                    _start_i22 = _index.element

                    // AND 23
                    _start_i23 = _index.element

                    // STAR 24
                    _start_i24 = _index.element
                    _label = 24
                }
                // STAR 24
                24 -> {
                    // CALLORVAR NL
                    var _r25: _KotlinParser_Item? = null
                    _r25 = _MemoCall(_memo, "NL", _index.element, ::NL, null)
                    if (_r25 != null) _index.element = _r25.nextIndex

                    // STAR 24
                    val _r24 = _memo.results.pop()
                    if (_r24 != null) {
                        _res24 += _r24.results
                        _label = 24
                        continue
                    } else {
                        _memo.results.push(_KotlinParser_Item(_start_i24, _index.element, _memo.input, _res24.filterNotNull(), true))
                    }

                    // AND shortcut 23
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 23
                        continue
                    }

                    // CALLORVAR receiverType
                    var _r26: _KotlinParser_Item? = null
                    _r26 = _MemoCall(_memo, "receiverType", _index.element, ::receiverType, null)
                    if (_r26 != null) _index.element = _r26.nextIndex

                    _label = 23
                }
                // AND 23
                23 -> {
                    val _r23_2 = _memo.results.pop()
                    val _r23_1 = _memo.results.pop()

                    if (_r23_1 != null && _r23_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i23, _index.element, _memo.input, (_r23_1.results + _r23_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i23
                    }

                    // AND shortcut 22
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 22
                        continue
                    }

                    // STAR 27
                    _start_i27 = _index.element
                    _label = 27
                }
                // STAR 27
                27 -> {
                    // CALLORVAR NL
                    var _r28: _KotlinParser_Item? = null
                    _r28 = _MemoCall(_memo, "NL", _index.element, ::NL, null)
                    if (_r28 != null) _index.element = _r28.nextIndex

                    // STAR 27
                    val _r27 = _memo.results.pop()
                    if (_r27 != null) {
                        _res27 += _r27.results
                        _label = 27
                        continue
                    } else {
                        _memo.results.push(_KotlinParser_Item(_start_i27, _index.element, _memo.input, _res27.filterNotNull(), true))
                    }

                    _label = 22
                }
                // AND 22
                22 -> {
                    val _r22_2 = _memo.results.pop()
                    val _r22_1 = _memo.results.pop()

                    if (_r22_1 != null && _r22_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i22, _index.element, _memo.input, (_r22_1.results + _r22_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i22
                    }

                    // AND shortcut 21
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 21
                        continue
                    }

                    // CALLORVAR DOT
                    var _r29: _KotlinParser_Item? = null
                    _r29 = _MemoCall(_memo, "DOT", _index.element, ::DOT, null)
                    if (_r29 != null) _index.element = _r29.nextIndex

                    _label = 21
                }
                // AND 21
                21 -> {
                    val _r21_2 = _memo.results.pop()
                    val _r21_1 = _memo.results.pop()

                    if (_r21_1 != null && _r21_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i21, _index.element, _memo.input, (_r21_1.results + _r21_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i21
                    }

                    // QUES 20
                    if (_memo.results.peek() == null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_index.element, _memo.input))
                    }
                    // BIND rt
                    rt = _memo.results.peek()

                    _label = 5
                }
                // AND 5
                5 -> {
                    val _r5_2 = _memo.results.pop()
                    val _r5_1 = _memo.results.pop()

                    if (_r5_1 != null && _r5_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i5, _index.element, _memo.input, (_r5_1.results + _r5_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i5
                    }

                    // AND shortcut 4
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 4
                        continue
                    }

                    // STAR 30
                    _start_i30 = _index.element
                    _label = 30
                }
                // STAR 30
                30 -> {
                    // CALLORVAR NL
                    var _r31: _KotlinParser_Item? = null
                    _r31 = _MemoCall(_memo, "NL", _index.element, ::NL, null)
                    if (_r31 != null) _index.element = _r31.nextIndex

                    // STAR 30
                    val _r30 = _memo.results.pop()
                    if (_r30 != null) {
                        _res30 += _r30.results
                        _label = 30
                        continue
                    } else {
                        _memo.results.push(_KotlinParser_Item(_start_i30, _index.element, _memo.input, _res30.filterNotNull(), true))
                    }

                    _label = 4
                }
                // AND 4
                4 -> {
                    val _r4_2 = _memo.results.pop()
                    val _r4_1 = _memo.results.pop()

                    if (_r4_1 != null && _r4_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i4, _index.element, _memo.input, (_r4_1.results + _r4_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i4
                    }

                    // AND shortcut 3
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 3
                        continue
                    }

                    // CALLORVAR varDecls
                    var _r33: _KotlinParser_Item? = null
                    _r33 = _MemoCall(_memo, "varDecls", _index.element, ::varDecls, null)
                    if (_r33 != null) _index.element = _r33.nextIndex

                    // BIND vds
                    vds = _memo.results.peek()

                    _label = 3
                }
                // AND 3
                3 -> {
                    val _r3_2 = _memo.results.pop()
                    val _r3_1 = _memo.results.pop()

                    if (_r3_1 != null && _r3_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i3, _index.element, _memo.input, (_r3_1.results + _r3_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i3
                    }

                    // AND shortcut 2
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 2
                        continue
                    }

                    // AND 35
                    _start_i35 = _index.element

                    // STAR 36
                    _start_i36 = _index.element
                    _label = 36
                }
                // STAR 36
                36 -> {
                    // CALLORVAR NL
                    var _r37: _KotlinParser_Item? = null
                    _r37 = _MemoCall(_memo, "NL", _index.element, ::NL, null)
                    if (_r37 != null) _index.element = _r37.nextIndex

                    // STAR 36
                    val _r36 = _memo.results.pop()
                    if (_r36 != null) {
                        _res36 += _r36.results
                        _label = 36
                        continue
                    } else {
                        _memo.results.push(_KotlinParser_Item(_start_i36, _index.element, _memo.input, _res36.filterNotNull(), true))
                    }

                    // AND shortcut 35
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 35
                        continue
                    }

                    // CALLORVAR typeConstraints
                    var _r39: _KotlinParser_Item? = null
                    _r39 = _MemoCall(_memo, "typeConstraints", _index.element, ::typeConstraints, null)
                    if (_r39 != null) _index.element = _r39.nextIndex

                    // BIND tcs
                    tcs = _memo.results.peek()

                    _label = 35
                }
                // AND 35
                35 -> {
                    val _r35_2 = _memo.results.pop()
                    val _r35_1 = _memo.results.pop()

                    if (_r35_1 != null && _r35_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i35, _index.element, _memo.input, (_r35_1.results + _r35_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i35
                    }

                    // QUES 34
                    if (_memo.results.peek() == null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_index.element, _memo.input))
                    }
                    _label = 2
                }
                // AND 2
                2 -> {
                    val _r2_2 = _memo.results.pop()
                    val _r2_1 = _memo.results.pop()

                    if (_r2_1 != null && _r2_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i2, _index.element, _memo.input, (_r2_1.results + _r2_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i2
                    }

                    // AND shortcut 1
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 1
                        continue
                    }

                    // AND 41
                    _start_i41 = _index.element

                    // STAR 42
                    _start_i42 = _index.element
                    _label = 42
                }
                // STAR 42
                42 -> {
                    // CALLORVAR NL
                    var _r43: _KotlinParser_Item? = null
                    _r43 = _MemoCall(_memo, "NL", _index.element, ::NL, null)
                    if (_r43 != null) _index.element = _r43.nextIndex

                    // STAR 42
                    val _r42 = _memo.results.pop()
                    if (_r42 != null) {
                        _res42 += _r42.results
                        _label = 42
                        continue
                    } else {
                        _memo.results.push(_KotlinParser_Item(_start_i42, _index.element, _memo.input, _res42.filterNotNull(), true))
                    }

                    // AND shortcut 41
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 41
                        continue
                    }

                    // OR 45
                    _start_i45 = _index.element

                    // CALLORVAR expressionBody
                    var _r46: _KotlinParser_Item? = null
                    _r46 = _MemoCall(_memo, "expressionBody", _index.element, ::expressionBody, null)
                    if (_r46 != null) _index.element = _r46.nextIndex

                    // OR shortcut 45
                    if (_memo.results.peek() == null) {
                        _memo.results.pop()
                        _index.element = _start_i45
                    } else {
                        _label = 45
                        continue
                    }

                    // CALLORVAR propertyDelegate
                    var _r47: _KotlinParser_Item? = null
                    _r47 = _MemoCall(_memo, "propertyDelegate", _index.element, ::propertyDelegate, null)
                    if (_r47 != null) _index.element = _r47.nextIndex

                    _label = 45
                }
                // OR 45
                45 -> {
                    // BIND b
                    b = _memo.results.peek()

                    _label = 41
                }
                // AND 41
                41 -> {
                    val _r41_2 = _memo.results.pop()
                    val _r41_1 = _memo.results.pop()

                    if (_r41_1 != null && _r41_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i41, _index.element, _memo.input, (_r41_1.results + _r41_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i41
                    }

                    // QUES 40
                    if (_memo.results.peek() == null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_index.element, _memo.input))
                    }
                    _label = 1
                }
                // AND 1
                1 -> {
                    val _r1_2 = _memo.results.pop()
                    val _r1_1 = _memo.results.pop()

                    if (_r1_1 != null && _r1_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i1, _index.element, _memo.input, (_r1_1.results + _r1_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i1
                    }

                    // ACT 0
                    val _r0 = _memo.results.peek()
                    if (_r0 != null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_r0.startIndex, _r0.nextIndex, _memo.input, _Thunk({ AST.PropertyDeclaration(mods.l, vov.r, tps.l, rt.nr, vds.r, tcs.l, b.nr, null, null) }, _r0), true))
                    }

                    break
                }
            }
        }
    }


    open fun varDecls(_memo: _KotlinParser_Memo, __index: Int, _args: _KotlinParser_Args?) {
        val _index = Ref.IntRef()
        _index.element = __index

        val _arg_index = Ref.IntRef()
        val _arg_input_index = Ref.IntRef()

        // OR 0
        var _start_i0 = _index.element

        var _label = -1
        while(true) {
            when(_label) {
                -1 -> {
                    // OR 0
                    _start_i0 = _index.element

                    // CALLORVAR multiVariableDeclaration
                    var _r1: _KotlinParser_Item? = null
                    _r1 = _MemoCall(_memo, "multiVariableDeclaration", _index.element, ::multiVariableDeclaration, null)
                    if (_r1 != null) _index.element = _r1.nextIndex

                    // OR shortcut 0
                    if (_memo.results.peek() == null) {
                        _memo.results.pop()
                        _index.element = _start_i0
                    } else {
                        _label = 0
                        continue
                    }

                    // CALLORVAR variableDeclaration
                    var _r2: _KotlinParser_Item? = null
                    _r2 = _MemoCall(_memo, "variableDeclaration", _index.element, ::variableDeclaration, null)
                    if (_r2 != null) _index.element = _r2.nextIndex

                    _label = 0
                }
                // OR 0
                0 -> {
                    break
                }
            }
        }
    }


    open fun propertyDelegate(_memo: _KotlinParser_Memo, __index: Int, _args: _KotlinParser_Args?) {
        val _index = Ref.IntRef()
        _index.element = __index

        val _arg_index = Ref.IntRef()
        val _arg_input_index = Ref.IntRef()

        var expr: _KotlinParser_Item? = null

        // AND 1
        var _start_i1 = _index.element

        // AND 2
        var _start_i2 = _index.element

        // STAR 4
        var _start_i4 = _index.element
        val _inp4 = arrayListOf<Token?>()
        val _res4 = arrayListOf<AST.AstNode?>()

        var _label = -1
        while(true) {
            when(_label) {
                -1 -> {
                    // AND 1
                    _start_i1 = _index.element

                    // AND 2
                    _start_i2 = _index.element

                    // CALLORVAR BY
                    var _r3: _KotlinParser_Item? = null
                    _r3 = _MemoCall(_memo, "BY", _index.element, ::BY, null)
                    if (_r3 != null) _index.element = _r3.nextIndex

                    // AND shortcut 2
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 2
                        continue
                    }

                    // STAR 4
                    _start_i4 = _index.element
                    _label = 4
                }
                // STAR 4
                4 -> {
                    // CALLORVAR NL
                    var _r5: _KotlinParser_Item? = null
                    _r5 = _MemoCall(_memo, "NL", _index.element, ::NL, null)
                    if (_r5 != null) _index.element = _r5.nextIndex

                    // STAR 4
                    val _r4 = _memo.results.pop()
                    if (_r4 != null) {
                        _res4 += _r4.results
                        _label = 4
                        continue
                    } else {
                        _memo.results.push(_KotlinParser_Item(_start_i4, _index.element, _memo.input, _res4.filterNotNull(), true))
                    }

                    _label = 2
                }
                // AND 2
                2 -> {
                    val _r2_2 = _memo.results.pop()
                    val _r2_1 = _memo.results.pop()

                    if (_r2_1 != null && _r2_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i2, _index.element, _memo.input, (_r2_1.results + _r2_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i2
                    }

                    // AND shortcut 1
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 1
                        continue
                    }

                    // CALLORVAR expression
                    var _r7: _KotlinParser_Item? = null
                    _r7 = _MemoCall(_memo, "expression", _index.element, ::expression, null)
                    if (_r7 != null) _index.element = _r7.nextIndex

                    // BIND expr
                    expr = _memo.results.peek()

                    _label = 1
                }
                // AND 1
                1 -> {
                    val _r1_2 = _memo.results.pop()
                    val _r1_1 = _memo.results.pop()

                    if (_r1_1 != null && _r1_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i1, _index.element, _memo.input, (_r1_1.results + _r1_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i1
                    }

                    // ACT 0
                    val _r0 = _memo.results.peek()
                    if (_r0 != null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_r0.startIndex, _r0.nextIndex, _memo.input, _Thunk({ AST.PropertyDelegate(expr.r) }, _r0), true))
                    }

                    break
                }
            }
        }
    }


    open fun getter(_memo: _KotlinParser_Memo, __index: Int, _args: _KotlinParser_Args?) {
        val _index = Ref.IntRef()
        _index.element = __index

        val _arg_index = Ref.IntRef()
        val _arg_input_index = Ref.IntRef()

        var mods: _KotlinParser_Item? = null
        var t: _KotlinParser_Item? = null
        var b: _KotlinParser_Item? = null

        // AND 1
        var _start_i1 = _index.element

        // AND 2
        var _start_i2 = _index.element

        // AND 8
        var _start_i8 = _index.element

        // AND 9
        var _start_i9 = _index.element

        // AND 10
        var _start_i10 = _index.element

        // AND 11
        var _start_i11 = _index.element

        // AND 12
        var _start_i12 = _index.element

        // AND 13
        var _start_i13 = _index.element

        // STAR 14
        var _start_i14 = _index.element
        val _inp14 = arrayListOf<Token?>()
        val _res14 = arrayListOf<AST.AstNode?>()

        // STAR 17
        var _start_i17 = _index.element
        val _inp17 = arrayListOf<Token?>()
        val _res17 = arrayListOf<AST.AstNode?>()

        // AND 21
        var _start_i21 = _index.element

        // AND 22
        var _start_i22 = _index.element

        // AND 23
        var _start_i23 = _index.element

        // STAR 24
        var _start_i24 = _index.element
        val _inp24 = arrayListOf<Token?>()
        val _res24 = arrayListOf<AST.AstNode?>()

        // STAR 27
        var _start_i27 = _index.element
        val _inp27 = arrayListOf<Token?>()
        val _res27 = arrayListOf<AST.AstNode?>()

        // STAR 31
        var _start_i31 = _index.element
        val _inp31 = arrayListOf<Token?>()
        val _res31 = arrayListOf<AST.AstNode?>()

        var _label = -1
        while(true) {
            when(_label) {
                -1 -> {
                    // AND 1
                    _start_i1 = _index.element

                    // AND 2
                    _start_i2 = _index.element

                    // CALLORVAR modifiers
                    var _r5: _KotlinParser_Item? = null
                    _r5 = _MemoCall(_memo, "modifiers", _index.element, ::modifiers, null)
                    if (_r5 != null) _index.element = _r5.nextIndex

                    // QUES 4
                    if (_memo.results.peek() == null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_index.element, _memo.input))
                    }
                    // BIND mods
                    mods = _memo.results.peek()

                    // AND shortcut 2
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 2
                        continue
                    }

                    // CALLORVAR GET
                    var _r6: _KotlinParser_Item? = null
                    _r6 = _MemoCall(_memo, "GET", _index.element, ::GET, null)
                    if (_r6 != null) _index.element = _r6.nextIndex

                    _label = 2
                }
                // AND 2
                2 -> {
                    val _r2_2 = _memo.results.pop()
                    val _r2_1 = _memo.results.pop()

                    if (_r2_1 != null && _r2_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i2, _index.element, _memo.input, (_r2_1.results + _r2_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i2
                    }

                    // AND shortcut 1
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 1
                        continue
                    }

                    // AND 8
                    _start_i8 = _index.element

                    // AND 9
                    _start_i9 = _index.element

                    // AND 10
                    _start_i10 = _index.element

                    // AND 11
                    _start_i11 = _index.element

                    // AND 12
                    _start_i12 = _index.element

                    // AND 13
                    _start_i13 = _index.element

                    // STAR 14
                    _start_i14 = _index.element
                    _label = 14
                }
                // STAR 14
                14 -> {
                    // CALLORVAR NL
                    var _r15: _KotlinParser_Item? = null
                    _r15 = _MemoCall(_memo, "NL", _index.element, ::NL, null)
                    if (_r15 != null) _index.element = _r15.nextIndex

                    // STAR 14
                    val _r14 = _memo.results.pop()
                    if (_r14 != null) {
                        _res14 += _r14.results
                        _label = 14
                        continue
                    } else {
                        _memo.results.push(_KotlinParser_Item(_start_i14, _index.element, _memo.input, _res14.filterNotNull(), true))
                    }

                    // AND shortcut 13
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 13
                        continue
                    }

                    // CALLORVAR LPAREN
                    var _r16: _KotlinParser_Item? = null
                    _r16 = _MemoCall(_memo, "LPAREN", _index.element, ::LPAREN, null)
                    if (_r16 != null) _index.element = _r16.nextIndex

                    _label = 13
                }
                // AND 13
                13 -> {
                    val _r13_2 = _memo.results.pop()
                    val _r13_1 = _memo.results.pop()

                    if (_r13_1 != null && _r13_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i13, _index.element, _memo.input, (_r13_1.results + _r13_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i13
                    }

                    // AND shortcut 12
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 12
                        continue
                    }

                    // STAR 17
                    _start_i17 = _index.element
                    _label = 17
                }
                // STAR 17
                17 -> {
                    // CALLORVAR NL
                    var _r18: _KotlinParser_Item? = null
                    _r18 = _MemoCall(_memo, "NL", _index.element, ::NL, null)
                    if (_r18 != null) _index.element = _r18.nextIndex

                    // STAR 17
                    val _r17 = _memo.results.pop()
                    if (_r17 != null) {
                        _res17 += _r17.results
                        _label = 17
                        continue
                    } else {
                        _memo.results.push(_KotlinParser_Item(_start_i17, _index.element, _memo.input, _res17.filterNotNull(), true))
                    }

                    _label = 12
                }
                // AND 12
                12 -> {
                    val _r12_2 = _memo.results.pop()
                    val _r12_1 = _memo.results.pop()

                    if (_r12_1 != null && _r12_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i12, _index.element, _memo.input, (_r12_1.results + _r12_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i12
                    }

                    // AND shortcut 11
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 11
                        continue
                    }

                    // CALLORVAR RPAREN
                    var _r19: _KotlinParser_Item? = null
                    _r19 = _MemoCall(_memo, "RPAREN", _index.element, ::RPAREN, null)
                    if (_r19 != null) _index.element = _r19.nextIndex

                    _label = 11
                }
                // AND 11
                11 -> {
                    val _r11_2 = _memo.results.pop()
                    val _r11_1 = _memo.results.pop()

                    if (_r11_1 != null && _r11_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i11, _index.element, _memo.input, (_r11_1.results + _r11_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i11
                    }

                    // AND shortcut 10
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 10
                        continue
                    }

                    // AND 21
                    _start_i21 = _index.element

                    // AND 22
                    _start_i22 = _index.element

                    // AND 23
                    _start_i23 = _index.element

                    // STAR 24
                    _start_i24 = _index.element
                    _label = 24
                }
                // STAR 24
                24 -> {
                    // CALLORVAR NL
                    var _r25: _KotlinParser_Item? = null
                    _r25 = _MemoCall(_memo, "NL", _index.element, ::NL, null)
                    if (_r25 != null) _index.element = _r25.nextIndex

                    // STAR 24
                    val _r24 = _memo.results.pop()
                    if (_r24 != null) {
                        _res24 += _r24.results
                        _label = 24
                        continue
                    } else {
                        _memo.results.push(_KotlinParser_Item(_start_i24, _index.element, _memo.input, _res24.filterNotNull(), true))
                    }

                    // AND shortcut 23
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 23
                        continue
                    }

                    // CALLORVAR COLON
                    var _r26: _KotlinParser_Item? = null
                    _r26 = _MemoCall(_memo, "COLON", _index.element, ::COLON, null)
                    if (_r26 != null) _index.element = _r26.nextIndex

                    _label = 23
                }
                // AND 23
                23 -> {
                    val _r23_2 = _memo.results.pop()
                    val _r23_1 = _memo.results.pop()

                    if (_r23_1 != null && _r23_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i23, _index.element, _memo.input, (_r23_1.results + _r23_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i23
                    }

                    // AND shortcut 22
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 22
                        continue
                    }

                    // STAR 27
                    _start_i27 = _index.element
                    _label = 27
                }
                // STAR 27
                27 -> {
                    // CALLORVAR NL
                    var _r28: _KotlinParser_Item? = null
                    _r28 = _MemoCall(_memo, "NL", _index.element, ::NL, null)
                    if (_r28 != null) _index.element = _r28.nextIndex

                    // STAR 27
                    val _r27 = _memo.results.pop()
                    if (_r27 != null) {
                        _res27 += _r27.results
                        _label = 27
                        continue
                    } else {
                        _memo.results.push(_KotlinParser_Item(_start_i27, _index.element, _memo.input, _res27.filterNotNull(), true))
                    }

                    _label = 22
                }
                // AND 22
                22 -> {
                    val _r22_2 = _memo.results.pop()
                    val _r22_1 = _memo.results.pop()

                    if (_r22_1 != null && _r22_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i22, _index.element, _memo.input, (_r22_1.results + _r22_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i22
                    }

                    // AND shortcut 21
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 21
                        continue
                    }

                    // CALLORVAR type
                    var _r30: _KotlinParser_Item? = null
                    _r30 = _MemoCall(_memo, "type", _index.element, ::type, null)
                    if (_r30 != null) _index.element = _r30.nextIndex

                    // BIND t
                    t = _memo.results.peek()

                    _label = 21
                }
                // AND 21
                21 -> {
                    val _r21_2 = _memo.results.pop()
                    val _r21_1 = _memo.results.pop()

                    if (_r21_1 != null && _r21_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i21, _index.element, _memo.input, (_r21_1.results + _r21_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i21
                    }

                    // QUES 20
                    if (_memo.results.peek() == null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_index.element, _memo.input))
                    }
                    _label = 10
                }
                // AND 10
                10 -> {
                    val _r10_2 = _memo.results.pop()
                    val _r10_1 = _memo.results.pop()

                    if (_r10_1 != null && _r10_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i10, _index.element, _memo.input, (_r10_1.results + _r10_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i10
                    }

                    // AND shortcut 9
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 9
                        continue
                    }

                    // STAR 31
                    _start_i31 = _index.element
                    _label = 31
                }
                // STAR 31
                31 -> {
                    // CALLORVAR NL
                    var _r32: _KotlinParser_Item? = null
                    _r32 = _MemoCall(_memo, "NL", _index.element, ::NL, null)
                    if (_r32 != null) _index.element = _r32.nextIndex

                    // STAR 31
                    val _r31 = _memo.results.pop()
                    if (_r31 != null) {
                        _res31 += _r31.results
                        _label = 31
                        continue
                    } else {
                        _memo.results.push(_KotlinParser_Item(_start_i31, _index.element, _memo.input, _res31.filterNotNull(), true))
                    }

                    _label = 9
                }
                // AND 9
                9 -> {
                    val _r9_2 = _memo.results.pop()
                    val _r9_1 = _memo.results.pop()

                    if (_r9_1 != null && _r9_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i9, _index.element, _memo.input, (_r9_1.results + _r9_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i9
                    }

                    // AND shortcut 8
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 8
                        continue
                    }

                    // CALLORVAR functionBody
                    var _r34: _KotlinParser_Item? = null
                    _r34 = _MemoCall(_memo, "functionBody", _index.element, ::functionBody, null)
                    if (_r34 != null) _index.element = _r34.nextIndex

                    // BIND b
                    b = _memo.results.peek()

                    _label = 8
                }
                // AND 8
                8 -> {
                    val _r8_2 = _memo.results.pop()
                    val _r8_1 = _memo.results.pop()

                    if (_r8_1 != null && _r8_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i8, _index.element, _memo.input, (_r8_1.results + _r8_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i8
                    }

                    // QUES 7
                    if (_memo.results.peek() == null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_index.element, _memo.input))
                    }
                    _label = 1
                }
                // AND 1
                1 -> {
                    val _r1_2 = _memo.results.pop()
                    val _r1_1 = _memo.results.pop()

                    if (_r1_1 != null && _r1_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i1, _index.element, _memo.input, (_r1_1.results + _r1_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i1
                    }

                    // ACT 0
                    val _r0 = _memo.results.peek()
                    if (_r0 != null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_r0.startIndex, _r0.nextIndex, _memo.input, _Thunk({ AST.Getter(mods.l, t.nr, b.nr) }, _r0), true))
                    }

                    break
                }
            }
        }
    }


    open fun setter(_memo: _KotlinParser_Memo, __index: Int, _args: _KotlinParser_Args?) {
        val _index = Ref.IntRef()
        _index.element = __index

        val _arg_index = Ref.IntRef()
        val _arg_input_index = Ref.IntRef()

        var mods: _KotlinParser_Item? = null
        var param: _KotlinParser_Item? = null
        var t: _KotlinParser_Item? = null
        var b: _KotlinParser_Item? = null

        // AND 1
        var _start_i1 = _index.element

        // AND 2
        var _start_i2 = _index.element

        // AND 8
        var _start_i8 = _index.element

        // AND 9
        var _start_i9 = _index.element

        // AND 10
        var _start_i10 = _index.element

        // AND 11
        var _start_i11 = _index.element

        // AND 12
        var _start_i12 = _index.element

        // AND 13
        var _start_i13 = _index.element

        // AND 14
        var _start_i14 = _index.element

        // AND 15
        var _start_i15 = _index.element

        // AND 16
        var _start_i16 = _index.element

        // STAR 17
        var _start_i17 = _index.element
        val _inp17 = arrayListOf<Token?>()
        val _res17 = arrayListOf<AST.AstNode?>()

        // STAR 20
        var _start_i20 = _index.element
        val _inp20 = arrayListOf<Token?>()
        val _res20 = arrayListOf<AST.AstNode?>()

        // AND 25
        var _start_i25 = _index.element

        // STAR 26
        var _start_i26 = _index.element
        val _inp26 = arrayListOf<Token?>()
        val _res26 = arrayListOf<AST.AstNode?>()

        // STAR 29
        var _start_i29 = _index.element
        val _inp29 = arrayListOf<Token?>()
        val _res29 = arrayListOf<AST.AstNode?>()

        // AND 33
        var _start_i33 = _index.element

        // AND 34
        var _start_i34 = _index.element

        // AND 35
        var _start_i35 = _index.element

        // STAR 36
        var _start_i36 = _index.element
        val _inp36 = arrayListOf<Token?>()
        val _res36 = arrayListOf<AST.AstNode?>()

        // STAR 39
        var _start_i39 = _index.element
        val _inp39 = arrayListOf<Token?>()
        val _res39 = arrayListOf<AST.AstNode?>()

        // STAR 43
        var _start_i43 = _index.element
        val _inp43 = arrayListOf<Token?>()
        val _res43 = arrayListOf<AST.AstNode?>()

        var _label = -1
        while(true) {
            when(_label) {
                -1 -> {
                    // AND 1
                    _start_i1 = _index.element

                    // AND 2
                    _start_i2 = _index.element

                    // CALLORVAR modifiers
                    var _r5: _KotlinParser_Item? = null
                    _r5 = _MemoCall(_memo, "modifiers", _index.element, ::modifiers, null)
                    if (_r5 != null) _index.element = _r5.nextIndex

                    // QUES 4
                    if (_memo.results.peek() == null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_index.element, _memo.input))
                    }
                    // BIND mods
                    mods = _memo.results.peek()

                    // AND shortcut 2
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 2
                        continue
                    }

                    // CALLORVAR SET
                    var _r6: _KotlinParser_Item? = null
                    _r6 = _MemoCall(_memo, "SET", _index.element, ::SET, null)
                    if (_r6 != null) _index.element = _r6.nextIndex

                    _label = 2
                }
                // AND 2
                2 -> {
                    val _r2_2 = _memo.results.pop()
                    val _r2_1 = _memo.results.pop()

                    if (_r2_1 != null && _r2_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i2, _index.element, _memo.input, (_r2_1.results + _r2_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i2
                    }

                    // AND shortcut 1
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 1
                        continue
                    }

                    // AND 8
                    _start_i8 = _index.element

                    // AND 9
                    _start_i9 = _index.element

                    // AND 10
                    _start_i10 = _index.element

                    // AND 11
                    _start_i11 = _index.element

                    // AND 12
                    _start_i12 = _index.element

                    // AND 13
                    _start_i13 = _index.element

                    // AND 14
                    _start_i14 = _index.element

                    // AND 15
                    _start_i15 = _index.element

                    // AND 16
                    _start_i16 = _index.element

                    // STAR 17
                    _start_i17 = _index.element
                    _label = 17
                }
                // STAR 17
                17 -> {
                    // CALLORVAR NL
                    var _r18: _KotlinParser_Item? = null
                    _r18 = _MemoCall(_memo, "NL", _index.element, ::NL, null)
                    if (_r18 != null) _index.element = _r18.nextIndex

                    // STAR 17
                    val _r17 = _memo.results.pop()
                    if (_r17 != null) {
                        _res17 += _r17.results
                        _label = 17
                        continue
                    } else {
                        _memo.results.push(_KotlinParser_Item(_start_i17, _index.element, _memo.input, _res17.filterNotNull(), true))
                    }

                    // AND shortcut 16
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 16
                        continue
                    }

                    // CALLORVAR LPAREN
                    var _r19: _KotlinParser_Item? = null
                    _r19 = _MemoCall(_memo, "LPAREN", _index.element, ::LPAREN, null)
                    if (_r19 != null) _index.element = _r19.nextIndex

                    _label = 16
                }
                // AND 16
                16 -> {
                    val _r16_2 = _memo.results.pop()
                    val _r16_1 = _memo.results.pop()

                    if (_r16_1 != null && _r16_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i16, _index.element, _memo.input, (_r16_1.results + _r16_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i16
                    }

                    // AND shortcut 15
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 15
                        continue
                    }

                    // STAR 20
                    _start_i20 = _index.element
                    _label = 20
                }
                // STAR 20
                20 -> {
                    // CALLORVAR NL
                    var _r21: _KotlinParser_Item? = null
                    _r21 = _MemoCall(_memo, "NL", _index.element, ::NL, null)
                    if (_r21 != null) _index.element = _r21.nextIndex

                    // STAR 20
                    val _r20 = _memo.results.pop()
                    if (_r20 != null) {
                        _res20 += _r20.results
                        _label = 20
                        continue
                    } else {
                        _memo.results.push(_KotlinParser_Item(_start_i20, _index.element, _memo.input, _res20.filterNotNull(), true))
                    }

                    _label = 15
                }
                // AND 15
                15 -> {
                    val _r15_2 = _memo.results.pop()
                    val _r15_1 = _memo.results.pop()

                    if (_r15_1 != null && _r15_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i15, _index.element, _memo.input, (_r15_1.results + _r15_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i15
                    }

                    // AND shortcut 14
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 14
                        continue
                    }

                    // CALLORVAR functionValueParameterWithOptionalType
                    var _r23: _KotlinParser_Item? = null
                    _r23 = _MemoCall(_memo, "functionValueParameterWithOptionalType", _index.element, ::functionValueParameterWithOptionalType, null)
                    if (_r23 != null) _index.element = _r23.nextIndex

                    // BIND param
                    param = _memo.results.peek()

                    _label = 14
                }
                // AND 14
                14 -> {
                    val _r14_2 = _memo.results.pop()
                    val _r14_1 = _memo.results.pop()

                    if (_r14_1 != null && _r14_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i14, _index.element, _memo.input, (_r14_1.results + _r14_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i14
                    }

                    // AND shortcut 13
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 13
                        continue
                    }

                    // AND 25
                    _start_i25 = _index.element

                    // STAR 26
                    _start_i26 = _index.element
                    _label = 26
                }
                // STAR 26
                26 -> {
                    // CALLORVAR NL
                    var _r27: _KotlinParser_Item? = null
                    _r27 = _MemoCall(_memo, "NL", _index.element, ::NL, null)
                    if (_r27 != null) _index.element = _r27.nextIndex

                    // STAR 26
                    val _r26 = _memo.results.pop()
                    if (_r26 != null) {
                        _res26 += _r26.results
                        _label = 26
                        continue
                    } else {
                        _memo.results.push(_KotlinParser_Item(_start_i26, _index.element, _memo.input, _res26.filterNotNull(), true))
                    }

                    // AND shortcut 25
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 25
                        continue
                    }

                    // CALLORVAR COMMA
                    var _r28: _KotlinParser_Item? = null
                    _r28 = _MemoCall(_memo, "COMMA", _index.element, ::COMMA, null)
                    if (_r28 != null) _index.element = _r28.nextIndex

                    _label = 25
                }
                // AND 25
                25 -> {
                    val _r25_2 = _memo.results.pop()
                    val _r25_1 = _memo.results.pop()

                    if (_r25_1 != null && _r25_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i25, _index.element, _memo.input, (_r25_1.results + _r25_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i25
                    }

                    // QUES 24
                    if (_memo.results.peek() == null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_index.element, _memo.input))
                    }
                    _label = 13
                }
                // AND 13
                13 -> {
                    val _r13_2 = _memo.results.pop()
                    val _r13_1 = _memo.results.pop()

                    if (_r13_1 != null && _r13_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i13, _index.element, _memo.input, (_r13_1.results + _r13_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i13
                    }

                    // AND shortcut 12
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 12
                        continue
                    }

                    // STAR 29
                    _start_i29 = _index.element
                    _label = 29
                }
                // STAR 29
                29 -> {
                    // CALLORVAR NL
                    var _r30: _KotlinParser_Item? = null
                    _r30 = _MemoCall(_memo, "NL", _index.element, ::NL, null)
                    if (_r30 != null) _index.element = _r30.nextIndex

                    // STAR 29
                    val _r29 = _memo.results.pop()
                    if (_r29 != null) {
                        _res29 += _r29.results
                        _label = 29
                        continue
                    } else {
                        _memo.results.push(_KotlinParser_Item(_start_i29, _index.element, _memo.input, _res29.filterNotNull(), true))
                    }

                    _label = 12
                }
                // AND 12
                12 -> {
                    val _r12_2 = _memo.results.pop()
                    val _r12_1 = _memo.results.pop()

                    if (_r12_1 != null && _r12_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i12, _index.element, _memo.input, (_r12_1.results + _r12_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i12
                    }

                    // AND shortcut 11
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 11
                        continue
                    }

                    // CALLORVAR RPAREN
                    var _r31: _KotlinParser_Item? = null
                    _r31 = _MemoCall(_memo, "RPAREN", _index.element, ::RPAREN, null)
                    if (_r31 != null) _index.element = _r31.nextIndex

                    _label = 11
                }
                // AND 11
                11 -> {
                    val _r11_2 = _memo.results.pop()
                    val _r11_1 = _memo.results.pop()

                    if (_r11_1 != null && _r11_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i11, _index.element, _memo.input, (_r11_1.results + _r11_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i11
                    }

                    // AND shortcut 10
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 10
                        continue
                    }

                    // AND 33
                    _start_i33 = _index.element

                    // AND 34
                    _start_i34 = _index.element

                    // AND 35
                    _start_i35 = _index.element

                    // STAR 36
                    _start_i36 = _index.element
                    _label = 36
                }
                // STAR 36
                36 -> {
                    // CALLORVAR NL
                    var _r37: _KotlinParser_Item? = null
                    _r37 = _MemoCall(_memo, "NL", _index.element, ::NL, null)
                    if (_r37 != null) _index.element = _r37.nextIndex

                    // STAR 36
                    val _r36 = _memo.results.pop()
                    if (_r36 != null) {
                        _res36 += _r36.results
                        _label = 36
                        continue
                    } else {
                        _memo.results.push(_KotlinParser_Item(_start_i36, _index.element, _memo.input, _res36.filterNotNull(), true))
                    }

                    // AND shortcut 35
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 35
                        continue
                    }

                    // CALLORVAR COLON
                    var _r38: _KotlinParser_Item? = null
                    _r38 = _MemoCall(_memo, "COLON", _index.element, ::COLON, null)
                    if (_r38 != null) _index.element = _r38.nextIndex

                    _label = 35
                }
                // AND 35
                35 -> {
                    val _r35_2 = _memo.results.pop()
                    val _r35_1 = _memo.results.pop()

                    if (_r35_1 != null && _r35_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i35, _index.element, _memo.input, (_r35_1.results + _r35_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i35
                    }

                    // AND shortcut 34
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 34
                        continue
                    }

                    // STAR 39
                    _start_i39 = _index.element
                    _label = 39
                }
                // STAR 39
                39 -> {
                    // CALLORVAR NL
                    var _r40: _KotlinParser_Item? = null
                    _r40 = _MemoCall(_memo, "NL", _index.element, ::NL, null)
                    if (_r40 != null) _index.element = _r40.nextIndex

                    // STAR 39
                    val _r39 = _memo.results.pop()
                    if (_r39 != null) {
                        _res39 += _r39.results
                        _label = 39
                        continue
                    } else {
                        _memo.results.push(_KotlinParser_Item(_start_i39, _index.element, _memo.input, _res39.filterNotNull(), true))
                    }

                    _label = 34
                }
                // AND 34
                34 -> {
                    val _r34_2 = _memo.results.pop()
                    val _r34_1 = _memo.results.pop()

                    if (_r34_1 != null && _r34_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i34, _index.element, _memo.input, (_r34_1.results + _r34_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i34
                    }

                    // AND shortcut 33
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 33
                        continue
                    }

                    // CALLORVAR type
                    var _r42: _KotlinParser_Item? = null
                    _r42 = _MemoCall(_memo, "type", _index.element, ::type, null)
                    if (_r42 != null) _index.element = _r42.nextIndex

                    // BIND t
                    t = _memo.results.peek()

                    _label = 33
                }
                // AND 33
                33 -> {
                    val _r33_2 = _memo.results.pop()
                    val _r33_1 = _memo.results.pop()

                    if (_r33_1 != null && _r33_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i33, _index.element, _memo.input, (_r33_1.results + _r33_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i33
                    }

                    // QUES 32
                    if (_memo.results.peek() == null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_index.element, _memo.input))
                    }
                    _label = 10
                }
                // AND 10
                10 -> {
                    val _r10_2 = _memo.results.pop()
                    val _r10_1 = _memo.results.pop()

                    if (_r10_1 != null && _r10_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i10, _index.element, _memo.input, (_r10_1.results + _r10_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i10
                    }

                    // AND shortcut 9
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 9
                        continue
                    }

                    // STAR 43
                    _start_i43 = _index.element
                    _label = 43
                }
                // STAR 43
                43 -> {
                    // CALLORVAR NL
                    var _r44: _KotlinParser_Item? = null
                    _r44 = _MemoCall(_memo, "NL", _index.element, ::NL, null)
                    if (_r44 != null) _index.element = _r44.nextIndex

                    // STAR 43
                    val _r43 = _memo.results.pop()
                    if (_r43 != null) {
                        _res43 += _r43.results
                        _label = 43
                        continue
                    } else {
                        _memo.results.push(_KotlinParser_Item(_start_i43, _index.element, _memo.input, _res43.filterNotNull(), true))
                    }

                    _label = 9
                }
                // AND 9
                9 -> {
                    val _r9_2 = _memo.results.pop()
                    val _r9_1 = _memo.results.pop()

                    if (_r9_1 != null && _r9_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i9, _index.element, _memo.input, (_r9_1.results + _r9_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i9
                    }

                    // AND shortcut 8
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 8
                        continue
                    }

                    // CALLORVAR functionBody
                    var _r46: _KotlinParser_Item? = null
                    _r46 = _MemoCall(_memo, "functionBody", _index.element, ::functionBody, null)
                    if (_r46 != null) _index.element = _r46.nextIndex

                    // BIND b
                    b = _memo.results.peek()

                    _label = 8
                }
                // AND 8
                8 -> {
                    val _r8_2 = _memo.results.pop()
                    val _r8_1 = _memo.results.pop()

                    if (_r8_1 != null && _r8_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i8, _index.element, _memo.input, (_r8_1.results + _r8_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i8
                    }

                    // QUES 7
                    if (_memo.results.peek() == null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_index.element, _memo.input))
                    }
                    _label = 1
                }
                // AND 1
                1 -> {
                    val _r1_2 = _memo.results.pop()
                    val _r1_1 = _memo.results.pop()

                    if (_r1_1 != null && _r1_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i1, _index.element, _memo.input, (_r1_1.results + _r1_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i1
                    }

                    // ACT 0
                    val _r0 = _memo.results.peek()
                    if (_r0 != null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_r0.startIndex, _r0.nextIndex, _memo.input, _Thunk({ AST.Setter(mods.l, param.nr, t.nr, b.nr) }, _r0), true))
                    }

                    break
                }
            }
        }
    }


    open fun parametersWithOptionalType(_memo: _KotlinParser_Memo, __index: Int, _args: _KotlinParser_Args?) {
        val _index = Ref.IntRef()
        _index.element = __index

        val _arg_index = Ref.IntRef()
        val _arg_input_index = Ref.IntRef()

        // AND 1
        var _start_i1 = _index.element

        // AND 2
        var _start_i2 = _index.element

        // AND 3
        var _start_i3 = _index.element

        // AND 4
        var _start_i4 = _index.element

        // STAR 6
        var _start_i6 = _index.element
        val _inp6 = arrayListOf<Token?>()
        val _res6 = arrayListOf<AST.AstNode?>()

        // AND 9
        var _start_i9 = _index.element

        // AND 10
        var _start_i10 = _index.element

        // STAR 12
        var _start_i12 = _index.element
        val _inp12 = arrayListOf<Token?>()
        val _res12 = arrayListOf<AST.AstNode?>()

        // AND 13
        var _start_i13 = _index.element

        // AND 14
        var _start_i14 = _index.element

        // AND 15
        var _start_i15 = _index.element

        // STAR 16
        var _start_i16 = _index.element
        val _inp16 = arrayListOf<Token?>()
        val _res16 = arrayListOf<AST.AstNode?>()

        // STAR 19
        var _start_i19 = _index.element
        val _inp19 = arrayListOf<Token?>()
        val _res19 = arrayListOf<AST.AstNode?>()

        // AND 23
        var _start_i23 = _index.element

        // STAR 24
        var _start_i24 = _index.element
        val _inp24 = arrayListOf<Token?>()
        val _res24 = arrayListOf<AST.AstNode?>()

        // STAR 27
        var _start_i27 = _index.element
        val _inp27 = arrayListOf<Token?>()
        val _res27 = arrayListOf<AST.AstNode?>()

        var _label = -1
        while(true) {
            when(_label) {
                -1 -> {
                    // AND 1
                    _start_i1 = _index.element

                    // AND 2
                    _start_i2 = _index.element

                    // AND 3
                    _start_i3 = _index.element

                    // AND 4
                    _start_i4 = _index.element

                    // CALLORVAR LPAREN
                    var _r5: _KotlinParser_Item? = null
                    _r5 = _MemoCall(_memo, "LPAREN", _index.element, ::LPAREN, null)
                    if (_r5 != null) _index.element = _r5.nextIndex

                    // AND shortcut 4
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 4
                        continue
                    }

                    // STAR 6
                    _start_i6 = _index.element
                    _label = 6
                }
                // STAR 6
                6 -> {
                    // CALLORVAR NL
                    var _r7: _KotlinParser_Item? = null
                    _r7 = _MemoCall(_memo, "NL", _index.element, ::NL, null)
                    if (_r7 != null) _index.element = _r7.nextIndex

                    // STAR 6
                    val _r6 = _memo.results.pop()
                    if (_r6 != null) {
                        _res6 += _r6.results
                        _label = 6
                        continue
                    } else {
                        _memo.results.push(_KotlinParser_Item(_start_i6, _index.element, _memo.input, _res6.filterNotNull(), true))
                    }

                    _label = 4
                }
                // AND 4
                4 -> {
                    val _r4_2 = _memo.results.pop()
                    val _r4_1 = _memo.results.pop()

                    if (_r4_1 != null && _r4_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i4, _index.element, _memo.input, (_r4_1.results + _r4_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i4
                    }

                    // AND shortcut 3
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 3
                        continue
                    }

                    // AND 9
                    _start_i9 = _index.element

                    // AND 10
                    _start_i10 = _index.element

                    // CALLORVAR functionValueParameterWithOptionalType
                    var _r11: _KotlinParser_Item? = null
                    _r11 = _MemoCall(_memo, "functionValueParameterWithOptionalType", _index.element, ::functionValueParameterWithOptionalType, null)
                    if (_r11 != null) _index.element = _r11.nextIndex

                    // AND shortcut 10
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 10
                        continue
                    }

                    // STAR 12
                    _start_i12 = _index.element
                    _label = 12
                }
                // STAR 12
                12 -> {
                    // AND 13
                    _start_i13 = _index.element

                    // AND 14
                    _start_i14 = _index.element

                    // AND 15
                    _start_i15 = _index.element

                    // STAR 16
                    _start_i16 = _index.element
                    _label = 16
                }
                // STAR 16
                16 -> {
                    // CALLORVAR NL
                    var _r17: _KotlinParser_Item? = null
                    _r17 = _MemoCall(_memo, "NL", _index.element, ::NL, null)
                    if (_r17 != null) _index.element = _r17.nextIndex

                    // STAR 16
                    val _r16 = _memo.results.pop()
                    if (_r16 != null) {
                        _res16 += _r16.results
                        _label = 16
                        continue
                    } else {
                        _memo.results.push(_KotlinParser_Item(_start_i16, _index.element, _memo.input, _res16.filterNotNull(), true))
                    }

                    // AND shortcut 15
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 15
                        continue
                    }

                    // CALLORVAR COMMA
                    var _r18: _KotlinParser_Item? = null
                    _r18 = _MemoCall(_memo, "COMMA", _index.element, ::COMMA, null)
                    if (_r18 != null) _index.element = _r18.nextIndex

                    _label = 15
                }
                // AND 15
                15 -> {
                    val _r15_2 = _memo.results.pop()
                    val _r15_1 = _memo.results.pop()

                    if (_r15_1 != null && _r15_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i15, _index.element, _memo.input, (_r15_1.results + _r15_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i15
                    }

                    // AND shortcut 14
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 14
                        continue
                    }

                    // STAR 19
                    _start_i19 = _index.element
                    _label = 19
                }
                // STAR 19
                19 -> {
                    // CALLORVAR NL
                    var _r20: _KotlinParser_Item? = null
                    _r20 = _MemoCall(_memo, "NL", _index.element, ::NL, null)
                    if (_r20 != null) _index.element = _r20.nextIndex

                    // STAR 19
                    val _r19 = _memo.results.pop()
                    if (_r19 != null) {
                        _res19 += _r19.results
                        _label = 19
                        continue
                    } else {
                        _memo.results.push(_KotlinParser_Item(_start_i19, _index.element, _memo.input, _res19.filterNotNull(), true))
                    }

                    _label = 14
                }
                // AND 14
                14 -> {
                    val _r14_2 = _memo.results.pop()
                    val _r14_1 = _memo.results.pop()

                    if (_r14_1 != null && _r14_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i14, _index.element, _memo.input, (_r14_1.results + _r14_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i14
                    }

                    // AND shortcut 13
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 13
                        continue
                    }

                    // CALLORVAR functionValueParameterWithOptionalType
                    var _r21: _KotlinParser_Item? = null
                    _r21 = _MemoCall(_memo, "functionValueParameterWithOptionalType", _index.element, ::functionValueParameterWithOptionalType, null)
                    if (_r21 != null) _index.element = _r21.nextIndex

                    _label = 13
                }
                // AND 13
                13 -> {
                    val _r13_2 = _memo.results.pop()
                    val _r13_1 = _memo.results.pop()

                    if (_r13_1 != null && _r13_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i13, _index.element, _memo.input, (_r13_1.results + _r13_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i13
                    }

                    // STAR 12
                    val _r12 = _memo.results.pop()
                    if (_r12 != null) {
                        _res12 += _r12.results
                        _label = 12
                        continue
                    } else {
                        _memo.results.push(_KotlinParser_Item(_start_i12, _index.element, _memo.input, _res12.filterNotNull(), true))
                    }

                    _label = 10
                }
                // AND 10
                10 -> {
                    val _r10_2 = _memo.results.pop()
                    val _r10_1 = _memo.results.pop()

                    if (_r10_1 != null && _r10_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i10, _index.element, _memo.input, (_r10_1.results + _r10_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i10
                    }

                    // AND shortcut 9
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 9
                        continue
                    }

                    // AND 23
                    _start_i23 = _index.element

                    // STAR 24
                    _start_i24 = _index.element
                    _label = 24
                }
                // STAR 24
                24 -> {
                    // CALLORVAR NL
                    var _r25: _KotlinParser_Item? = null
                    _r25 = _MemoCall(_memo, "NL", _index.element, ::NL, null)
                    if (_r25 != null) _index.element = _r25.nextIndex

                    // STAR 24
                    val _r24 = _memo.results.pop()
                    if (_r24 != null) {
                        _res24 += _r24.results
                        _label = 24
                        continue
                    } else {
                        _memo.results.push(_KotlinParser_Item(_start_i24, _index.element, _memo.input, _res24.filterNotNull(), true))
                    }

                    // AND shortcut 23
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 23
                        continue
                    }

                    // CALLORVAR COMMA
                    var _r26: _KotlinParser_Item? = null
                    _r26 = _MemoCall(_memo, "COMMA", _index.element, ::COMMA, null)
                    if (_r26 != null) _index.element = _r26.nextIndex

                    _label = 23
                }
                // AND 23
                23 -> {
                    val _r23_2 = _memo.results.pop()
                    val _r23_1 = _memo.results.pop()

                    if (_r23_1 != null && _r23_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i23, _index.element, _memo.input, (_r23_1.results + _r23_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i23
                    }

                    // QUES 22
                    if (_memo.results.peek() == null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_index.element, _memo.input))
                    }
                    _label = 9
                }
                // AND 9
                9 -> {
                    val _r9_2 = _memo.results.pop()
                    val _r9_1 = _memo.results.pop()

                    if (_r9_1 != null && _r9_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i9, _index.element, _memo.input, (_r9_1.results + _r9_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i9
                    }

                    // QUES 8
                    if (_memo.results.peek() == null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_index.element, _memo.input))
                    }
                    _label = 3
                }
                // AND 3
                3 -> {
                    val _r3_2 = _memo.results.pop()
                    val _r3_1 = _memo.results.pop()

                    if (_r3_1 != null && _r3_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i3, _index.element, _memo.input, (_r3_1.results + _r3_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i3
                    }

                    // AND shortcut 2
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 2
                        continue
                    }

                    // STAR 27
                    _start_i27 = _index.element
                    _label = 27
                }
                // STAR 27
                27 -> {
                    // CALLORVAR NL
                    var _r28: _KotlinParser_Item? = null
                    _r28 = _MemoCall(_memo, "NL", _index.element, ::NL, null)
                    if (_r28 != null) _index.element = _r28.nextIndex

                    // STAR 27
                    val _r27 = _memo.results.pop()
                    if (_r27 != null) {
                        _res27 += _r27.results
                        _label = 27
                        continue
                    } else {
                        _memo.results.push(_KotlinParser_Item(_start_i27, _index.element, _memo.input, _res27.filterNotNull(), true))
                    }

                    _label = 2
                }
                // AND 2
                2 -> {
                    val _r2_2 = _memo.results.pop()
                    val _r2_1 = _memo.results.pop()

                    if (_r2_1 != null && _r2_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i2, _index.element, _memo.input, (_r2_1.results + _r2_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i2
                    }

                    // AND shortcut 1
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 1
                        continue
                    }

                    // CALLORVAR RPAREN
                    var _r29: _KotlinParser_Item? = null
                    _r29 = _MemoCall(_memo, "RPAREN", _index.element, ::RPAREN, null)
                    if (_r29 != null) _index.element = _r29.nextIndex

                    _label = 1
                }
                // AND 1
                1 -> {
                    val _r1_2 = _memo.results.pop()
                    val _r1_1 = _memo.results.pop()

                    if (_r1_1 != null && _r1_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i1, _index.element, _memo.input, (_r1_1.results + _r1_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i1
                    }

                    // ACT 0
                    val _r0 = _memo.results.peek()
                    if (_r0 != null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_r0.startIndex, _r0.nextIndex, _memo.input, _Thunk({ it.l }, _r0), true))
                    }

                    break
                }
            }
        }
    }


    open fun functionValueParameterWithOptionalType(_memo: _KotlinParser_Memo, __index: Int, _args: _KotlinParser_Args?) {
        val _index = Ref.IntRef()
        _index.element = __index

        val _arg_index = Ref.IntRef()
        val _arg_input_index = Ref.IntRef()

        var mods: _KotlinParser_Item? = null
        var param: _KotlinParser_Item? = null
        var expr: _KotlinParser_Item? = null

        // AND 1
        var _start_i1 = _index.element

        // AND 2
        var _start_i2 = _index.element

        // AND 9
        var _start_i9 = _index.element

        // AND 10
        var _start_i10 = _index.element

        // AND 11
        var _start_i11 = _index.element

        // STAR 12
        var _start_i12 = _index.element
        val _inp12 = arrayListOf<Token?>()
        val _res12 = arrayListOf<AST.AstNode?>()

        // STAR 15
        var _start_i15 = _index.element
        val _inp15 = arrayListOf<Token?>()
        val _res15 = arrayListOf<AST.AstNode?>()

        var _label = -1
        while(true) {
            when(_label) {
                -1 -> {
                    // AND 1
                    _start_i1 = _index.element

                    // AND 2
                    _start_i2 = _index.element

                    // CALLORVAR parameterModifiers
                    var _r5: _KotlinParser_Item? = null
                    _r5 = _MemoCall(_memo, "parameterModifiers", _index.element, ::parameterModifiers, null)
                    if (_r5 != null) _index.element = _r5.nextIndex

                    // QUES 4
                    if (_memo.results.peek() == null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_index.element, _memo.input))
                    }
                    // BIND mods
                    mods = _memo.results.peek()

                    // AND shortcut 2
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 2
                        continue
                    }

                    // CALLORVAR parameterWithOptionalType
                    var _r7: _KotlinParser_Item? = null
                    _r7 = _MemoCall(_memo, "parameterWithOptionalType", _index.element, ::parameterWithOptionalType, null)
                    if (_r7 != null) _index.element = _r7.nextIndex

                    // BIND param
                    param = _memo.results.peek()

                    _label = 2
                }
                // AND 2
                2 -> {
                    val _r2_2 = _memo.results.pop()
                    val _r2_1 = _memo.results.pop()

                    if (_r2_1 != null && _r2_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i2, _index.element, _memo.input, (_r2_1.results + _r2_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i2
                    }

                    // AND shortcut 1
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 1
                        continue
                    }

                    // AND 9
                    _start_i9 = _index.element

                    // AND 10
                    _start_i10 = _index.element

                    // AND 11
                    _start_i11 = _index.element

                    // STAR 12
                    _start_i12 = _index.element
                    _label = 12
                }
                // STAR 12
                12 -> {
                    // CALLORVAR NL
                    var _r13: _KotlinParser_Item? = null
                    _r13 = _MemoCall(_memo, "NL", _index.element, ::NL, null)
                    if (_r13 != null) _index.element = _r13.nextIndex

                    // STAR 12
                    val _r12 = _memo.results.pop()
                    if (_r12 != null) {
                        _res12 += _r12.results
                        _label = 12
                        continue
                    } else {
                        _memo.results.push(_KotlinParser_Item(_start_i12, _index.element, _memo.input, _res12.filterNotNull(), true))
                    }

                    // AND shortcut 11
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 11
                        continue
                    }

                    // CALLORVAR ASSIGNMENT
                    var _r14: _KotlinParser_Item? = null
                    _r14 = _MemoCall(_memo, "ASSIGNMENT", _index.element, ::ASSIGNMENT, null)
                    if (_r14 != null) _index.element = _r14.nextIndex

                    _label = 11
                }
                // AND 11
                11 -> {
                    val _r11_2 = _memo.results.pop()
                    val _r11_1 = _memo.results.pop()

                    if (_r11_1 != null && _r11_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i11, _index.element, _memo.input, (_r11_1.results + _r11_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i11
                    }

                    // AND shortcut 10
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 10
                        continue
                    }

                    // STAR 15
                    _start_i15 = _index.element
                    _label = 15
                }
                // STAR 15
                15 -> {
                    // CALLORVAR NL
                    var _r16: _KotlinParser_Item? = null
                    _r16 = _MemoCall(_memo, "NL", _index.element, ::NL, null)
                    if (_r16 != null) _index.element = _r16.nextIndex

                    // STAR 15
                    val _r15 = _memo.results.pop()
                    if (_r15 != null) {
                        _res15 += _r15.results
                        _label = 15
                        continue
                    } else {
                        _memo.results.push(_KotlinParser_Item(_start_i15, _index.element, _memo.input, _res15.filterNotNull(), true))
                    }

                    _label = 10
                }
                // AND 10
                10 -> {
                    val _r10_2 = _memo.results.pop()
                    val _r10_1 = _memo.results.pop()

                    if (_r10_1 != null && _r10_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i10, _index.element, _memo.input, (_r10_1.results + _r10_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i10
                    }

                    // AND shortcut 9
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 9
                        continue
                    }

                    // CALLORVAR expression
                    var _r18: _KotlinParser_Item? = null
                    _r18 = _MemoCall(_memo, "expression", _index.element, ::expression, null)
                    if (_r18 != null) _index.element = _r18.nextIndex

                    // BIND expr
                    expr = _memo.results.peek()

                    _label = 9
                }
                // AND 9
                9 -> {
                    val _r9_2 = _memo.results.pop()
                    val _r9_1 = _memo.results.pop()

                    if (_r9_1 != null && _r9_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i9, _index.element, _memo.input, (_r9_1.results + _r9_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i9
                    }

                    // QUES 8
                    if (_memo.results.peek() == null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_index.element, _memo.input))
                    }
                    _label = 1
                }
                // AND 1
                1 -> {
                    val _r1_2 = _memo.results.pop()
                    val _r1_1 = _memo.results.pop()

                    if (_r1_1 != null && _r1_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i1, _index.element, _memo.input, (_r1_1.results + _r1_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i1
                    }

                    // ACT 0
                    val _r0 = _memo.results.peek()
                    if (_r0 != null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_r0.startIndex, _r0.nextIndex, _memo.input, _Thunk({ val (name, type) = param.r as AST.NameAndType
                                                AST.ValueParameter(mods.l, name!!, type!!, expr.nr) }, _r0), true))
                    }

                    break
                }
            }
        }
    }


    open fun parameterWithOptionalType(_memo: _KotlinParser_Memo, __index: Int, _args: _KotlinParser_Args?) {
        val _index = Ref.IntRef()
        _index.element = __index

        val _arg_index = Ref.IntRef()
        val _arg_input_index = Ref.IntRef()

        var name: _KotlinParser_Item? = null
        var t: _KotlinParser_Item? = null

        // AND 1
        var _start_i1 = _index.element

        // AND 2
        var _start_i2 = _index.element

        // STAR 5
        var _start_i5 = _index.element
        val _inp5 = arrayListOf<Token?>()
        val _res5 = arrayListOf<AST.AstNode?>()

        // AND 8
        var _start_i8 = _index.element

        // AND 9
        var _start_i9 = _index.element

        // STAR 11
        var _start_i11 = _index.element
        val _inp11 = arrayListOf<Token?>()
        val _res11 = arrayListOf<AST.AstNode?>()

        var _label = -1
        while(true) {
            when(_label) {
                -1 -> {
                    // AND 1
                    _start_i1 = _index.element

                    // AND 2
                    _start_i2 = _index.element

                    // CALLORVAR simpleIdentifier
                    var _r4: _KotlinParser_Item? = null
                    _r4 = _MemoCall(_memo, "simpleIdentifier", _index.element, ::simpleIdentifier, null)
                    if (_r4 != null) _index.element = _r4.nextIndex

                    // BIND name
                    name = _memo.results.peek()

                    // AND shortcut 2
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 2
                        continue
                    }

                    // STAR 5
                    _start_i5 = _index.element
                    _label = 5
                }
                // STAR 5
                5 -> {
                    // CALLORVAR NL
                    var _r6: _KotlinParser_Item? = null
                    _r6 = _MemoCall(_memo, "NL", _index.element, ::NL, null)
                    if (_r6 != null) _index.element = _r6.nextIndex

                    // STAR 5
                    val _r5 = _memo.results.pop()
                    if (_r5 != null) {
                        _res5 += _r5.results
                        _label = 5
                        continue
                    } else {
                        _memo.results.push(_KotlinParser_Item(_start_i5, _index.element, _memo.input, _res5.filterNotNull(), true))
                    }

                    _label = 2
                }
                // AND 2
                2 -> {
                    val _r2_2 = _memo.results.pop()
                    val _r2_1 = _memo.results.pop()

                    if (_r2_1 != null && _r2_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i2, _index.element, _memo.input, (_r2_1.results + _r2_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i2
                    }

                    // AND shortcut 1
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 1
                        continue
                    }

                    // AND 8
                    _start_i8 = _index.element

                    // AND 9
                    _start_i9 = _index.element

                    // CALLORVAR COLON
                    var _r10: _KotlinParser_Item? = null
                    _r10 = _MemoCall(_memo, "COLON", _index.element, ::COLON, null)
                    if (_r10 != null) _index.element = _r10.nextIndex

                    // AND shortcut 9
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 9
                        continue
                    }

                    // STAR 11
                    _start_i11 = _index.element
                    _label = 11
                }
                // STAR 11
                11 -> {
                    // CALLORVAR NL
                    var _r12: _KotlinParser_Item? = null
                    _r12 = _MemoCall(_memo, "NL", _index.element, ::NL, null)
                    if (_r12 != null) _index.element = _r12.nextIndex

                    // STAR 11
                    val _r11 = _memo.results.pop()
                    if (_r11 != null) {
                        _res11 += _r11.results
                        _label = 11
                        continue
                    } else {
                        _memo.results.push(_KotlinParser_Item(_start_i11, _index.element, _memo.input, _res11.filterNotNull(), true))
                    }

                    _label = 9
                }
                // AND 9
                9 -> {
                    val _r9_2 = _memo.results.pop()
                    val _r9_1 = _memo.results.pop()

                    if (_r9_1 != null && _r9_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i9, _index.element, _memo.input, (_r9_1.results + _r9_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i9
                    }

                    // AND shortcut 8
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 8
                        continue
                    }

                    // CALLORVAR type
                    var _r14: _KotlinParser_Item? = null
                    _r14 = _MemoCall(_memo, "type", _index.element, ::type, null)
                    if (_r14 != null) _index.element = _r14.nextIndex

                    // BIND t
                    t = _memo.results.peek()

                    _label = 8
                }
                // AND 8
                8 -> {
                    val _r8_2 = _memo.results.pop()
                    val _r8_1 = _memo.results.pop()

                    if (_r8_1 != null && _r8_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i8, _index.element, _memo.input, (_r8_1.results + _r8_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i8
                    }

                    // QUES 7
                    if (_memo.results.peek() == null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_index.element, _memo.input))
                    }
                    _label = 1
                }
                // AND 1
                1 -> {
                    val _r1_2 = _memo.results.pop()
                    val _r1_1 = _memo.results.pop()

                    if (_r1_1 != null && _r1_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i1, _index.element, _memo.input, (_r1_1.results + _r1_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i1
                    }

                    // ACT 0
                    val _r0 = _memo.results.peek()
                    if (_r0 != null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_r0.startIndex, _r0.nextIndex, _memo.input, _Thunk({ AST.NameAndType(name.s, t.nr) }, _r0), true))
                    }

                    break
                }
            }
        }
    }


    open fun parameter(_memo: _KotlinParser_Memo, __index: Int, _args: _KotlinParser_Args?) {
        val _index = Ref.IntRef()
        _index.element = __index

        val _arg_index = Ref.IntRef()
        val _arg_input_index = Ref.IntRef()

        var name: _KotlinParser_Item? = null
        var t: _KotlinParser_Item? = null

        // AND 1
        var _start_i1 = _index.element

        // AND 2
        var _start_i2 = _index.element

        // AND 3
        var _start_i3 = _index.element

        // AND 4
        var _start_i4 = _index.element

        // STAR 7
        var _start_i7 = _index.element
        val _inp7 = arrayListOf<Token?>()
        val _res7 = arrayListOf<AST.AstNode?>()

        // STAR 10
        var _start_i10 = _index.element
        val _inp10 = arrayListOf<Token?>()
        val _res10 = arrayListOf<AST.AstNode?>()

        var _label = -1
        while(true) {
            when(_label) {
                -1 -> {
                    // AND 1
                    _start_i1 = _index.element

                    // AND 2
                    _start_i2 = _index.element

                    // AND 3
                    _start_i3 = _index.element

                    // AND 4
                    _start_i4 = _index.element

                    // CALLORVAR simpleIdentifier
                    var _r6: _KotlinParser_Item? = null
                    _r6 = _MemoCall(_memo, "simpleIdentifier", _index.element, ::simpleIdentifier, null)
                    if (_r6 != null) _index.element = _r6.nextIndex

                    // BIND name
                    name = _memo.results.peek()

                    // AND shortcut 4
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 4
                        continue
                    }

                    // STAR 7
                    _start_i7 = _index.element
                    _label = 7
                }
                // STAR 7
                7 -> {
                    // CALLORVAR NL
                    var _r8: _KotlinParser_Item? = null
                    _r8 = _MemoCall(_memo, "NL", _index.element, ::NL, null)
                    if (_r8 != null) _index.element = _r8.nextIndex

                    // STAR 7
                    val _r7 = _memo.results.pop()
                    if (_r7 != null) {
                        _res7 += _r7.results
                        _label = 7
                        continue
                    } else {
                        _memo.results.push(_KotlinParser_Item(_start_i7, _index.element, _memo.input, _res7.filterNotNull(), true))
                    }

                    _label = 4
                }
                // AND 4
                4 -> {
                    val _r4_2 = _memo.results.pop()
                    val _r4_1 = _memo.results.pop()

                    if (_r4_1 != null && _r4_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i4, _index.element, _memo.input, (_r4_1.results + _r4_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i4
                    }

                    // AND shortcut 3
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 3
                        continue
                    }

                    // CALLORVAR COLON
                    var _r9: _KotlinParser_Item? = null
                    _r9 = _MemoCall(_memo, "COLON", _index.element, ::COLON, null)
                    if (_r9 != null) _index.element = _r9.nextIndex

                    _label = 3
                }
                // AND 3
                3 -> {
                    val _r3_2 = _memo.results.pop()
                    val _r3_1 = _memo.results.pop()

                    if (_r3_1 != null && _r3_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i3, _index.element, _memo.input, (_r3_1.results + _r3_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i3
                    }

                    // AND shortcut 2
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 2
                        continue
                    }

                    // STAR 10
                    _start_i10 = _index.element
                    _label = 10
                }
                // STAR 10
                10 -> {
                    // CALLORVAR NL
                    var _r11: _KotlinParser_Item? = null
                    _r11 = _MemoCall(_memo, "NL", _index.element, ::NL, null)
                    if (_r11 != null) _index.element = _r11.nextIndex

                    // STAR 10
                    val _r10 = _memo.results.pop()
                    if (_r10 != null) {
                        _res10 += _r10.results
                        _label = 10
                        continue
                    } else {
                        _memo.results.push(_KotlinParser_Item(_start_i10, _index.element, _memo.input, _res10.filterNotNull(), true))
                    }

                    _label = 2
                }
                // AND 2
                2 -> {
                    val _r2_2 = _memo.results.pop()
                    val _r2_1 = _memo.results.pop()

                    if (_r2_1 != null && _r2_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i2, _index.element, _memo.input, (_r2_1.results + _r2_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i2
                    }

                    // AND shortcut 1
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 1
                        continue
                    }

                    // CALLORVAR type
                    var _r13: _KotlinParser_Item? = null
                    _r13 = _MemoCall(_memo, "type", _index.element, ::type, null)
                    if (_r13 != null) _index.element = _r13.nextIndex

                    // BIND t
                    t = _memo.results.peek()

                    _label = 1
                }
                // AND 1
                1 -> {
                    val _r1_2 = _memo.results.pop()
                    val _r1_1 = _memo.results.pop()

                    if (_r1_1 != null && _r1_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i1, _index.element, _memo.input, (_r1_1.results + _r1_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i1
                    }

                    // ACT 0
                    val _r0 = _memo.results.peek()
                    if (_r0 != null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_r0.startIndex, _r0.nextIndex, _memo.input, _Thunk({ AST.NameAndType(name.s, t.r) }, _r0), true))
                    }

                    break
                }
            }
        }
    }


    open fun objectDeclaration(_memo: _KotlinParser_Memo, __index: Int, _args: _KotlinParser_Args?) {
        val _index = Ref.IntRef()
        _index.element = __index

        val _arg_index = Ref.IntRef()
        val _arg_input_index = Ref.IntRef()

        var mods: _KotlinParser_Item? = null
        var name: _KotlinParser_Item? = null
        var ds: _KotlinParser_Item? = null
        var b: _KotlinParser_Item? = null

        // AND 1
        var _start_i1 = _index.element

        // AND 2
        var _start_i2 = _index.element

        // AND 3
        var _start_i3 = _index.element

        // AND 4
        var _start_i4 = _index.element

        // AND 5
        var _start_i5 = _index.element

        // STAR 10
        var _start_i10 = _index.element
        val _inp10 = arrayListOf<Token?>()
        val _res10 = arrayListOf<AST.AstNode?>()

        // AND 15
        var _start_i15 = _index.element

        // AND 16
        var _start_i16 = _index.element

        // AND 17
        var _start_i17 = _index.element

        // STAR 18
        var _start_i18 = _index.element
        val _inp18 = arrayListOf<Token?>()
        val _res18 = arrayListOf<AST.AstNode?>()

        // STAR 21
        var _start_i21 = _index.element
        val _inp21 = arrayListOf<Token?>()
        val _res21 = arrayListOf<AST.AstNode?>()

        // AND 26
        var _start_i26 = _index.element

        // STAR 27
        var _start_i27 = _index.element
        val _inp27 = arrayListOf<Token?>()
        val _res27 = arrayListOf<AST.AstNode?>()

        var _label = -1
        while(true) {
            when(_label) {
                -1 -> {
                    // AND 1
                    _start_i1 = _index.element

                    // AND 2
                    _start_i2 = _index.element

                    // AND 3
                    _start_i3 = _index.element

                    // AND 4
                    _start_i4 = _index.element

                    // AND 5
                    _start_i5 = _index.element

                    // CALLORVAR modifiers
                    var _r8: _KotlinParser_Item? = null
                    _r8 = _MemoCall(_memo, "modifiers", _index.element, ::modifiers, null)
                    if (_r8 != null) _index.element = _r8.nextIndex

                    // QUES 7
                    if (_memo.results.peek() == null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_index.element, _memo.input))
                    }
                    // BIND mods
                    mods = _memo.results.peek()

                    // AND shortcut 5
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 5
                        continue
                    }

                    // CALLORVAR OBJECT
                    var _r9: _KotlinParser_Item? = null
                    _r9 = _MemoCall(_memo, "OBJECT", _index.element, ::OBJECT, null)
                    if (_r9 != null) _index.element = _r9.nextIndex

                    _label = 5
                }
                // AND 5
                5 -> {
                    val _r5_2 = _memo.results.pop()
                    val _r5_1 = _memo.results.pop()

                    if (_r5_1 != null && _r5_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i5, _index.element, _memo.input, (_r5_1.results + _r5_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i5
                    }

                    // AND shortcut 4
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 4
                        continue
                    }

                    // STAR 10
                    _start_i10 = _index.element
                    _label = 10
                }
                // STAR 10
                10 -> {
                    // CALLORVAR NL
                    var _r11: _KotlinParser_Item? = null
                    _r11 = _MemoCall(_memo, "NL", _index.element, ::NL, null)
                    if (_r11 != null) _index.element = _r11.nextIndex

                    // STAR 10
                    val _r10 = _memo.results.pop()
                    if (_r10 != null) {
                        _res10 += _r10.results
                        _label = 10
                        continue
                    } else {
                        _memo.results.push(_KotlinParser_Item(_start_i10, _index.element, _memo.input, _res10.filterNotNull(), true))
                    }

                    _label = 4
                }
                // AND 4
                4 -> {
                    val _r4_2 = _memo.results.pop()
                    val _r4_1 = _memo.results.pop()

                    if (_r4_1 != null && _r4_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i4, _index.element, _memo.input, (_r4_1.results + _r4_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i4
                    }

                    // AND shortcut 3
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 3
                        continue
                    }

                    // CALLORVAR simpleIdentifier
                    var _r13: _KotlinParser_Item? = null
                    _r13 = _MemoCall(_memo, "simpleIdentifier", _index.element, ::simpleIdentifier, null)
                    if (_r13 != null) _index.element = _r13.nextIndex

                    // BIND name
                    name = _memo.results.peek()

                    _label = 3
                }
                // AND 3
                3 -> {
                    val _r3_2 = _memo.results.pop()
                    val _r3_1 = _memo.results.pop()

                    if (_r3_1 != null && _r3_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i3, _index.element, _memo.input, (_r3_1.results + _r3_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i3
                    }

                    // AND shortcut 2
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 2
                        continue
                    }

                    // AND 15
                    _start_i15 = _index.element

                    // AND 16
                    _start_i16 = _index.element

                    // AND 17
                    _start_i17 = _index.element

                    // STAR 18
                    _start_i18 = _index.element
                    _label = 18
                }
                // STAR 18
                18 -> {
                    // CALLORVAR NL
                    var _r19: _KotlinParser_Item? = null
                    _r19 = _MemoCall(_memo, "NL", _index.element, ::NL, null)
                    if (_r19 != null) _index.element = _r19.nextIndex

                    // STAR 18
                    val _r18 = _memo.results.pop()
                    if (_r18 != null) {
                        _res18 += _r18.results
                        _label = 18
                        continue
                    } else {
                        _memo.results.push(_KotlinParser_Item(_start_i18, _index.element, _memo.input, _res18.filterNotNull(), true))
                    }

                    // AND shortcut 17
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 17
                        continue
                    }

                    // CALLORVAR COLON
                    var _r20: _KotlinParser_Item? = null
                    _r20 = _MemoCall(_memo, "COLON", _index.element, ::COLON, null)
                    if (_r20 != null) _index.element = _r20.nextIndex

                    _label = 17
                }
                // AND 17
                17 -> {
                    val _r17_2 = _memo.results.pop()
                    val _r17_1 = _memo.results.pop()

                    if (_r17_1 != null && _r17_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i17, _index.element, _memo.input, (_r17_1.results + _r17_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i17
                    }

                    // AND shortcut 16
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 16
                        continue
                    }

                    // STAR 21
                    _start_i21 = _index.element
                    _label = 21
                }
                // STAR 21
                21 -> {
                    // CALLORVAR NL
                    var _r22: _KotlinParser_Item? = null
                    _r22 = _MemoCall(_memo, "NL", _index.element, ::NL, null)
                    if (_r22 != null) _index.element = _r22.nextIndex

                    // STAR 21
                    val _r21 = _memo.results.pop()
                    if (_r21 != null) {
                        _res21 += _r21.results
                        _label = 21
                        continue
                    } else {
                        _memo.results.push(_KotlinParser_Item(_start_i21, _index.element, _memo.input, _res21.filterNotNull(), true))
                    }

                    _label = 16
                }
                // AND 16
                16 -> {
                    val _r16_2 = _memo.results.pop()
                    val _r16_1 = _memo.results.pop()

                    if (_r16_1 != null && _r16_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i16, _index.element, _memo.input, (_r16_1.results + _r16_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i16
                    }

                    // AND shortcut 15
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 15
                        continue
                    }

                    // CALLORVAR annotatedDelegationSpecifiers
                    var _r24: _KotlinParser_Item? = null
                    _r24 = _MemoCall(_memo, "annotatedDelegationSpecifiers", _index.element, ::annotatedDelegationSpecifiers, null)
                    if (_r24 != null) _index.element = _r24.nextIndex

                    // BIND ds
                    ds = _memo.results.peek()

                    _label = 15
                }
                // AND 15
                15 -> {
                    val _r15_2 = _memo.results.pop()
                    val _r15_1 = _memo.results.pop()

                    if (_r15_1 != null && _r15_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i15, _index.element, _memo.input, (_r15_1.results + _r15_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i15
                    }

                    // QUES 14
                    if (_memo.results.peek() == null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_index.element, _memo.input))
                    }
                    _label = 2
                }
                // AND 2
                2 -> {
                    val _r2_2 = _memo.results.pop()
                    val _r2_1 = _memo.results.pop()

                    if (_r2_1 != null && _r2_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i2, _index.element, _memo.input, (_r2_1.results + _r2_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i2
                    }

                    // AND shortcut 1
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 1
                        continue
                    }

                    // AND 26
                    _start_i26 = _index.element

                    // STAR 27
                    _start_i27 = _index.element
                    _label = 27
                }
                // STAR 27
                27 -> {
                    // CALLORVAR NL
                    var _r28: _KotlinParser_Item? = null
                    _r28 = _MemoCall(_memo, "NL", _index.element, ::NL, null)
                    if (_r28 != null) _index.element = _r28.nextIndex

                    // STAR 27
                    val _r27 = _memo.results.pop()
                    if (_r27 != null) {
                        _res27 += _r27.results
                        _label = 27
                        continue
                    } else {
                        _memo.results.push(_KotlinParser_Item(_start_i27, _index.element, _memo.input, _res27.filterNotNull(), true))
                    }

                    // AND shortcut 26
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 26
                        continue
                    }

                    // CALLORVAR classBody
                    var _r30: _KotlinParser_Item? = null
                    _r30 = _MemoCall(_memo, "classBody", _index.element, ::classBody, null)
                    if (_r30 != null) _index.element = _r30.nextIndex

                    // BIND b
                    b = _memo.results.peek()

                    _label = 26
                }
                // AND 26
                26 -> {
                    val _r26_2 = _memo.results.pop()
                    val _r26_1 = _memo.results.pop()

                    if (_r26_1 != null && _r26_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i26, _index.element, _memo.input, (_r26_1.results + _r26_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i26
                    }

                    // QUES 25
                    if (_memo.results.peek() == null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_index.element, _memo.input))
                    }
                    _label = 1
                }
                // AND 1
                1 -> {
                    val _r1_2 = _memo.results.pop()
                    val _r1_1 = _memo.results.pop()

                    if (_r1_1 != null && _r1_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i1, _index.element, _memo.input, (_r1_1.results + _r1_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i1
                    }

                    // ACT 0
                    val _r0 = _memo.results.peek()
                    if (_r0 != null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_r0.startIndex, _r0.nextIndex, _memo.input, _Thunk({ AST.ObjectDeclaration(mods.l, name.s, ds.l, b.nr) }, _r0), true))
                    }

                    break
                }
            }
        }
    }


    open fun secondaryConstructor(_memo: _KotlinParser_Memo, __index: Int, _args: _KotlinParser_Args?) {
        val _index = Ref.IntRef()
        _index.element = __index

        val _arg_index = Ref.IntRef()
        val _arg_input_index = Ref.IntRef()

        var mods: _KotlinParser_Item? = null
        var params: _KotlinParser_Item? = null
        var cdc: _KotlinParser_Item? = null
        var b: _KotlinParser_Item? = null

        // AND 1
        var _start_i1 = _index.element

        // AND 2
        var _start_i2 = _index.element

        // AND 3
        var _start_i3 = _index.element

        // AND 4
        var _start_i4 = _index.element

        // AND 5
        var _start_i5 = _index.element

        // AND 6
        var _start_i6 = _index.element

        // STAR 11
        var _start_i11 = _index.element
        val _inp11 = arrayListOf<Token?>()
        val _res11 = arrayListOf<AST.AstNode?>()

        // AND 16
        var _start_i16 = _index.element

        // AND 17
        var _start_i17 = _index.element

        // AND 18
        var _start_i18 = _index.element

        // STAR 19
        var _start_i19 = _index.element
        val _inp19 = arrayListOf<Token?>()
        val _res19 = arrayListOf<AST.AstNode?>()

        // STAR 22
        var _start_i22 = _index.element
        val _inp22 = arrayListOf<Token?>()
        val _res22 = arrayListOf<AST.AstNode?>()

        // STAR 26
        var _start_i26 = _index.element
        val _inp26 = arrayListOf<Token?>()
        val _res26 = arrayListOf<AST.AstNode?>()

        var _label = -1
        while(true) {
            when(_label) {
                -1 -> {
                    // AND 1
                    _start_i1 = _index.element

                    // AND 2
                    _start_i2 = _index.element

                    // AND 3
                    _start_i3 = _index.element

                    // AND 4
                    _start_i4 = _index.element

                    // AND 5
                    _start_i5 = _index.element

                    // AND 6
                    _start_i6 = _index.element

                    // CALLORVAR modifiers
                    var _r9: _KotlinParser_Item? = null
                    _r9 = _MemoCall(_memo, "modifiers", _index.element, ::modifiers, null)
                    if (_r9 != null) _index.element = _r9.nextIndex

                    // QUES 8
                    if (_memo.results.peek() == null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_index.element, _memo.input))
                    }
                    // BIND mods
                    mods = _memo.results.peek()

                    // AND shortcut 6
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 6
                        continue
                    }

                    // CALLORVAR CONSTRUCTOR
                    var _r10: _KotlinParser_Item? = null
                    _r10 = _MemoCall(_memo, "CONSTRUCTOR", _index.element, ::CONSTRUCTOR, null)
                    if (_r10 != null) _index.element = _r10.nextIndex

                    _label = 6
                }
                // AND 6
                6 -> {
                    val _r6_2 = _memo.results.pop()
                    val _r6_1 = _memo.results.pop()

                    if (_r6_1 != null && _r6_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i6, _index.element, _memo.input, (_r6_1.results + _r6_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i6
                    }

                    // AND shortcut 5
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 5
                        continue
                    }

                    // STAR 11
                    _start_i11 = _index.element
                    _label = 11
                }
                // STAR 11
                11 -> {
                    // CALLORVAR NL
                    var _r12: _KotlinParser_Item? = null
                    _r12 = _MemoCall(_memo, "NL", _index.element, ::NL, null)
                    if (_r12 != null) _index.element = _r12.nextIndex

                    // STAR 11
                    val _r11 = _memo.results.pop()
                    if (_r11 != null) {
                        _res11 += _r11.results
                        _label = 11
                        continue
                    } else {
                        _memo.results.push(_KotlinParser_Item(_start_i11, _index.element, _memo.input, _res11.filterNotNull(), true))
                    }

                    _label = 5
                }
                // AND 5
                5 -> {
                    val _r5_2 = _memo.results.pop()
                    val _r5_1 = _memo.results.pop()

                    if (_r5_1 != null && _r5_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i5, _index.element, _memo.input, (_r5_1.results + _r5_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i5
                    }

                    // AND shortcut 4
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 4
                        continue
                    }

                    // CALLORVAR functionValueParameters
                    var _r14: _KotlinParser_Item? = null
                    _r14 = _MemoCall(_memo, "functionValueParameters", _index.element, ::functionValueParameters, null)
                    if (_r14 != null) _index.element = _r14.nextIndex

                    // BIND params
                    params = _memo.results.peek()

                    _label = 4
                }
                // AND 4
                4 -> {
                    val _r4_2 = _memo.results.pop()
                    val _r4_1 = _memo.results.pop()

                    if (_r4_1 != null && _r4_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i4, _index.element, _memo.input, (_r4_1.results + _r4_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i4
                    }

                    // AND shortcut 3
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 3
                        continue
                    }

                    // AND 16
                    _start_i16 = _index.element

                    // AND 17
                    _start_i17 = _index.element

                    // AND 18
                    _start_i18 = _index.element

                    // STAR 19
                    _start_i19 = _index.element
                    _label = 19
                }
                // STAR 19
                19 -> {
                    // CALLORVAR NL
                    var _r20: _KotlinParser_Item? = null
                    _r20 = _MemoCall(_memo, "NL", _index.element, ::NL, null)
                    if (_r20 != null) _index.element = _r20.nextIndex

                    // STAR 19
                    val _r19 = _memo.results.pop()
                    if (_r19 != null) {
                        _res19 += _r19.results
                        _label = 19
                        continue
                    } else {
                        _memo.results.push(_KotlinParser_Item(_start_i19, _index.element, _memo.input, _res19.filterNotNull(), true))
                    }

                    // AND shortcut 18
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 18
                        continue
                    }

                    // CALLORVAR COLON
                    var _r21: _KotlinParser_Item? = null
                    _r21 = _MemoCall(_memo, "COLON", _index.element, ::COLON, null)
                    if (_r21 != null) _index.element = _r21.nextIndex

                    _label = 18
                }
                // AND 18
                18 -> {
                    val _r18_2 = _memo.results.pop()
                    val _r18_1 = _memo.results.pop()

                    if (_r18_1 != null && _r18_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i18, _index.element, _memo.input, (_r18_1.results + _r18_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i18
                    }

                    // AND shortcut 17
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 17
                        continue
                    }

                    // STAR 22
                    _start_i22 = _index.element
                    _label = 22
                }
                // STAR 22
                22 -> {
                    // CALLORVAR NL
                    var _r23: _KotlinParser_Item? = null
                    _r23 = _MemoCall(_memo, "NL", _index.element, ::NL, null)
                    if (_r23 != null) _index.element = _r23.nextIndex

                    // STAR 22
                    val _r22 = _memo.results.pop()
                    if (_r22 != null) {
                        _res22 += _r22.results
                        _label = 22
                        continue
                    } else {
                        _memo.results.push(_KotlinParser_Item(_start_i22, _index.element, _memo.input, _res22.filterNotNull(), true))
                    }

                    _label = 17
                }
                // AND 17
                17 -> {
                    val _r17_2 = _memo.results.pop()
                    val _r17_1 = _memo.results.pop()

                    if (_r17_1 != null && _r17_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i17, _index.element, _memo.input, (_r17_1.results + _r17_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i17
                    }

                    // AND shortcut 16
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 16
                        continue
                    }

                    // CALLORVAR constructorDelegationCall
                    var _r25: _KotlinParser_Item? = null
                    _r25 = _MemoCall(_memo, "constructorDelegationCall", _index.element, ::constructorDelegationCall, null)
                    if (_r25 != null) _index.element = _r25.nextIndex

                    // BIND cdc
                    cdc = _memo.results.peek()

                    _label = 16
                }
                // AND 16
                16 -> {
                    val _r16_2 = _memo.results.pop()
                    val _r16_1 = _memo.results.pop()

                    if (_r16_1 != null && _r16_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i16, _index.element, _memo.input, (_r16_1.results + _r16_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i16
                    }

                    // QUES 15
                    if (_memo.results.peek() == null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_index.element, _memo.input))
                    }
                    _label = 3
                }
                // AND 3
                3 -> {
                    val _r3_2 = _memo.results.pop()
                    val _r3_1 = _memo.results.pop()

                    if (_r3_1 != null && _r3_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i3, _index.element, _memo.input, (_r3_1.results + _r3_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i3
                    }

                    // AND shortcut 2
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 2
                        continue
                    }

                    // STAR 26
                    _start_i26 = _index.element
                    _label = 26
                }
                // STAR 26
                26 -> {
                    // CALLORVAR NL
                    var _r27: _KotlinParser_Item? = null
                    _r27 = _MemoCall(_memo, "NL", _index.element, ::NL, null)
                    if (_r27 != null) _index.element = _r27.nextIndex

                    // STAR 26
                    val _r26 = _memo.results.pop()
                    if (_r26 != null) {
                        _res26 += _r26.results
                        _label = 26
                        continue
                    } else {
                        _memo.results.push(_KotlinParser_Item(_start_i26, _index.element, _memo.input, _res26.filterNotNull(), true))
                    }

                    _label = 2
                }
                // AND 2
                2 -> {
                    val _r2_2 = _memo.results.pop()
                    val _r2_1 = _memo.results.pop()

                    if (_r2_1 != null && _r2_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i2, _index.element, _memo.input, (_r2_1.results + _r2_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i2
                    }

                    // AND shortcut 1
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 1
                        continue
                    }

                    // CALLORVAR block
                    var _r30: _KotlinParser_Item? = null
                    _r30 = _MemoCall(_memo, "block", _index.element, ::block, null)
                    if (_r30 != null) _index.element = _r30.nextIndex

                    // QUES 29
                    if (_memo.results.peek() == null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_index.element, _memo.input))
                    }
                    // BIND b
                    b = _memo.results.peek()

                    _label = 1
                }
                // AND 1
                1 -> {
                    val _r1_2 = _memo.results.pop()
                    val _r1_1 = _memo.results.pop()

                    if (_r1_1 != null && _r1_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i1, _index.element, _memo.input, (_r1_1.results + _r1_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i1
                    }

                    // ACT 0
                    val _r0 = _memo.results.peek()
                    if (_r0 != null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_r0.startIndex, _r0.nextIndex, _memo.input, _Thunk({ AST.Constructor(mods.l, params.l, cdc.nr, b.nr, false) }, _r0), true))
                    }

                    break
                }
            }
        }
    }


    open fun constructorDelegationCall(_memo: _KotlinParser_Memo, __index: Int, _args: _KotlinParser_Args?) {
        val _index = Ref.IntRef()
        _index.element = __index

        val _arg_index = Ref.IntRef()
        val _arg_input_index = Ref.IntRef()

        var args: _KotlinParser_Item? = null

        // OR 0
        var _start_i0 = _index.element

        // AND 2
        var _start_i2 = _index.element

        // AND 3
        var _start_i3 = _index.element

        // STAR 5
        var _start_i5 = _index.element
        val _inp5 = arrayListOf<Token?>()
        val _res5 = arrayListOf<AST.AstNode?>()

        // AND 10
        var _start_i10 = _index.element

        // AND 11
        var _start_i11 = _index.element

        // STAR 13
        var _start_i13 = _index.element
        val _inp13 = arrayListOf<Token?>()
        val _res13 = arrayListOf<AST.AstNode?>()

        var _label = -1
        while(true) {
            when(_label) {
                -1 -> {
                    // OR 0
                    _start_i0 = _index.element

                    // AND 2
                    _start_i2 = _index.element

                    // AND 3
                    _start_i3 = _index.element

                    // CALLORVAR THIS
                    var _r4: _KotlinParser_Item? = null
                    _r4 = _MemoCall(_memo, "THIS", _index.element, ::THIS, null)
                    if (_r4 != null) _index.element = _r4.nextIndex

                    // AND shortcut 3
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 3
                        continue
                    }

                    // STAR 5
                    _start_i5 = _index.element
                    _label = 5
                }
                // STAR 5
                5 -> {
                    // CALLORVAR NL
                    var _r6: _KotlinParser_Item? = null
                    _r6 = _MemoCall(_memo, "NL", _index.element, ::NL, null)
                    if (_r6 != null) _index.element = _r6.nextIndex

                    // STAR 5
                    val _r5 = _memo.results.pop()
                    if (_r5 != null) {
                        _res5 += _r5.results
                        _label = 5
                        continue
                    } else {
                        _memo.results.push(_KotlinParser_Item(_start_i5, _index.element, _memo.input, _res5.filterNotNull(), true))
                    }

                    _label = 3
                }
                // AND 3
                3 -> {
                    val _r3_2 = _memo.results.pop()
                    val _r3_1 = _memo.results.pop()

                    if (_r3_1 != null && _r3_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i3, _index.element, _memo.input, (_r3_1.results + _r3_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i3
                    }

                    // AND shortcut 2
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 2
                        continue
                    }

                    // CALLORVAR valueArguments
                    var _r8: _KotlinParser_Item? = null
                    _r8 = _MemoCall(_memo, "valueArguments", _index.element, ::valueArguments, null)
                    if (_r8 != null) _index.element = _r8.nextIndex

                    // BIND args
                    args = _memo.results.peek()

                    _label = 2
                }
                // AND 2
                2 -> {
                    val _r2_2 = _memo.results.pop()
                    val _r2_1 = _memo.results.pop()

                    if (_r2_1 != null && _r2_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i2, _index.element, _memo.input, (_r2_1.results + _r2_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i2
                    }

                    // ACT 1
                    val _r1 = _memo.results.peek()
                    if (_r1 != null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_r1.startIndex, _r1.nextIndex, _memo.input, _Thunk({ AST.ThisCall(args.l) }, _r1), true))
                    }

                    // OR shortcut 0
                    if (_memo.results.peek() == null) {
                        _memo.results.pop()
                        _index.element = _start_i0
                    } else {
                        _label = 0
                        continue
                    }

                    // AND 10
                    _start_i10 = _index.element

                    // AND 11
                    _start_i11 = _index.element

                    // CALLORVAR SUPER
                    var _r12: _KotlinParser_Item? = null
                    _r12 = _MemoCall(_memo, "SUPER", _index.element, ::SUPER, null)
                    if (_r12 != null) _index.element = _r12.nextIndex

                    // AND shortcut 11
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 11
                        continue
                    }

                    // STAR 13
                    _start_i13 = _index.element
                    _label = 13
                }
                // STAR 13
                13 -> {
                    // CALLORVAR NL
                    var _r14: _KotlinParser_Item? = null
                    _r14 = _MemoCall(_memo, "NL", _index.element, ::NL, null)
                    if (_r14 != null) _index.element = _r14.nextIndex

                    // STAR 13
                    val _r13 = _memo.results.pop()
                    if (_r13 != null) {
                        _res13 += _r13.results
                        _label = 13
                        continue
                    } else {
                        _memo.results.push(_KotlinParser_Item(_start_i13, _index.element, _memo.input, _res13.filterNotNull(), true))
                    }

                    _label = 11
                }
                // AND 11
                11 -> {
                    val _r11_2 = _memo.results.pop()
                    val _r11_1 = _memo.results.pop()

                    if (_r11_1 != null && _r11_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i11, _index.element, _memo.input, (_r11_1.results + _r11_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i11
                    }

                    // AND shortcut 10
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 10
                        continue
                    }

                    // CALLORVAR valueArguments
                    var _r16: _KotlinParser_Item? = null
                    _r16 = _MemoCall(_memo, "valueArguments", _index.element, ::valueArguments, null)
                    if (_r16 != null) _index.element = _r16.nextIndex

                    // BIND args
                    args = _memo.results.peek()

                    _label = 10
                }
                // AND 10
                10 -> {
                    val _r10_2 = _memo.results.pop()
                    val _r10_1 = _memo.results.pop()

                    if (_r10_1 != null && _r10_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i10, _index.element, _memo.input, (_r10_1.results + _r10_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i10
                    }

                    // ACT 9
                    val _r9 = _memo.results.peek()
                    if (_r9 != null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_r9.startIndex, _r9.nextIndex, _memo.input, _Thunk({ AST.SuperCall(args.l) }, _r9), true))
                    }

                    _label = 0
                }
                // OR 0
                0 -> {
                    break
                }
            }
        }
    }


    open fun enumClassBody(_memo: _KotlinParser_Memo, __index: Int, _args: _KotlinParser_Args?) {
        val _index = Ref.IntRef()
        _index.element = __index

        val _arg_index = Ref.IntRef()
        val _arg_input_index = Ref.IntRef()

        var es: _KotlinParser_Item? = null
        var ms: _KotlinParser_Item? = null

        // AND 1
        var _start_i1 = _index.element

        // AND 2
        var _start_i2 = _index.element

        // AND 3
        var _start_i3 = _index.element

        // AND 4
        var _start_i4 = _index.element

        // AND 5
        var _start_i5 = _index.element

        // STAR 7
        var _start_i7 = _index.element
        val _inp7 = arrayListOf<Token?>()
        val _res7 = arrayListOf<AST.AstNode?>()

        // AND 13
        var _start_i13 = _index.element

        // AND 14
        var _start_i14 = _index.element

        // AND 15
        var _start_i15 = _index.element

        // STAR 16
        var _start_i16 = _index.element
        val _inp16 = arrayListOf<Token?>()
        val _res16 = arrayListOf<AST.AstNode?>()

        // STAR 19
        var _start_i19 = _index.element
        val _inp19 = arrayListOf<Token?>()
        val _res19 = arrayListOf<AST.AstNode?>()

        // STAR 23
        var _start_i23 = _index.element
        val _inp23 = arrayListOf<Token?>()
        val _res23 = arrayListOf<AST.AstNode?>()

        var _label = -1
        while(true) {
            when(_label) {
                -1 -> {
                    // AND 1
                    _start_i1 = _index.element

                    // AND 2
                    _start_i2 = _index.element

                    // AND 3
                    _start_i3 = _index.element

                    // AND 4
                    _start_i4 = _index.element

                    // AND 5
                    _start_i5 = _index.element

                    // CALLORVAR LCURL
                    var _r6: _KotlinParser_Item? = null
                    _r6 = _MemoCall(_memo, "LCURL", _index.element, ::LCURL, null)
                    if (_r6 != null) _index.element = _r6.nextIndex

                    // AND shortcut 5
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 5
                        continue
                    }

                    // STAR 7
                    _start_i7 = _index.element
                    _label = 7
                }
                // STAR 7
                7 -> {
                    // CALLORVAR NL
                    var _r8: _KotlinParser_Item? = null
                    _r8 = _MemoCall(_memo, "NL", _index.element, ::NL, null)
                    if (_r8 != null) _index.element = _r8.nextIndex

                    // STAR 7
                    val _r7 = _memo.results.pop()
                    if (_r7 != null) {
                        _res7 += _r7.results
                        _label = 7
                        continue
                    } else {
                        _memo.results.push(_KotlinParser_Item(_start_i7, _index.element, _memo.input, _res7.filterNotNull(), true))
                    }

                    _label = 5
                }
                // AND 5
                5 -> {
                    val _r5_2 = _memo.results.pop()
                    val _r5_1 = _memo.results.pop()

                    if (_r5_1 != null && _r5_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i5, _index.element, _memo.input, (_r5_1.results + _r5_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i5
                    }

                    // AND shortcut 4
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 4
                        continue
                    }

                    // CALLORVAR enumEntries
                    var _r11: _KotlinParser_Item? = null
                    _r11 = _MemoCall(_memo, "enumEntries", _index.element, ::enumEntries, null)
                    if (_r11 != null) _index.element = _r11.nextIndex

                    // QUES 10
                    if (_memo.results.peek() == null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_index.element, _memo.input))
                    }
                    // BIND es
                    es = _memo.results.peek()

                    _label = 4
                }
                // AND 4
                4 -> {
                    val _r4_2 = _memo.results.pop()
                    val _r4_1 = _memo.results.pop()

                    if (_r4_1 != null && _r4_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i4, _index.element, _memo.input, (_r4_1.results + _r4_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i4
                    }

                    // AND shortcut 3
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 3
                        continue
                    }

                    // AND 13
                    _start_i13 = _index.element

                    // AND 14
                    _start_i14 = _index.element

                    // AND 15
                    _start_i15 = _index.element

                    // STAR 16
                    _start_i16 = _index.element
                    _label = 16
                }
                // STAR 16
                16 -> {
                    // CALLORVAR NL
                    var _r17: _KotlinParser_Item? = null
                    _r17 = _MemoCall(_memo, "NL", _index.element, ::NL, null)
                    if (_r17 != null) _index.element = _r17.nextIndex

                    // STAR 16
                    val _r16 = _memo.results.pop()
                    if (_r16 != null) {
                        _res16 += _r16.results
                        _label = 16
                        continue
                    } else {
                        _memo.results.push(_KotlinParser_Item(_start_i16, _index.element, _memo.input, _res16.filterNotNull(), true))
                    }

                    // AND shortcut 15
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 15
                        continue
                    }

                    // CALLORVAR SEMICOLON
                    var _r18: _KotlinParser_Item? = null
                    _r18 = _MemoCall(_memo, "SEMICOLON", _index.element, ::SEMICOLON, null)
                    if (_r18 != null) _index.element = _r18.nextIndex

                    _label = 15
                }
                // AND 15
                15 -> {
                    val _r15_2 = _memo.results.pop()
                    val _r15_1 = _memo.results.pop()

                    if (_r15_1 != null && _r15_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i15, _index.element, _memo.input, (_r15_1.results + _r15_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i15
                    }

                    // AND shortcut 14
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 14
                        continue
                    }

                    // STAR 19
                    _start_i19 = _index.element
                    _label = 19
                }
                // STAR 19
                19 -> {
                    // CALLORVAR NL
                    var _r20: _KotlinParser_Item? = null
                    _r20 = _MemoCall(_memo, "NL", _index.element, ::NL, null)
                    if (_r20 != null) _index.element = _r20.nextIndex

                    // STAR 19
                    val _r19 = _memo.results.pop()
                    if (_r19 != null) {
                        _res19 += _r19.results
                        _label = 19
                        continue
                    } else {
                        _memo.results.push(_KotlinParser_Item(_start_i19, _index.element, _memo.input, _res19.filterNotNull(), true))
                    }

                    _label = 14
                }
                // AND 14
                14 -> {
                    val _r14_2 = _memo.results.pop()
                    val _r14_1 = _memo.results.pop()

                    if (_r14_1 != null && _r14_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i14, _index.element, _memo.input, (_r14_1.results + _r14_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i14
                    }

                    // AND shortcut 13
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 13
                        continue
                    }

                    // CALLORVAR classMemberDeclarations
                    var _r22: _KotlinParser_Item? = null
                    _r22 = _MemoCall(_memo, "classMemberDeclarations", _index.element, ::classMemberDeclarations, null)
                    if (_r22 != null) _index.element = _r22.nextIndex

                    // BIND ms
                    ms = _memo.results.peek()

                    _label = 13
                }
                // AND 13
                13 -> {
                    val _r13_2 = _memo.results.pop()
                    val _r13_1 = _memo.results.pop()

                    if (_r13_1 != null && _r13_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i13, _index.element, _memo.input, (_r13_1.results + _r13_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i13
                    }

                    // QUES 12
                    if (_memo.results.peek() == null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_index.element, _memo.input))
                    }
                    _label = 3
                }
                // AND 3
                3 -> {
                    val _r3_2 = _memo.results.pop()
                    val _r3_1 = _memo.results.pop()

                    if (_r3_1 != null && _r3_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i3, _index.element, _memo.input, (_r3_1.results + _r3_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i3
                    }

                    // AND shortcut 2
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 2
                        continue
                    }

                    // STAR 23
                    _start_i23 = _index.element
                    _label = 23
                }
                // STAR 23
                23 -> {
                    // CALLORVAR NL
                    var _r24: _KotlinParser_Item? = null
                    _r24 = _MemoCall(_memo, "NL", _index.element, ::NL, null)
                    if (_r24 != null) _index.element = _r24.nextIndex

                    // STAR 23
                    val _r23 = _memo.results.pop()
                    if (_r23 != null) {
                        _res23 += _r23.results
                        _label = 23
                        continue
                    } else {
                        _memo.results.push(_KotlinParser_Item(_start_i23, _index.element, _memo.input, _res23.filterNotNull(), true))
                    }

                    _label = 2
                }
                // AND 2
                2 -> {
                    val _r2_2 = _memo.results.pop()
                    val _r2_1 = _memo.results.pop()

                    if (_r2_1 != null && _r2_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i2, _index.element, _memo.input, (_r2_1.results + _r2_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i2
                    }

                    // AND shortcut 1
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 1
                        continue
                    }

                    // CALLORVAR RCURL
                    var _r25: _KotlinParser_Item? = null
                    _r25 = _MemoCall(_memo, "RCURL", _index.element, ::RCURL, null)
                    if (_r25 != null) _index.element = _r25.nextIndex

                    _label = 1
                }
                // AND 1
                1 -> {
                    val _r1_2 = _memo.results.pop()
                    val _r1_1 = _memo.results.pop()

                    if (_r1_1 != null && _r1_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i1, _index.element, _memo.input, (_r1_1.results + _r1_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i1
                    }

                    // ACT 0
                    val _r0 = _memo.results.peek()
                    if (_r0 != null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_r0.startIndex, _r0.nextIndex, _memo.input, _Thunk({ AST.EnumClassBody(es.l, ms.l) }, _r0), true))
                    }

                    break
                }
            }
        }
    }


    open fun enumEntries(_memo: _KotlinParser_Memo, __index: Int, _args: _KotlinParser_Args?) {
        val _index = Ref.IntRef()
        _index.element = __index

        val _arg_index = Ref.IntRef()
        val _arg_input_index = Ref.IntRef()

        // AND 1
        var _start_i1 = _index.element

        // AND 2
        var _start_i2 = _index.element

        // AND 3
        var _start_i3 = _index.element

        // STAR 5
        var _start_i5 = _index.element
        val _inp5 = arrayListOf<Token?>()
        val _res5 = arrayListOf<AST.AstNode?>()

        // AND 6
        var _start_i6 = _index.element

        // AND 7
        var _start_i7 = _index.element

        // AND 8
        var _start_i8 = _index.element

        // STAR 9
        var _start_i9 = _index.element
        val _inp9 = arrayListOf<Token?>()
        val _res9 = arrayListOf<AST.AstNode?>()

        // STAR 12
        var _start_i12 = _index.element
        val _inp12 = arrayListOf<Token?>()
        val _res12 = arrayListOf<AST.AstNode?>()

        // STAR 15
        var _start_i15 = _index.element
        val _inp15 = arrayListOf<Token?>()
        val _res15 = arrayListOf<AST.AstNode?>()

        var _label = -1
        while(true) {
            when(_label) {
                -1 -> {
                    // AND 1
                    _start_i1 = _index.element

                    // AND 2
                    _start_i2 = _index.element

                    // AND 3
                    _start_i3 = _index.element

                    // CALLORVAR enumEntry
                    var _r4: _KotlinParser_Item? = null
                    _r4 = _MemoCall(_memo, "enumEntry", _index.element, ::enumEntry, null)
                    if (_r4 != null) _index.element = _r4.nextIndex

                    // AND shortcut 3
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 3
                        continue
                    }

                    // STAR 5
                    _start_i5 = _index.element
                    _label = 5
                }
                // STAR 5
                5 -> {
                    // AND 6
                    _start_i6 = _index.element

                    // AND 7
                    _start_i7 = _index.element

                    // AND 8
                    _start_i8 = _index.element

                    // STAR 9
                    _start_i9 = _index.element
                    _label = 9
                }
                // STAR 9
                9 -> {
                    // CALLORVAR NL
                    var _r10: _KotlinParser_Item? = null
                    _r10 = _MemoCall(_memo, "NL", _index.element, ::NL, null)
                    if (_r10 != null) _index.element = _r10.nextIndex

                    // STAR 9
                    val _r9 = _memo.results.pop()
                    if (_r9 != null) {
                        _res9 += _r9.results
                        _label = 9
                        continue
                    } else {
                        _memo.results.push(_KotlinParser_Item(_start_i9, _index.element, _memo.input, _res9.filterNotNull(), true))
                    }

                    // AND shortcut 8
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 8
                        continue
                    }

                    // CALLORVAR COMMA
                    var _r11: _KotlinParser_Item? = null
                    _r11 = _MemoCall(_memo, "COMMA", _index.element, ::COMMA, null)
                    if (_r11 != null) _index.element = _r11.nextIndex

                    _label = 8
                }
                // AND 8
                8 -> {
                    val _r8_2 = _memo.results.pop()
                    val _r8_1 = _memo.results.pop()

                    if (_r8_1 != null && _r8_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i8, _index.element, _memo.input, (_r8_1.results + _r8_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i8
                    }

                    // AND shortcut 7
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 7
                        continue
                    }

                    // STAR 12
                    _start_i12 = _index.element
                    _label = 12
                }
                // STAR 12
                12 -> {
                    // CALLORVAR NL
                    var _r13: _KotlinParser_Item? = null
                    _r13 = _MemoCall(_memo, "NL", _index.element, ::NL, null)
                    if (_r13 != null) _index.element = _r13.nextIndex

                    // STAR 12
                    val _r12 = _memo.results.pop()
                    if (_r12 != null) {
                        _res12 += _r12.results
                        _label = 12
                        continue
                    } else {
                        _memo.results.push(_KotlinParser_Item(_start_i12, _index.element, _memo.input, _res12.filterNotNull(), true))
                    }

                    _label = 7
                }
                // AND 7
                7 -> {
                    val _r7_2 = _memo.results.pop()
                    val _r7_1 = _memo.results.pop()

                    if (_r7_1 != null && _r7_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i7, _index.element, _memo.input, (_r7_1.results + _r7_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i7
                    }

                    // AND shortcut 6
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 6
                        continue
                    }

                    // CALLORVAR enumEntry
                    var _r14: _KotlinParser_Item? = null
                    _r14 = _MemoCall(_memo, "enumEntry", _index.element, ::enumEntry, null)
                    if (_r14 != null) _index.element = _r14.nextIndex

                    _label = 6
                }
                // AND 6
                6 -> {
                    val _r6_2 = _memo.results.pop()
                    val _r6_1 = _memo.results.pop()

                    if (_r6_1 != null && _r6_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i6, _index.element, _memo.input, (_r6_1.results + _r6_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i6
                    }

                    // STAR 5
                    val _r5 = _memo.results.pop()
                    if (_r5 != null) {
                        _res5 += _r5.results
                        _label = 5
                        continue
                    } else {
                        _memo.results.push(_KotlinParser_Item(_start_i5, _index.element, _memo.input, _res5.filterNotNull(), true))
                    }

                    _label = 3
                }
                // AND 3
                3 -> {
                    val _r3_2 = _memo.results.pop()
                    val _r3_1 = _memo.results.pop()

                    if (_r3_1 != null && _r3_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i3, _index.element, _memo.input, (_r3_1.results + _r3_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i3
                    }

                    // AND shortcut 2
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 2
                        continue
                    }

                    // STAR 15
                    _start_i15 = _index.element
                    _label = 15
                }
                // STAR 15
                15 -> {
                    // CALLORVAR NL
                    var _r16: _KotlinParser_Item? = null
                    _r16 = _MemoCall(_memo, "NL", _index.element, ::NL, null)
                    if (_r16 != null) _index.element = _r16.nextIndex

                    // STAR 15
                    val _r15 = _memo.results.pop()
                    if (_r15 != null) {
                        _res15 += _r15.results
                        _label = 15
                        continue
                    } else {
                        _memo.results.push(_KotlinParser_Item(_start_i15, _index.element, _memo.input, _res15.filterNotNull(), true))
                    }

                    _label = 2
                }
                // AND 2
                2 -> {
                    val _r2_2 = _memo.results.pop()
                    val _r2_1 = _memo.results.pop()

                    if (_r2_1 != null && _r2_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i2, _index.element, _memo.input, (_r2_1.results + _r2_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i2
                    }

                    // AND shortcut 1
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 1
                        continue
                    }

                    // CALLORVAR COMMA
                    var _r18: _KotlinParser_Item? = null
                    _r18 = _MemoCall(_memo, "COMMA", _index.element, ::COMMA, null)
                    if (_r18 != null) _index.element = _r18.nextIndex

                    // QUES 17
                    if (_memo.results.peek() == null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_index.element, _memo.input))
                    }
                    _label = 1
                }
                // AND 1
                1 -> {
                    val _r1_2 = _memo.results.pop()
                    val _r1_1 = _memo.results.pop()

                    if (_r1_1 != null && _r1_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i1, _index.element, _memo.input, (_r1_1.results + _r1_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i1
                    }

                    // ACT 0
                    val _r0 = _memo.results.peek()
                    if (_r0 != null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_r0.startIndex, _r0.nextIndex, _memo.input, _Thunk({ it.l }, _r0), true))
                    }

                    break
                }
            }
        }
    }


    open fun enumEntry(_memo: _KotlinParser_Memo, __index: Int, _args: _KotlinParser_Args?) {
        val _index = Ref.IntRef()
        _index.element = __index

        val _arg_index = Ref.IntRef()
        val _arg_input_index = Ref.IntRef()

        var mods: _KotlinParser_Item? = null
        var name: _KotlinParser_Item? = null
        var args: _KotlinParser_Item? = null
        var b: _KotlinParser_Item? = null

        // AND 1
        var _start_i1 = _index.element

        // AND 2
        var _start_i2 = _index.element

        // AND 3
        var _start_i3 = _index.element

        // AND 5
        var _start_i5 = _index.element

        // STAR 8
        var _start_i8 = _index.element
        val _inp8 = arrayListOf<Token?>()
        val _res8 = arrayListOf<AST.AstNode?>()

        // AND 13
        var _start_i13 = _index.element

        // STAR 14
        var _start_i14 = _index.element
        val _inp14 = arrayListOf<Token?>()
        val _res14 = arrayListOf<AST.AstNode?>()

        // AND 19
        var _start_i19 = _index.element

        // STAR 20
        var _start_i20 = _index.element
        val _inp20 = arrayListOf<Token?>()
        val _res20 = arrayListOf<AST.AstNode?>()

        var _label = -1
        while(true) {
            when(_label) {
                -1 -> {
                    // AND 1
                    _start_i1 = _index.element

                    // AND 2
                    _start_i2 = _index.element

                    // AND 3
                    _start_i3 = _index.element

                    // AND 5
                    _start_i5 = _index.element

                    // CALLORVAR modifiers
                    var _r7: _KotlinParser_Item? = null
                    _r7 = _MemoCall(_memo, "modifiers", _index.element, ::modifiers, null)
                    if (_r7 != null) _index.element = _r7.nextIndex

                    // BIND mods
                    mods = _memo.results.peek()

                    // AND shortcut 5
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 5
                        continue
                    }

                    // STAR 8
                    _start_i8 = _index.element
                    _label = 8
                }
                // STAR 8
                8 -> {
                    // CALLORVAR NL
                    var _r9: _KotlinParser_Item? = null
                    _r9 = _MemoCall(_memo, "NL", _index.element, ::NL, null)
                    if (_r9 != null) _index.element = _r9.nextIndex

                    // STAR 8
                    val _r8 = _memo.results.pop()
                    if (_r8 != null) {
                        _res8 += _r8.results
                        _label = 8
                        continue
                    } else {
                        _memo.results.push(_KotlinParser_Item(_start_i8, _index.element, _memo.input, _res8.filterNotNull(), true))
                    }

                    _label = 5
                }
                // AND 5
                5 -> {
                    val _r5_2 = _memo.results.pop()
                    val _r5_1 = _memo.results.pop()

                    if (_r5_1 != null && _r5_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i5, _index.element, _memo.input, (_r5_1.results + _r5_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i5
                    }

                    // QUES 4
                    if (_memo.results.peek() == null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_index.element, _memo.input))
                    }
                    // AND shortcut 3
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 3
                        continue
                    }

                    // CALLORVAR simpleIdentifier
                    var _r11: _KotlinParser_Item? = null
                    _r11 = _MemoCall(_memo, "simpleIdentifier", _index.element, ::simpleIdentifier, null)
                    if (_r11 != null) _index.element = _r11.nextIndex

                    // BIND name
                    name = _memo.results.peek()

                    _label = 3
                }
                // AND 3
                3 -> {
                    val _r3_2 = _memo.results.pop()
                    val _r3_1 = _memo.results.pop()

                    if (_r3_1 != null && _r3_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i3, _index.element, _memo.input, (_r3_1.results + _r3_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i3
                    }

                    // AND shortcut 2
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 2
                        continue
                    }

                    // AND 13
                    _start_i13 = _index.element

                    // STAR 14
                    _start_i14 = _index.element
                    _label = 14
                }
                // STAR 14
                14 -> {
                    // CALLORVAR NL
                    var _r15: _KotlinParser_Item? = null
                    _r15 = _MemoCall(_memo, "NL", _index.element, ::NL, null)
                    if (_r15 != null) _index.element = _r15.nextIndex

                    // STAR 14
                    val _r14 = _memo.results.pop()
                    if (_r14 != null) {
                        _res14 += _r14.results
                        _label = 14
                        continue
                    } else {
                        _memo.results.push(_KotlinParser_Item(_start_i14, _index.element, _memo.input, _res14.filterNotNull(), true))
                    }

                    // AND shortcut 13
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 13
                        continue
                    }

                    // CALLORVAR valueArguments
                    var _r17: _KotlinParser_Item? = null
                    _r17 = _MemoCall(_memo, "valueArguments", _index.element, ::valueArguments, null)
                    if (_r17 != null) _index.element = _r17.nextIndex

                    // BIND args
                    args = _memo.results.peek()

                    _label = 13
                }
                // AND 13
                13 -> {
                    val _r13_2 = _memo.results.pop()
                    val _r13_1 = _memo.results.pop()

                    if (_r13_1 != null && _r13_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i13, _index.element, _memo.input, (_r13_1.results + _r13_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i13
                    }

                    // QUES 12
                    if (_memo.results.peek() == null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_index.element, _memo.input))
                    }
                    _label = 2
                }
                // AND 2
                2 -> {
                    val _r2_2 = _memo.results.pop()
                    val _r2_1 = _memo.results.pop()

                    if (_r2_1 != null && _r2_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i2, _index.element, _memo.input, (_r2_1.results + _r2_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i2
                    }

                    // AND shortcut 1
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 1
                        continue
                    }

                    // AND 19
                    _start_i19 = _index.element

                    // STAR 20
                    _start_i20 = _index.element
                    _label = 20
                }
                // STAR 20
                20 -> {
                    // CALLORVAR NL
                    var _r21: _KotlinParser_Item? = null
                    _r21 = _MemoCall(_memo, "NL", _index.element, ::NL, null)
                    if (_r21 != null) _index.element = _r21.nextIndex

                    // STAR 20
                    val _r20 = _memo.results.pop()
                    if (_r20 != null) {
                        _res20 += _r20.results
                        _label = 20
                        continue
                    } else {
                        _memo.results.push(_KotlinParser_Item(_start_i20, _index.element, _memo.input, _res20.filterNotNull(), true))
                    }

                    // AND shortcut 19
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 19
                        continue
                    }

                    // CALLORVAR classBody
                    var _r23: _KotlinParser_Item? = null
                    _r23 = _MemoCall(_memo, "classBody", _index.element, ::classBody, null)
                    if (_r23 != null) _index.element = _r23.nextIndex

                    // BIND b
                    b = _memo.results.peek()

                    _label = 19
                }
                // AND 19
                19 -> {
                    val _r19_2 = _memo.results.pop()
                    val _r19_1 = _memo.results.pop()

                    if (_r19_1 != null && _r19_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i19, _index.element, _memo.input, (_r19_1.results + _r19_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i19
                    }

                    // QUES 18
                    if (_memo.results.peek() == null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_index.element, _memo.input))
                    }
                    _label = 1
                }
                // AND 1
                1 -> {
                    val _r1_2 = _memo.results.pop()
                    val _r1_1 = _memo.results.pop()

                    if (_r1_1 != null && _r1_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i1, _index.element, _memo.input, (_r1_1.results + _r1_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i1
                    }

                    // ACT 0
                    val _r0 = _memo.results.peek()
                    if (_r0 != null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_r0.startIndex, _r0.nextIndex, _memo.input, _Thunk({ AST.EnumEntry(mods.l, name.s, args.l, b.nr) }, _r0), true))
                    }

                    break
                }
            }
        }
    }


    open fun type(_memo: _KotlinParser_Memo, __index: Int, _args: _KotlinParser_Args?) {
        val _index = Ref.IntRef()
        _index.element = __index

        val _arg_index = Ref.IntRef()
        val _arg_input_index = Ref.IntRef()

        var mods: _KotlinParser_Item? = null
        var t: _KotlinParser_Item? = null

        // OR 0
        var _start_i0 = _index.element

        // AND 3
        var _start_i3 = _index.element

        var _label = -1
        while(true) {
            when(_label) {
                -1 -> {
                    // OR 0
                    _start_i0 = _index.element

                    // CALLORVAR receiverType
                    var _r1: _KotlinParser_Item? = null
                    _r1 = _MemoCall(_memo, "receiverType", _index.element, ::receiverType, null)
                    if (_r1 != null) _index.element = _r1.nextIndex

                    // OR shortcut 0
                    if (_memo.results.peek() == null) {
                        _memo.results.pop()
                        _index.element = _start_i0
                    } else {
                        _label = 0
                        continue
                    }

                    // AND 3
                    _start_i3 = _index.element

                    // CALLORVAR typeModifiers
                    var _r6: _KotlinParser_Item? = null
                    _r6 = _MemoCall(_memo, "typeModifiers", _index.element, ::typeModifiers, null)
                    if (_r6 != null) _index.element = _r6.nextIndex

                    // QUES 5
                    if (_memo.results.peek() == null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_index.element, _memo.input))
                    }
                    // BIND mods
                    mods = _memo.results.peek()

                    // AND shortcut 3
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 3
                        continue
                    }

                    // CALLORVAR functionType
                    var _r8: _KotlinParser_Item? = null
                    _r8 = _MemoCall(_memo, "functionType", _index.element, ::functionType, null)
                    if (_r8 != null) _index.element = _r8.nextIndex

                    // BIND t
                    t = _memo.results.peek()

                    _label = 3
                }
                // AND 3
                3 -> {
                    val _r3_2 = _memo.results.pop()
                    val _r3_1 = _memo.results.pop()

                    if (_r3_1 != null && _r3_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i3, _index.element, _memo.input, (_r3_1.results + _r3_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i3
                    }

                    // ACT 2
                    val _r2 = _memo.results.peek()
                    if (_r2 != null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_r2.startIndex, _r2.nextIndex, _memo.input, _Thunk({ AST.FunctionTypeWithModifiers(mods.l, t.r) }, _r2), true))
                    }

                    _label = 0
                }
                // OR 0
                0 -> {
                    break
                }
            }
        }
    }


    open fun receiverType(_memo: _KotlinParser_Memo, __index: Int, _args: _KotlinParser_Args?) {
        val _index = Ref.IntRef()
        _index.element = __index

        val _arg_index = Ref.IntRef()
        val _arg_input_index = Ref.IntRef()

        var mods: _KotlinParser_Item? = null
        var t: _KotlinParser_Item? = null

        // AND 1
        var _start_i1 = _index.element

        // OR 6
        var _start_i6 = _index.element

        // OR 7
        var _start_i7 = _index.element

        var _label = -1
        while(true) {
            when(_label) {
                -1 -> {
                    // AND 1
                    _start_i1 = _index.element

                    // CALLORVAR typeModifiers
                    var _r4: _KotlinParser_Item? = null
                    _r4 = _MemoCall(_memo, "typeModifiers", _index.element, ::typeModifiers, null)
                    if (_r4 != null) _index.element = _r4.nextIndex

                    // QUES 3
                    if (_memo.results.peek() == null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_index.element, _memo.input))
                    }
                    // BIND mods
                    mods = _memo.results.peek()

                    // AND shortcut 1
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 1
                        continue
                    }

                    // OR 6
                    _start_i6 = _index.element

                    // OR 7
                    _start_i7 = _index.element

                    // CALLORVAR parenthesizedType
                    var _r8: _KotlinParser_Item? = null
                    _r8 = _MemoCall(_memo, "parenthesizedType", _index.element, ::parenthesizedType, null)
                    if (_r8 != null) _index.element = _r8.nextIndex

                    // OR shortcut 7
                    if (_memo.results.peek() == null) {
                        _memo.results.pop()
                        _index.element = _start_i7
                    } else {
                        _label = 7
                        continue
                    }

                    // CALLORVAR nullableType
                    var _r9: _KotlinParser_Item? = null
                    _r9 = _MemoCall(_memo, "nullableType", _index.element, ::nullableType, null)
                    if (_r9 != null) _index.element = _r9.nextIndex

                    _label = 7
                }
                // OR 7
                7 -> {
                    // OR shortcut 6
                    if (_memo.results.peek() == null) {
                        _memo.results.pop()
                        _index.element = _start_i6
                    } else {
                        _label = 6
                        continue
                    }

                    // CALLORVAR typeReference
                    var _r10: _KotlinParser_Item? = null
                    _r10 = _MemoCall(_memo, "typeReference", _index.element, ::typeReference, null)
                    if (_r10 != null) _index.element = _r10.nextIndex

                    _label = 6
                }
                // OR 6
                6 -> {
                    // BIND t
                    t = _memo.results.peek()

                    _label = 1
                }
                // AND 1
                1 -> {
                    val _r1_2 = _memo.results.pop()
                    val _r1_1 = _memo.results.pop()

                    if (_r1_1 != null && _r1_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i1, _index.element, _memo.input, (_r1_1.results + _r1_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i1
                    }

                    // ACT 0
                    val _r0 = _memo.results.peek()
                    if (_r0 != null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_r0.startIndex, _r0.nextIndex, _memo.input, _Thunk({ AST.ReceiverType(mods.l, t.r) }, _r0), true))
                    }

                    break
                }
            }
        }
    }


    open fun typeReference(_memo: _KotlinParser_Memo, __index: Int, _args: _KotlinParser_Args?) {
        val _index = Ref.IntRef()
        _index.element = __index

        val _arg_index = Ref.IntRef()
        val _arg_input_index = Ref.IntRef()

        // OR 0
        var _start_i0 = _index.element

        var _label = -1
        while(true) {
            when(_label) {
                -1 -> {
                    // OR 0
                    _start_i0 = _index.element

                    // CALLORVAR userType
                    var _r1: _KotlinParser_Item? = null
                    _r1 = _MemoCall(_memo, "userType", _index.element, ::userType, null)
                    if (_r1 != null) _index.element = _r1.nextIndex

                    // OR shortcut 0
                    if (_memo.results.peek() == null) {
                        _memo.results.pop()
                        _index.element = _start_i0
                    } else {
                        _label = 0
                        continue
                    }

                    // CALLORVAR DYNAMIC
                    var _r3: _KotlinParser_Item? = null
                    _r3 = _MemoCall(_memo, "DYNAMIC", _index.element, ::DYNAMIC, null)
                    if (_r3 != null) _index.element = _r3.nextIndex

                    // ACT 2
                    val _r2 = _memo.results.peek()
                    if (_r2 != null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_r2.startIndex, _r2.nextIndex, _memo.input, _Thunk({ AST.DYNAMIC }, _r2), true))
                    }

                    _label = 0
                }
                // OR 0
                0 -> {
                    break
                }
            }
        }
    }


    open fun nullableType(_memo: _KotlinParser_Memo, __index: Int, _args: _KotlinParser_Args?) {
        val _index = Ref.IntRef()
        _index.element = __index

        val _arg_index = Ref.IntRef()
        val _arg_input_index = Ref.IntRef()

        var t: _KotlinParser_Item? = null

        // AND 1
        var _start_i1 = _index.element

        // AND 2
        var _start_i2 = _index.element

        // OR 4
        var _start_i4 = _index.element

        // STAR 7
        var _start_i7 = _index.element
        val _inp7 = arrayListOf<Token?>()
        val _res7 = arrayListOf<AST.AstNode?>()

        // PLUS 9
        var _start_i9 = _index.element
        val _inp9 = arrayListOf<Token?>()
        val _res9 = arrayListOf<AST.AstNode?>()

        var _label = -1
        while(true) {
            when(_label) {
                -1 -> {
                    // AND 1
                    _start_i1 = _index.element

                    // AND 2
                    _start_i2 = _index.element

                    // OR 4
                    _start_i4 = _index.element

                    // CALLORVAR typeReference
                    var _r5: _KotlinParser_Item? = null
                    _r5 = _MemoCall(_memo, "typeReference", _index.element, ::typeReference, null)
                    if (_r5 != null) _index.element = _r5.nextIndex

                    // OR shortcut 4
                    if (_memo.results.peek() == null) {
                        _memo.results.pop()
                        _index.element = _start_i4
                    } else {
                        _label = 4
                        continue
                    }

                    // CALLORVAR parenthesizedType
                    var _r6: _KotlinParser_Item? = null
                    _r6 = _MemoCall(_memo, "parenthesizedType", _index.element, ::parenthesizedType, null)
                    if (_r6 != null) _index.element = _r6.nextIndex

                    _label = 4
                }
                // OR 4
                4 -> {
                    // BIND t
                    t = _memo.results.peek()

                    // AND shortcut 2
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 2
                        continue
                    }

                    // STAR 7
                    _start_i7 = _index.element
                    _label = 7
                }
                // STAR 7
                7 -> {
                    // CALLORVAR NL
                    var _r8: _KotlinParser_Item? = null
                    _r8 = _MemoCall(_memo, "NL", _index.element, ::NL, null)
                    if (_r8 != null) _index.element = _r8.nextIndex

                    // STAR 7
                    val _r7 = _memo.results.pop()
                    if (_r7 != null) {
                        _res7 += _r7.results
                        _label = 7
                        continue
                    } else {
                        _memo.results.push(_KotlinParser_Item(_start_i7, _index.element, _memo.input, _res7.filterNotNull(), true))
                    }

                    _label = 2
                }
                // AND 2
                2 -> {
                    val _r2_2 = _memo.results.pop()
                    val _r2_1 = _memo.results.pop()

                    if (_r2_1 != null && _r2_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i2, _index.element, _memo.input, (_r2_1.results + _r2_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i2
                    }

                    // AND shortcut 1
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 1
                        continue
                    }

                    // PLUS 9
                    _start_i9 = _index.element
                    _label = 9
                }
                // PLUS 9
                9 -> {
                    // CALLORVAR quest
                    var _r10: _KotlinParser_Item? = null
                    _r10 = _MemoCall(_memo, "quest", _index.element, ::quest, null)
                    if (_r10 != null) _index.element = _r10.nextIndex

                    // PLUS 9
                    val _r9 = _memo.results.pop()
                    if (_r9 != null) {
                        _res9 += _r9.results
                        _label = 9
                        continue
                    } else {
                        if (_index.element > _start_i9) {
                            _memo.results.push(_KotlinParser_Item(_start_i9, _index.element, _memo.input, _res9.filterNotNull(), true))
                        } else {
                            _memo.results.push(null)
                        }
                    }

                    _label = 1
                }
                // AND 1
                1 -> {
                    val _r1_2 = _memo.results.pop()
                    val _r1_1 = _memo.results.pop()

                    if (_r1_1 != null && _r1_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i1, _index.element, _memo.input, (_r1_1.results + _r1_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i1
                    }

                    // ACT 0
                    val _r0 = _memo.results.peek()
                    if (_r0 != null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_r0.startIndex, _r0.nextIndex, _memo.input, _Thunk({ AST.NullableType(t.r) }, _r0), true))
                    }

                    break
                }
            }
        }
    }


    open fun quest(_memo: _KotlinParser_Memo, __index: Int, _args: _KotlinParser_Args?) {
        val _index = Ref.IntRef()
        _index.element = __index

        val _arg_index = Ref.IntRef()
        val _arg_input_index = Ref.IntRef()

        var _label = -1
        while(true) {
            when(_label) {
                -1 -> {
                    // CALLORVAR QUEST
                    var _r0: _KotlinParser_Item? = null
                    _r0 = _MemoCall(_memo, "QUEST", _index.element, ::QUEST, null)
                    if (_r0 != null) _index.element = _r0.nextIndex

                    break
                }
            }
        }
    }


    open fun userType(_memo: _KotlinParser_Memo, __index: Int, _args: _KotlinParser_Args?) {
        val _index = Ref.IntRef()
        _index.element = __index

        val _arg_index = Ref.IntRef()
        val _arg_input_index = Ref.IntRef()

        // AND 1
        var _start_i1 = _index.element

        // STAR 3
        var _start_i3 = _index.element
        val _inp3 = arrayListOf<Token?>()
        val _res3 = arrayListOf<AST.AstNode?>()

        // AND 4
        var _start_i4 = _index.element

        // AND 5
        var _start_i5 = _index.element

        // AND 6
        var _start_i6 = _index.element

        // STAR 7
        var _start_i7 = _index.element
        val _inp7 = arrayListOf<Token?>()
        val _res7 = arrayListOf<AST.AstNode?>()

        // STAR 10
        var _start_i10 = _index.element
        val _inp10 = arrayListOf<Token?>()
        val _res10 = arrayListOf<AST.AstNode?>()

        var _label = -1
        while(true) {
            when(_label) {
                -1 -> {
                    // AND 1
                    _start_i1 = _index.element

                    // CALLORVAR simpleUserType
                    var _r2: _KotlinParser_Item? = null
                    _r2 = _MemoCall(_memo, "simpleUserType", _index.element, ::simpleUserType, null)
                    if (_r2 != null) _index.element = _r2.nextIndex

                    // AND shortcut 1
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 1
                        continue
                    }

                    // STAR 3
                    _start_i3 = _index.element
                    _label = 3
                }
                // STAR 3
                3 -> {
                    // AND 4
                    _start_i4 = _index.element

                    // AND 5
                    _start_i5 = _index.element

                    // AND 6
                    _start_i6 = _index.element

                    // STAR 7
                    _start_i7 = _index.element
                    _label = 7
                }
                // STAR 7
                7 -> {
                    // CALLORVAR NL
                    var _r8: _KotlinParser_Item? = null
                    _r8 = _MemoCall(_memo, "NL", _index.element, ::NL, null)
                    if (_r8 != null) _index.element = _r8.nextIndex

                    // STAR 7
                    val _r7 = _memo.results.pop()
                    if (_r7 != null) {
                        _res7 += _r7.results
                        _label = 7
                        continue
                    } else {
                        _memo.results.push(_KotlinParser_Item(_start_i7, _index.element, _memo.input, _res7.filterNotNull(), true))
                    }

                    // AND shortcut 6
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 6
                        continue
                    }

                    // CALLORVAR DOT
                    var _r9: _KotlinParser_Item? = null
                    _r9 = _MemoCall(_memo, "DOT", _index.element, ::DOT, null)
                    if (_r9 != null) _index.element = _r9.nextIndex

                    _label = 6
                }
                // AND 6
                6 -> {
                    val _r6_2 = _memo.results.pop()
                    val _r6_1 = _memo.results.pop()

                    if (_r6_1 != null && _r6_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i6, _index.element, _memo.input, (_r6_1.results + _r6_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i6
                    }

                    // AND shortcut 5
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 5
                        continue
                    }

                    // STAR 10
                    _start_i10 = _index.element
                    _label = 10
                }
                // STAR 10
                10 -> {
                    // CALLORVAR NL
                    var _r11: _KotlinParser_Item? = null
                    _r11 = _MemoCall(_memo, "NL", _index.element, ::NL, null)
                    if (_r11 != null) _index.element = _r11.nextIndex

                    // STAR 10
                    val _r10 = _memo.results.pop()
                    if (_r10 != null) {
                        _res10 += _r10.results
                        _label = 10
                        continue
                    } else {
                        _memo.results.push(_KotlinParser_Item(_start_i10, _index.element, _memo.input, _res10.filterNotNull(), true))
                    }

                    _label = 5
                }
                // AND 5
                5 -> {
                    val _r5_2 = _memo.results.pop()
                    val _r5_1 = _memo.results.pop()

                    if (_r5_1 != null && _r5_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i5, _index.element, _memo.input, (_r5_1.results + _r5_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i5
                    }

                    // AND shortcut 4
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 4
                        continue
                    }

                    // CALLORVAR simpleUserType
                    var _r12: _KotlinParser_Item? = null
                    _r12 = _MemoCall(_memo, "simpleUserType", _index.element, ::simpleUserType, null)
                    if (_r12 != null) _index.element = _r12.nextIndex

                    _label = 4
                }
                // AND 4
                4 -> {
                    val _r4_2 = _memo.results.pop()
                    val _r4_1 = _memo.results.pop()

                    if (_r4_1 != null && _r4_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i4, _index.element, _memo.input, (_r4_1.results + _r4_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i4
                    }

                    // STAR 3
                    val _r3 = _memo.results.pop()
                    if (_r3 != null) {
                        _res3 += _r3.results
                        _label = 3
                        continue
                    } else {
                        _memo.results.push(_KotlinParser_Item(_start_i3, _index.element, _memo.input, _res3.filterNotNull(), true))
                    }

                    _label = 1
                }
                // AND 1
                1 -> {
                    val _r1_2 = _memo.results.pop()
                    val _r1_1 = _memo.results.pop()

                    if (_r1_1 != null && _r1_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i1, _index.element, _memo.input, (_r1_1.results + _r1_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i1
                    }

                    // ACT 0
                    val _r0 = _memo.results.peek()
                    if (_r0 != null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_r0.startIndex, _r0.nextIndex, _memo.input, _Thunk({ AST.UserType(it.l) }, _r0), true))
                    }

                    break
                }
            }
        }
    }


    open fun simpleUserType(_memo: _KotlinParser_Memo, __index: Int, _args: _KotlinParser_Args?) {
        val _index = Ref.IntRef()
        _index.element = __index

        val _arg_index = Ref.IntRef()
        val _arg_input_index = Ref.IntRef()

        var name: _KotlinParser_Item? = null
        var args: _KotlinParser_Item? = null

        // AND 1
        var _start_i1 = _index.element

        // AND 5
        var _start_i5 = _index.element

        // STAR 6
        var _start_i6 = _index.element
        val _inp6 = arrayListOf<Token?>()
        val _res6 = arrayListOf<AST.AstNode?>()

        var _label = -1
        while(true) {
            when(_label) {
                -1 -> {
                    // AND 1
                    _start_i1 = _index.element

                    // CALLORVAR simpleIdentifier
                    var _r3: _KotlinParser_Item? = null
                    _r3 = _MemoCall(_memo, "simpleIdentifier", _index.element, ::simpleIdentifier, null)
                    if (_r3 != null) _index.element = _r3.nextIndex

                    // BIND name
                    name = _memo.results.peek()

                    // AND shortcut 1
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 1
                        continue
                    }

                    // AND 5
                    _start_i5 = _index.element

                    // STAR 6
                    _start_i6 = _index.element
                    _label = 6
                }
                // STAR 6
                6 -> {
                    // CALLORVAR NL
                    var _r7: _KotlinParser_Item? = null
                    _r7 = _MemoCall(_memo, "NL", _index.element, ::NL, null)
                    if (_r7 != null) _index.element = _r7.nextIndex

                    // STAR 6
                    val _r6 = _memo.results.pop()
                    if (_r6 != null) {
                        _res6 += _r6.results
                        _label = 6
                        continue
                    } else {
                        _memo.results.push(_KotlinParser_Item(_start_i6, _index.element, _memo.input, _res6.filterNotNull(), true))
                    }

                    // AND shortcut 5
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 5
                        continue
                    }

                    // CALLORVAR typeArguments
                    var _r9: _KotlinParser_Item? = null
                    _r9 = _MemoCall(_memo, "typeArguments", _index.element, ::typeArguments, null)
                    if (_r9 != null) _index.element = _r9.nextIndex

                    // BIND args
                    args = _memo.results.peek()

                    _label = 5
                }
                // AND 5
                5 -> {
                    val _r5_2 = _memo.results.pop()
                    val _r5_1 = _memo.results.pop()

                    if (_r5_1 != null && _r5_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i5, _index.element, _memo.input, (_r5_1.results + _r5_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i5
                    }

                    // QUES 4
                    if (_memo.results.peek() == null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_index.element, _memo.input))
                    }
                    _label = 1
                }
                // AND 1
                1 -> {
                    val _r1_2 = _memo.results.pop()
                    val _r1_1 = _memo.results.pop()

                    if (_r1_1 != null && _r1_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i1, _index.element, _memo.input, (_r1_1.results + _r1_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i1
                    }

                    // ACT 0
                    val _r0 = _memo.results.peek()
                    if (_r0 != null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_r0.startIndex, _r0.nextIndex, _memo.input, _Thunk({ AST.SimpleUserType(name.s, args.l) }, _r0), true))
                    }

                    break
                }
            }
        }
    }


    open fun typeProjection(_memo: _KotlinParser_Memo, __index: Int, _args: _KotlinParser_Args?) {
        val _index = Ref.IntRef()
        _index.element = __index

        val _arg_index = Ref.IntRef()
        val _arg_input_index = Ref.IntRef()

        var mods: _KotlinParser_Item? = null
        var t: _KotlinParser_Item? = null

        // OR 0
        var _start_i0 = _index.element

        // AND 2
        var _start_i2 = _index.element

        var _label = -1
        while(true) {
            when(_label) {
                -1 -> {
                    // OR 0
                    _start_i0 = _index.element

                    // AND 2
                    _start_i2 = _index.element

                    // CALLORVAR typeProjectionModifiers
                    var _r5: _KotlinParser_Item? = null
                    _r5 = _MemoCall(_memo, "typeProjectionModifiers", _index.element, ::typeProjectionModifiers, null)
                    if (_r5 != null) _index.element = _r5.nextIndex

                    // QUES 4
                    if (_memo.results.peek() == null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_index.element, _memo.input))
                    }
                    // BIND mods
                    mods = _memo.results.peek()

                    // AND shortcut 2
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 2
                        continue
                    }

                    // CALLORVAR type
                    var _r7: _KotlinParser_Item? = null
                    _r7 = _MemoCall(_memo, "type", _index.element, ::type, null)
                    if (_r7 != null) _index.element = _r7.nextIndex

                    // BIND t
                    t = _memo.results.peek()

                    _label = 2
                }
                // AND 2
                2 -> {
                    val _r2_2 = _memo.results.pop()
                    val _r2_1 = _memo.results.pop()

                    if (_r2_1 != null && _r2_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i2, _index.element, _memo.input, (_r2_1.results + _r2_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i2
                    }

                    // ACT 1
                    val _r1 = _memo.results.peek()
                    if (_r1 != null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_r1.startIndex, _r1.nextIndex, _memo.input, _Thunk({ AST.TypeProjectionWithType(mods.l, t.r) }, _r1), true))
                    }

                    // OR shortcut 0
                    if (_memo.results.peek() == null) {
                        _memo.results.pop()
                        _index.element = _start_i0
                    } else {
                        _label = 0
                        continue
                    }

                    // CALLORVAR MULT
                    var _r9: _KotlinParser_Item? = null
                    _r9 = _MemoCall(_memo, "MULT", _index.element, ::MULT, null)
                    if (_r9 != null) _index.element = _r9.nextIndex

                    // ACT 8
                    val _r8 = _memo.results.peek()
                    if (_r8 != null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_r8.startIndex, _r8.nextIndex, _memo.input, _Thunk({ AST.MULT }, _r8), true))
                    }

                    _label = 0
                }
                // OR 0
                0 -> {
                    break
                }
            }
        }
    }


    open fun typeProjectionModifiers(_memo: _KotlinParser_Memo, __index: Int, _args: _KotlinParser_Args?) {
        val _index = Ref.IntRef()
        _index.element = __index

        val _arg_index = Ref.IntRef()
        val _arg_input_index = Ref.IntRef()

        // PLUS 1
        var _start_i1 = _index.element
        val _inp1 = arrayListOf<Token?>()
        val _res1 = arrayListOf<AST.AstNode?>()

        var _label = -1
        while(true) {
            when(_label) {
                -1 -> {
                    // PLUS 1
                    _start_i1 = _index.element
                    _label = 1
                }
                // PLUS 1
                1 -> {
                    // CALLORVAR typeProjectionModifier
                    var _r2: _KotlinParser_Item? = null
                    _r2 = _MemoCall(_memo, "typeProjectionModifier", _index.element, ::typeProjectionModifier, null)
                    if (_r2 != null) _index.element = _r2.nextIndex

                    // PLUS 1
                    val _r1 = _memo.results.pop()
                    if (_r1 != null) {
                        _res1 += _r1.results
                        _label = 1
                        continue
                    } else {
                        if (_index.element > _start_i1) {
                            _memo.results.push(_KotlinParser_Item(_start_i1, _index.element, _memo.input, _res1.filterNotNull(), true))
                        } else {
                            _memo.results.push(null)
                        }
                    }

                    // ACT 0
                    val _r0 = _memo.results.peek()
                    if (_r0 != null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_r0.startIndex, _r0.nextIndex, _memo.input, _Thunk({ it.l }, _r0), true))
                    }

                    break
                }
            }
        }
    }


    open fun typeProjectionModifier(_memo: _KotlinParser_Memo, __index: Int, _args: _KotlinParser_Args?) {
        val _index = Ref.IntRef()
        _index.element = __index

        val _arg_index = Ref.IntRef()
        val _arg_input_index = Ref.IntRef()

        var vm: _KotlinParser_Item? = null

        // OR 0
        var _start_i0 = _index.element

        // AND 2
        var _start_i2 = _index.element

        // STAR 5
        var _start_i5 = _index.element
        val _inp5 = arrayListOf<Token?>()
        val _res5 = arrayListOf<AST.AstNode?>()

        var _label = -1
        while(true) {
            when(_label) {
                -1 -> {
                    // OR 0
                    _start_i0 = _index.element

                    // AND 2
                    _start_i2 = _index.element

                    // CALLORVAR varianceModifier
                    var _r4: _KotlinParser_Item? = null
                    _r4 = _MemoCall(_memo, "varianceModifier", _index.element, ::varianceModifier, null)
                    if (_r4 != null) _index.element = _r4.nextIndex

                    // BIND vm
                    vm = _memo.results.peek()

                    // AND shortcut 2
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 2
                        continue
                    }

                    // STAR 5
                    _start_i5 = _index.element
                    _label = 5
                }
                // STAR 5
                5 -> {
                    // CALLORVAR NL
                    var _r6: _KotlinParser_Item? = null
                    _r6 = _MemoCall(_memo, "NL", _index.element, ::NL, null)
                    if (_r6 != null) _index.element = _r6.nextIndex

                    // STAR 5
                    val _r5 = _memo.results.pop()
                    if (_r5 != null) {
                        _res5 += _r5.results
                        _label = 5
                        continue
                    } else {
                        _memo.results.push(_KotlinParser_Item(_start_i5, _index.element, _memo.input, _res5.filterNotNull(), true))
                    }

                    _label = 2
                }
                // AND 2
                2 -> {
                    val _r2_2 = _memo.results.pop()
                    val _r2_1 = _memo.results.pop()

                    if (_r2_1 != null && _r2_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i2, _index.element, _memo.input, (_r2_1.results + _r2_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i2
                    }

                    // ACT 1
                    val _r1 = _memo.results.peek()
                    if (_r1 != null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_r1.startIndex, _r1.nextIndex, _memo.input, _Thunk({ vm.r }, _r1), true))
                    }

                    // OR shortcut 0
                    if (_memo.results.peek() == null) {
                        _memo.results.pop()
                        _index.element = _start_i0
                    } else {
                        _label = 0
                        continue
                    }

                    // CALLORVAR annotation
                    var _r7: _KotlinParser_Item? = null
                    _r7 = _MemoCall(_memo, "annotation", _index.element, ::annotation, null)
                    if (_r7 != null) _index.element = _r7.nextIndex

                    _label = 0
                }
                // OR 0
                0 -> {
                    break
                }
            }
        }
    }


    open fun functionType(_memo: _KotlinParser_Memo, __index: Int, _args: _KotlinParser_Args?) {
        val _index = Ref.IntRef()
        _index.element = __index

        val _arg_index = Ref.IntRef()
        val _arg_input_index = Ref.IntRef()

        var rt: _KotlinParser_Item? = null
        var params: _KotlinParser_Item? = null
        var t: _KotlinParser_Item? = null

        // AND 1
        var _start_i1 = _index.element

        // AND 2
        var _start_i2 = _index.element

        // AND 3
        var _start_i3 = _index.element

        // AND 4
        var _start_i4 = _index.element

        // AND 5
        var _start_i5 = _index.element

        // AND 7
        var _start_i7 = _index.element

        // AND 8
        var _start_i8 = _index.element

        // AND 9
        var _start_i9 = _index.element

        // STAR 12
        var _start_i12 = _index.element
        val _inp12 = arrayListOf<Token?>()
        val _res12 = arrayListOf<AST.AstNode?>()

        // STAR 15
        var _start_i15 = _index.element
        val _inp15 = arrayListOf<Token?>()
        val _res15 = arrayListOf<AST.AstNode?>()

        // STAR 19
        var _start_i19 = _index.element
        val _inp19 = arrayListOf<Token?>()
        val _res19 = arrayListOf<AST.AstNode?>()

        // STAR 22
        var _start_i22 = _index.element
        val _inp22 = arrayListOf<Token?>()
        val _res22 = arrayListOf<AST.AstNode?>()

        var _label = -1
        while(true) {
            when(_label) {
                -1 -> {
                    // AND 1
                    _start_i1 = _index.element

                    // AND 2
                    _start_i2 = _index.element

                    // AND 3
                    _start_i3 = _index.element

                    // AND 4
                    _start_i4 = _index.element

                    // AND 5
                    _start_i5 = _index.element

                    // AND 7
                    _start_i7 = _index.element

                    // AND 8
                    _start_i8 = _index.element

                    // AND 9
                    _start_i9 = _index.element

                    // CALLORVAR receiverType
                    var _r11: _KotlinParser_Item? = null
                    _r11 = _MemoCall(_memo, "receiverType", _index.element, ::receiverType, null)
                    if (_r11 != null) _index.element = _r11.nextIndex

                    // BIND rt
                    rt = _memo.results.peek()

                    // AND shortcut 9
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 9
                        continue
                    }

                    // STAR 12
                    _start_i12 = _index.element
                    _label = 12
                }
                // STAR 12
                12 -> {
                    // CALLORVAR NL
                    var _r13: _KotlinParser_Item? = null
                    _r13 = _MemoCall(_memo, "NL", _index.element, ::NL, null)
                    if (_r13 != null) _index.element = _r13.nextIndex

                    // STAR 12
                    val _r12 = _memo.results.pop()
                    if (_r12 != null) {
                        _res12 += _r12.results
                        _label = 12
                        continue
                    } else {
                        _memo.results.push(_KotlinParser_Item(_start_i12, _index.element, _memo.input, _res12.filterNotNull(), true))
                    }

                    _label = 9
                }
                // AND 9
                9 -> {
                    val _r9_2 = _memo.results.pop()
                    val _r9_1 = _memo.results.pop()

                    if (_r9_1 != null && _r9_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i9, _index.element, _memo.input, (_r9_1.results + _r9_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i9
                    }

                    // AND shortcut 8
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 8
                        continue
                    }

                    // CALLORVAR DOT
                    var _r14: _KotlinParser_Item? = null
                    _r14 = _MemoCall(_memo, "DOT", _index.element, ::DOT, null)
                    if (_r14 != null) _index.element = _r14.nextIndex

                    _label = 8
                }
                // AND 8
                8 -> {
                    val _r8_2 = _memo.results.pop()
                    val _r8_1 = _memo.results.pop()

                    if (_r8_1 != null && _r8_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i8, _index.element, _memo.input, (_r8_1.results + _r8_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i8
                    }

                    // AND shortcut 7
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 7
                        continue
                    }

                    // STAR 15
                    _start_i15 = _index.element
                    _label = 15
                }
                // STAR 15
                15 -> {
                    // CALLORVAR NL
                    var _r16: _KotlinParser_Item? = null
                    _r16 = _MemoCall(_memo, "NL", _index.element, ::NL, null)
                    if (_r16 != null) _index.element = _r16.nextIndex

                    // STAR 15
                    val _r15 = _memo.results.pop()
                    if (_r15 != null) {
                        _res15 += _r15.results
                        _label = 15
                        continue
                    } else {
                        _memo.results.push(_KotlinParser_Item(_start_i15, _index.element, _memo.input, _res15.filterNotNull(), true))
                    }

                    _label = 7
                }
                // AND 7
                7 -> {
                    val _r7_2 = _memo.results.pop()
                    val _r7_1 = _memo.results.pop()

                    if (_r7_1 != null && _r7_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i7, _index.element, _memo.input, (_r7_1.results + _r7_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i7
                    }

                    // QUES 6
                    if (_memo.results.peek() == null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_index.element, _memo.input))
                    }
                    // AND shortcut 5
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 5
                        continue
                    }

                    // CALLORVAR functionTypeParameters
                    var _r18: _KotlinParser_Item? = null
                    _r18 = _MemoCall(_memo, "functionTypeParameters", _index.element, ::functionTypeParameters, null)
                    if (_r18 != null) _index.element = _r18.nextIndex

                    // BIND params
                    params = _memo.results.peek()

                    _label = 5
                }
                // AND 5
                5 -> {
                    val _r5_2 = _memo.results.pop()
                    val _r5_1 = _memo.results.pop()

                    if (_r5_1 != null && _r5_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i5, _index.element, _memo.input, (_r5_1.results + _r5_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i5
                    }

                    // AND shortcut 4
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 4
                        continue
                    }

                    // STAR 19
                    _start_i19 = _index.element
                    _label = 19
                }
                // STAR 19
                19 -> {
                    // CALLORVAR NL
                    var _r20: _KotlinParser_Item? = null
                    _r20 = _MemoCall(_memo, "NL", _index.element, ::NL, null)
                    if (_r20 != null) _index.element = _r20.nextIndex

                    // STAR 19
                    val _r19 = _memo.results.pop()
                    if (_r19 != null) {
                        _res19 += _r19.results
                        _label = 19
                        continue
                    } else {
                        _memo.results.push(_KotlinParser_Item(_start_i19, _index.element, _memo.input, _res19.filterNotNull(), true))
                    }

                    _label = 4
                }
                // AND 4
                4 -> {
                    val _r4_2 = _memo.results.pop()
                    val _r4_1 = _memo.results.pop()

                    if (_r4_1 != null && _r4_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i4, _index.element, _memo.input, (_r4_1.results + _r4_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i4
                    }

                    // AND shortcut 3
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 3
                        continue
                    }

                    // CALLORVAR ARROW
                    var _r21: _KotlinParser_Item? = null
                    _r21 = _MemoCall(_memo, "ARROW", _index.element, ::ARROW, null)
                    if (_r21 != null) _index.element = _r21.nextIndex

                    _label = 3
                }
                // AND 3
                3 -> {
                    val _r3_2 = _memo.results.pop()
                    val _r3_1 = _memo.results.pop()

                    if (_r3_1 != null && _r3_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i3, _index.element, _memo.input, (_r3_1.results + _r3_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i3
                    }

                    // AND shortcut 2
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 2
                        continue
                    }

                    // STAR 22
                    _start_i22 = _index.element
                    _label = 22
                }
                // STAR 22
                22 -> {
                    // CALLORVAR NL
                    var _r23: _KotlinParser_Item? = null
                    _r23 = _MemoCall(_memo, "NL", _index.element, ::NL, null)
                    if (_r23 != null) _index.element = _r23.nextIndex

                    // STAR 22
                    val _r22 = _memo.results.pop()
                    if (_r22 != null) {
                        _res22 += _r22.results
                        _label = 22
                        continue
                    } else {
                        _memo.results.push(_KotlinParser_Item(_start_i22, _index.element, _memo.input, _res22.filterNotNull(), true))
                    }

                    _label = 2
                }
                // AND 2
                2 -> {
                    val _r2_2 = _memo.results.pop()
                    val _r2_1 = _memo.results.pop()

                    if (_r2_1 != null && _r2_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i2, _index.element, _memo.input, (_r2_1.results + _r2_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i2
                    }

                    // AND shortcut 1
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 1
                        continue
                    }

                    // CALLORVAR type
                    var _r25: _KotlinParser_Item? = null
                    _r25 = _MemoCall(_memo, "type", _index.element, ::type, null)
                    if (_r25 != null) _index.element = _r25.nextIndex

                    // BIND t
                    t = _memo.results.peek()

                    _label = 1
                }
                // AND 1
                1 -> {
                    val _r1_2 = _memo.results.pop()
                    val _r1_1 = _memo.results.pop()

                    if (_r1_1 != null && _r1_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i1, _index.element, _memo.input, (_r1_1.results + _r1_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i1
                    }

                    // ACT 0
                    val _r0 = _memo.results.peek()
                    if (_r0 != null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_r0.startIndex, _r0.nextIndex, _memo.input, _Thunk({ AST.FunctionType(rt.nr, params.l, t.r) }, _r0), true))
                    }

                    break
                }
            }
        }
    }


    open fun functionTypeParameters(_memo: _KotlinParser_Memo, __index: Int, _args: _KotlinParser_Args?) {
        val _index = Ref.IntRef()
        _index.element = __index

        val _arg_index = Ref.IntRef()
        val _arg_input_index = Ref.IntRef()

        // AND 1
        var _start_i1 = _index.element

        // AND 2
        var _start_i2 = _index.element

        // AND 3
        var _start_i3 = _index.element

        // AND 4
        var _start_i4 = _index.element

        // AND 5
        var _start_i5 = _index.element

        // AND 6
        var _start_i6 = _index.element

        // STAR 8
        var _start_i8 = _index.element
        val _inp8 = arrayListOf<Token?>()
        val _res8 = arrayListOf<AST.AstNode?>()

        // OR 11
        var _start_i11 = _index.element

        // STAR 14
        var _start_i14 = _index.element
        val _inp14 = arrayListOf<Token?>()
        val _res14 = arrayListOf<AST.AstNode?>()

        // AND 15
        var _start_i15 = _index.element

        // AND 16
        var _start_i16 = _index.element

        // AND 17
        var _start_i17 = _index.element

        // STAR 18
        var _start_i18 = _index.element
        val _inp18 = arrayListOf<Token?>()
        val _res18 = arrayListOf<AST.AstNode?>()

        // STAR 21
        var _start_i21 = _index.element
        val _inp21 = arrayListOf<Token?>()
        val _res21 = arrayListOf<AST.AstNode?>()

        // OR 23
        var _start_i23 = _index.element

        // AND 27
        var _start_i27 = _index.element

        // STAR 28
        var _start_i28 = _index.element
        val _inp28 = arrayListOf<Token?>()
        val _res28 = arrayListOf<AST.AstNode?>()

        // STAR 31
        var _start_i31 = _index.element
        val _inp31 = arrayListOf<Token?>()
        val _res31 = arrayListOf<AST.AstNode?>()

        var _label = -1
        while(true) {
            when(_label) {
                -1 -> {
                    // AND 1
                    _start_i1 = _index.element

                    // AND 2
                    _start_i2 = _index.element

                    // AND 3
                    _start_i3 = _index.element

                    // AND 4
                    _start_i4 = _index.element

                    // AND 5
                    _start_i5 = _index.element

                    // AND 6
                    _start_i6 = _index.element

                    // CALLORVAR LPAREN
                    var _r7: _KotlinParser_Item? = null
                    _r7 = _MemoCall(_memo, "LPAREN", _index.element, ::LPAREN, null)
                    if (_r7 != null) _index.element = _r7.nextIndex

                    // AND shortcut 6
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 6
                        continue
                    }

                    // STAR 8
                    _start_i8 = _index.element
                    _label = 8
                }
                // STAR 8
                8 -> {
                    // CALLORVAR NL
                    var _r9: _KotlinParser_Item? = null
                    _r9 = _MemoCall(_memo, "NL", _index.element, ::NL, null)
                    if (_r9 != null) _index.element = _r9.nextIndex

                    // STAR 8
                    val _r8 = _memo.results.pop()
                    if (_r8 != null) {
                        _res8 += _r8.results
                        _label = 8
                        continue
                    } else {
                        _memo.results.push(_KotlinParser_Item(_start_i8, _index.element, _memo.input, _res8.filterNotNull(), true))
                    }

                    _label = 6
                }
                // AND 6
                6 -> {
                    val _r6_2 = _memo.results.pop()
                    val _r6_1 = _memo.results.pop()

                    if (_r6_1 != null && _r6_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i6, _index.element, _memo.input, (_r6_1.results + _r6_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i6
                    }

                    // AND shortcut 5
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 5
                        continue
                    }

                    // OR 11
                    _start_i11 = _index.element

                    // CALLORVAR parameter
                    var _r12: _KotlinParser_Item? = null
                    _r12 = _MemoCall(_memo, "parameter", _index.element, ::parameter, null)
                    if (_r12 != null) _index.element = _r12.nextIndex

                    // OR shortcut 11
                    if (_memo.results.peek() == null) {
                        _memo.results.pop()
                        _index.element = _start_i11
                    } else {
                        _label = 11
                        continue
                    }

                    // CALLORVAR type
                    var _r13: _KotlinParser_Item? = null
                    _r13 = _MemoCall(_memo, "type", _index.element, ::type, null)
                    if (_r13 != null) _index.element = _r13.nextIndex

                    _label = 11
                }
                // OR 11
                11 -> {
                    // QUES 10
                    if (_memo.results.peek() == null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_index.element, _memo.input))
                    }
                    _label = 5
                }
                // AND 5
                5 -> {
                    val _r5_2 = _memo.results.pop()
                    val _r5_1 = _memo.results.pop()

                    if (_r5_1 != null && _r5_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i5, _index.element, _memo.input, (_r5_1.results + _r5_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i5
                    }

                    // AND shortcut 4
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 4
                        continue
                    }

                    // STAR 14
                    _start_i14 = _index.element
                    _label = 14
                }
                // STAR 14
                14 -> {
                    // AND 15
                    _start_i15 = _index.element

                    // AND 16
                    _start_i16 = _index.element

                    // AND 17
                    _start_i17 = _index.element

                    // STAR 18
                    _start_i18 = _index.element
                    _label = 18
                }
                // STAR 18
                18 -> {
                    // CALLORVAR NL
                    var _r19: _KotlinParser_Item? = null
                    _r19 = _MemoCall(_memo, "NL", _index.element, ::NL, null)
                    if (_r19 != null) _index.element = _r19.nextIndex

                    // STAR 18
                    val _r18 = _memo.results.pop()
                    if (_r18 != null) {
                        _res18 += _r18.results
                        _label = 18
                        continue
                    } else {
                        _memo.results.push(_KotlinParser_Item(_start_i18, _index.element, _memo.input, _res18.filterNotNull(), true))
                    }

                    // AND shortcut 17
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 17
                        continue
                    }

                    // CALLORVAR COMMA
                    var _r20: _KotlinParser_Item? = null
                    _r20 = _MemoCall(_memo, "COMMA", _index.element, ::COMMA, null)
                    if (_r20 != null) _index.element = _r20.nextIndex

                    _label = 17
                }
                // AND 17
                17 -> {
                    val _r17_2 = _memo.results.pop()
                    val _r17_1 = _memo.results.pop()

                    if (_r17_1 != null && _r17_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i17, _index.element, _memo.input, (_r17_1.results + _r17_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i17
                    }

                    // AND shortcut 16
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 16
                        continue
                    }

                    // STAR 21
                    _start_i21 = _index.element
                    _label = 21
                }
                // STAR 21
                21 -> {
                    // CALLORVAR NL
                    var _r22: _KotlinParser_Item? = null
                    _r22 = _MemoCall(_memo, "NL", _index.element, ::NL, null)
                    if (_r22 != null) _index.element = _r22.nextIndex

                    // STAR 21
                    val _r21 = _memo.results.pop()
                    if (_r21 != null) {
                        _res21 += _r21.results
                        _label = 21
                        continue
                    } else {
                        _memo.results.push(_KotlinParser_Item(_start_i21, _index.element, _memo.input, _res21.filterNotNull(), true))
                    }

                    _label = 16
                }
                // AND 16
                16 -> {
                    val _r16_2 = _memo.results.pop()
                    val _r16_1 = _memo.results.pop()

                    if (_r16_1 != null && _r16_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i16, _index.element, _memo.input, (_r16_1.results + _r16_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i16
                    }

                    // AND shortcut 15
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 15
                        continue
                    }

                    // OR 23
                    _start_i23 = _index.element

                    // CALLORVAR parameter
                    var _r24: _KotlinParser_Item? = null
                    _r24 = _MemoCall(_memo, "parameter", _index.element, ::parameter, null)
                    if (_r24 != null) _index.element = _r24.nextIndex

                    // OR shortcut 23
                    if (_memo.results.peek() == null) {
                        _memo.results.pop()
                        _index.element = _start_i23
                    } else {
                        _label = 23
                        continue
                    }

                    // CALLORVAR type
                    var _r25: _KotlinParser_Item? = null
                    _r25 = _MemoCall(_memo, "type", _index.element, ::type, null)
                    if (_r25 != null) _index.element = _r25.nextIndex

                    _label = 23
                }
                // OR 23
                23 -> {
                    _label = 15
                }
                // AND 15
                15 -> {
                    val _r15_2 = _memo.results.pop()
                    val _r15_1 = _memo.results.pop()

                    if (_r15_1 != null && _r15_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i15, _index.element, _memo.input, (_r15_1.results + _r15_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i15
                    }

                    // STAR 14
                    val _r14 = _memo.results.pop()
                    if (_r14 != null) {
                        _res14 += _r14.results
                        _label = 14
                        continue
                    } else {
                        _memo.results.push(_KotlinParser_Item(_start_i14, _index.element, _memo.input, _res14.filterNotNull(), true))
                    }

                    _label = 4
                }
                // AND 4
                4 -> {
                    val _r4_2 = _memo.results.pop()
                    val _r4_1 = _memo.results.pop()

                    if (_r4_1 != null && _r4_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i4, _index.element, _memo.input, (_r4_1.results + _r4_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i4
                    }

                    // AND shortcut 3
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 3
                        continue
                    }

                    // AND 27
                    _start_i27 = _index.element

                    // STAR 28
                    _start_i28 = _index.element
                    _label = 28
                }
                // STAR 28
                28 -> {
                    // CALLORVAR NL
                    var _r29: _KotlinParser_Item? = null
                    _r29 = _MemoCall(_memo, "NL", _index.element, ::NL, null)
                    if (_r29 != null) _index.element = _r29.nextIndex

                    // STAR 28
                    val _r28 = _memo.results.pop()
                    if (_r28 != null) {
                        _res28 += _r28.results
                        _label = 28
                        continue
                    } else {
                        _memo.results.push(_KotlinParser_Item(_start_i28, _index.element, _memo.input, _res28.filterNotNull(), true))
                    }

                    // AND shortcut 27
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 27
                        continue
                    }

                    // CALLORVAR COMMA
                    var _r30: _KotlinParser_Item? = null
                    _r30 = _MemoCall(_memo, "COMMA", _index.element, ::COMMA, null)
                    if (_r30 != null) _index.element = _r30.nextIndex

                    _label = 27
                }
                // AND 27
                27 -> {
                    val _r27_2 = _memo.results.pop()
                    val _r27_1 = _memo.results.pop()

                    if (_r27_1 != null && _r27_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i27, _index.element, _memo.input, (_r27_1.results + _r27_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i27
                    }

                    // QUES 26
                    if (_memo.results.peek() == null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_index.element, _memo.input))
                    }
                    _label = 3
                }
                // AND 3
                3 -> {
                    val _r3_2 = _memo.results.pop()
                    val _r3_1 = _memo.results.pop()

                    if (_r3_1 != null && _r3_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i3, _index.element, _memo.input, (_r3_1.results + _r3_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i3
                    }

                    // AND shortcut 2
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 2
                        continue
                    }

                    // STAR 31
                    _start_i31 = _index.element
                    _label = 31
                }
                // STAR 31
                31 -> {
                    // CALLORVAR NL
                    var _r32: _KotlinParser_Item? = null
                    _r32 = _MemoCall(_memo, "NL", _index.element, ::NL, null)
                    if (_r32 != null) _index.element = _r32.nextIndex

                    // STAR 31
                    val _r31 = _memo.results.pop()
                    if (_r31 != null) {
                        _res31 += _r31.results
                        _label = 31
                        continue
                    } else {
                        _memo.results.push(_KotlinParser_Item(_start_i31, _index.element, _memo.input, _res31.filterNotNull(), true))
                    }

                    _label = 2
                }
                // AND 2
                2 -> {
                    val _r2_2 = _memo.results.pop()
                    val _r2_1 = _memo.results.pop()

                    if (_r2_1 != null && _r2_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i2, _index.element, _memo.input, (_r2_1.results + _r2_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i2
                    }

                    // AND shortcut 1
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 1
                        continue
                    }

                    // CALLORVAR RPAREN
                    var _r33: _KotlinParser_Item? = null
                    _r33 = _MemoCall(_memo, "RPAREN", _index.element, ::RPAREN, null)
                    if (_r33 != null) _index.element = _r33.nextIndex

                    _label = 1
                }
                // AND 1
                1 -> {
                    val _r1_2 = _memo.results.pop()
                    val _r1_1 = _memo.results.pop()

                    if (_r1_1 != null && _r1_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i1, _index.element, _memo.input, (_r1_1.results + _r1_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i1
                    }

                    // ACT 0
                    val _r0 = _memo.results.peek()
                    if (_r0 != null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_r0.startIndex, _r0.nextIndex, _memo.input, _Thunk({ it.l.map { p -> if (p is AST.NameAndType) p.type else p }.filterIsInstance<AST.Type>() }, _r0), true))
                    }

                    break
                }
            }
        }
    }


    open fun parenthesizedType(_memo: _KotlinParser_Memo, __index: Int, _args: _KotlinParser_Args?) {
        val _index = Ref.IntRef()
        _index.element = __index

        val _arg_index = Ref.IntRef()
        val _arg_input_index = Ref.IntRef()

        var t: _KotlinParser_Item? = null

        // AND 1
        var _start_i1 = _index.element

        // AND 2
        var _start_i2 = _index.element

        // AND 3
        var _start_i3 = _index.element

        // AND 4
        var _start_i4 = _index.element

        // STAR 6
        var _start_i6 = _index.element
        val _inp6 = arrayListOf<Token?>()
        val _res6 = arrayListOf<AST.AstNode?>()

        // STAR 10
        var _start_i10 = _index.element
        val _inp10 = arrayListOf<Token?>()
        val _res10 = arrayListOf<AST.AstNode?>()

        var _label = -1
        while(true) {
            when(_label) {
                -1 -> {
                    // AND 1
                    _start_i1 = _index.element

                    // AND 2
                    _start_i2 = _index.element

                    // AND 3
                    _start_i3 = _index.element

                    // AND 4
                    _start_i4 = _index.element

                    // CALLORVAR LPAREN
                    var _r5: _KotlinParser_Item? = null
                    _r5 = _MemoCall(_memo, "LPAREN", _index.element, ::LPAREN, null)
                    if (_r5 != null) _index.element = _r5.nextIndex

                    // AND shortcut 4
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 4
                        continue
                    }

                    // STAR 6
                    _start_i6 = _index.element
                    _label = 6
                }
                // STAR 6
                6 -> {
                    // CALLORVAR NL
                    var _r7: _KotlinParser_Item? = null
                    _r7 = _MemoCall(_memo, "NL", _index.element, ::NL, null)
                    if (_r7 != null) _index.element = _r7.nextIndex

                    // STAR 6
                    val _r6 = _memo.results.pop()
                    if (_r6 != null) {
                        _res6 += _r6.results
                        _label = 6
                        continue
                    } else {
                        _memo.results.push(_KotlinParser_Item(_start_i6, _index.element, _memo.input, _res6.filterNotNull(), true))
                    }

                    _label = 4
                }
                // AND 4
                4 -> {
                    val _r4_2 = _memo.results.pop()
                    val _r4_1 = _memo.results.pop()

                    if (_r4_1 != null && _r4_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i4, _index.element, _memo.input, (_r4_1.results + _r4_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i4
                    }

                    // AND shortcut 3
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 3
                        continue
                    }

                    // CALLORVAR type
                    var _r9: _KotlinParser_Item? = null
                    _r9 = _MemoCall(_memo, "type", _index.element, ::type, null)
                    if (_r9 != null) _index.element = _r9.nextIndex

                    // BIND t
                    t = _memo.results.peek()

                    _label = 3
                }
                // AND 3
                3 -> {
                    val _r3_2 = _memo.results.pop()
                    val _r3_1 = _memo.results.pop()

                    if (_r3_1 != null && _r3_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i3, _index.element, _memo.input, (_r3_1.results + _r3_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i3
                    }

                    // AND shortcut 2
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 2
                        continue
                    }

                    // STAR 10
                    _start_i10 = _index.element
                    _label = 10
                }
                // STAR 10
                10 -> {
                    // CALLORVAR NL
                    var _r11: _KotlinParser_Item? = null
                    _r11 = _MemoCall(_memo, "NL", _index.element, ::NL, null)
                    if (_r11 != null) _index.element = _r11.nextIndex

                    // STAR 10
                    val _r10 = _memo.results.pop()
                    if (_r10 != null) {
                        _res10 += _r10.results
                        _label = 10
                        continue
                    } else {
                        _memo.results.push(_KotlinParser_Item(_start_i10, _index.element, _memo.input, _res10.filterNotNull(), true))
                    }

                    _label = 2
                }
                // AND 2
                2 -> {
                    val _r2_2 = _memo.results.pop()
                    val _r2_1 = _memo.results.pop()

                    if (_r2_1 != null && _r2_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i2, _index.element, _memo.input, (_r2_1.results + _r2_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i2
                    }

                    // AND shortcut 1
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 1
                        continue
                    }

                    // CALLORVAR RPAREN
                    var _r12: _KotlinParser_Item? = null
                    _r12 = _MemoCall(_memo, "RPAREN", _index.element, ::RPAREN, null)
                    if (_r12 != null) _index.element = _r12.nextIndex

                    _label = 1
                }
                // AND 1
                1 -> {
                    val _r1_2 = _memo.results.pop()
                    val _r1_1 = _memo.results.pop()

                    if (_r1_1 != null && _r1_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i1, _index.element, _memo.input, (_r1_1.results + _r1_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i1
                    }

                    // ACT 0
                    val _r0 = _memo.results.peek()
                    if (_r0 != null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_r0.startIndex, _r0.nextIndex, _memo.input, _Thunk({ t.r }, _r0), true))
                    }

                    break
                }
            }
        }
    }


    open fun statements(_memo: _KotlinParser_Memo, __index: Int, _args: _KotlinParser_Args?) {
        val _index = Ref.IntRef()
        _index.element = __index

        val _arg_index = Ref.IntRef()
        val _arg_input_index = Ref.IntRef()

        // AND 1
        var _start_i1 = _index.element

        // AND 3
        var _start_i3 = _index.element

        // STAR 5
        var _start_i5 = _index.element
        val _inp5 = arrayListOf<Token?>()
        val _res5 = arrayListOf<AST.AstNode?>()

        // AND 6
        var _start_i6 = _index.element

        var _label = -1
        while(true) {
            when(_label) {
                -1 -> {
                    // AND 1
                    _start_i1 = _index.element

                    // AND 3
                    _start_i3 = _index.element

                    // CALLORVAR statement
                    var _r4: _KotlinParser_Item? = null
                    _r4 = _MemoCall(_memo, "statement", _index.element, ::statement, null)
                    if (_r4 != null) _index.element = _r4.nextIndex

                    // AND shortcut 3
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 3
                        continue
                    }

                    // STAR 5
                    _start_i5 = _index.element
                    _label = 5
                }
                // STAR 5
                5 -> {
                    // AND 6
                    _start_i6 = _index.element

                    // CALLORVAR semis
                    var _r7: _KotlinParser_Item? = null
                    _r7 = _MemoCall(_memo, "semis", _index.element, ::semis, null)
                    if (_r7 != null) _index.element = _r7.nextIndex

                    // AND shortcut 6
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 6
                        continue
                    }

                    // CALLORVAR statement
                    var _r8: _KotlinParser_Item? = null
                    _r8 = _MemoCall(_memo, "statement", _index.element, ::statement, null)
                    if (_r8 != null) _index.element = _r8.nextIndex

                    _label = 6
                }
                // AND 6
                6 -> {
                    val _r6_2 = _memo.results.pop()
                    val _r6_1 = _memo.results.pop()

                    if (_r6_1 != null && _r6_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i6, _index.element, _memo.input, (_r6_1.results + _r6_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i6
                    }

                    // STAR 5
                    val _r5 = _memo.results.pop()
                    if (_r5 != null) {
                        _res5 += _r5.results
                        _label = 5
                        continue
                    } else {
                        _memo.results.push(_KotlinParser_Item(_start_i5, _index.element, _memo.input, _res5.filterNotNull(), true))
                    }

                    _label = 3
                }
                // AND 3
                3 -> {
                    val _r3_2 = _memo.results.pop()
                    val _r3_1 = _memo.results.pop()

                    if (_r3_1 != null && _r3_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i3, _index.element, _memo.input, (_r3_1.results + _r3_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i3
                    }

                    // QUES 2
                    if (_memo.results.peek() == null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_index.element, _memo.input))
                    }
                    // AND shortcut 1
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 1
                        continue
                    }

                    // CALLORVAR semis
                    var _r10: _KotlinParser_Item? = null
                    _r10 = _MemoCall(_memo, "semis", _index.element, ::semis, null)
                    if (_r10 != null) _index.element = _r10.nextIndex

                    // QUES 9
                    if (_memo.results.peek() == null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_index.element, _memo.input))
                    }
                    _label = 1
                }
                // AND 1
                1 -> {
                    val _r1_2 = _memo.results.pop()
                    val _r1_1 = _memo.results.pop()

                    if (_r1_1 != null && _r1_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i1, _index.element, _memo.input, (_r1_1.results + _r1_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i1
                    }

                    // ACT 0
                    val _r0 = _memo.results.peek()
                    if (_r0 != null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_r0.startIndex, _r0.nextIndex, _memo.input, _Thunk({ it.l }, _r0), true))
                    }

                    break
                }
            }
        }
    }


    open fun statement(_memo: _KotlinParser_Memo, __index: Int, _args: _KotlinParser_Args?) {
        val _index = Ref.IntRef()
        _index.element = __index

        val _arg_index = Ref.IntRef()
        val _arg_input_index = Ref.IntRef()

        var p: _KotlinParser_Item? = null
        var expr: _KotlinParser_Item? = null

        // AND 1
        var _start_i1 = _index.element

        // STAR 3
        var _start_i3 = _index.element
        val _inp3 = arrayListOf<Token?>()
        val _res3 = arrayListOf<AST.AstNode?>()

        // OR 4
        var _start_i4 = _index.element

        // OR 8
        var _start_i8 = _index.element

        // OR 9
        var _start_i9 = _index.element

        // OR 10
        var _start_i10 = _index.element

        // OR 11
        var _start_i11 = _index.element

        var _label = -1
        while(true) {
            when(_label) {
                -1 -> {
                    // AND 1
                    _start_i1 = _index.element

                    // STAR 3
                    _start_i3 = _index.element
                    _label = 3
                }
                // STAR 3
                3 -> {
                    // OR 4
                    _start_i4 = _index.element

                    // CALLORVAR label
                    var _r5: _KotlinParser_Item? = null
                    _r5 = _MemoCall(_memo, "label", _index.element, ::label, null)
                    if (_r5 != null) _index.element = _r5.nextIndex

                    // OR shortcut 4
                    if (_memo.results.peek() == null) {
                        _memo.results.pop()
                        _index.element = _start_i4
                    } else {
                        _label = 4
                        continue
                    }

                    // CALLORVAR annotation
                    var _r6: _KotlinParser_Item? = null
                    _r6 = _MemoCall(_memo, "annotation", _index.element, ::annotation, null)
                    if (_r6 != null) _index.element = _r6.nextIndex

                    _label = 4
                }
                // OR 4
                4 -> {
                    // STAR 3
                    val _r3 = _memo.results.pop()
                    if (_r3 != null) {
                        _res3 += _r3.results
                        _label = 3
                        continue
                    } else {
                        _memo.results.push(_KotlinParser_Item(_start_i3, _index.element, _memo.input, _res3.filterNotNull(), true))
                    }

                    // BIND p
                    p = _memo.results.peek()

                    // AND shortcut 1
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 1
                        continue
                    }

                    // OR 8
                    _start_i8 = _index.element

                    // OR 9
                    _start_i9 = _index.element

                    // OR 10
                    _start_i10 = _index.element

                    // OR 11
                    _start_i11 = _index.element

                    // CALLORVAR localVariableDeclaration
                    var _r12: _KotlinParser_Item? = null
                    _r12 = _MemoCall(_memo, "localVariableDeclaration", _index.element, ::localVariableDeclaration, null)
                    if (_r12 != null) _index.element = _r12.nextIndex

                    // OR shortcut 11
                    if (_memo.results.peek() == null) {
                        _memo.results.pop()
                        _index.element = _start_i11
                    } else {
                        _label = 11
                        continue
                    }

                    // CALLORVAR declaration
                    var _r13: _KotlinParser_Item? = null
                    _r13 = _MemoCall(_memo, "declaration", _index.element, ::declaration, null)
                    if (_r13 != null) _index.element = _r13.nextIndex

                    _label = 11
                }
                // OR 11
                11 -> {
                    // OR shortcut 10
                    if (_memo.results.peek() == null) {
                        _memo.results.pop()
                        _index.element = _start_i10
                    } else {
                        _label = 10
                        continue
                    }

                    // CALLORVAR assignment
                    var _r14: _KotlinParser_Item? = null
                    _r14 = _MemoCall(_memo, "assignment", _index.element, ::assignment, null)
                    if (_r14 != null) _index.element = _r14.nextIndex

                    _label = 10
                }
                // OR 10
                10 -> {
                    // OR shortcut 9
                    if (_memo.results.peek() == null) {
                        _memo.results.pop()
                        _index.element = _start_i9
                    } else {
                        _label = 9
                        continue
                    }

                    // CALLORVAR loopStatement
                    var _r15: _KotlinParser_Item? = null
                    _r15 = _MemoCall(_memo, "loopStatement", _index.element, ::loopStatement, null)
                    if (_r15 != null) _index.element = _r15.nextIndex

                    _label = 9
                }
                // OR 9
                9 -> {
                    // OR shortcut 8
                    if (_memo.results.peek() == null) {
                        _memo.results.pop()
                        _index.element = _start_i8
                    } else {
                        _label = 8
                        continue
                    }

                    // CALLORVAR expression
                    var _r16: _KotlinParser_Item? = null
                    _r16 = _MemoCall(_memo, "expression", _index.element, ::expression, null)
                    if (_r16 != null) _index.element = _r16.nextIndex

                    _label = 8
                }
                // OR 8
                8 -> {
                    // BIND expr
                    expr = _memo.results.peek()

                    _label = 1
                }
                // AND 1
                1 -> {
                    val _r1_2 = _memo.results.pop()
                    val _r1_1 = _memo.results.pop()

                    if (_r1_1 != null && _r1_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i1, _index.element, _memo.input, (_r1_1.results + _r1_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i1
                    }

                    // ACT 0
                    val _r0 = _memo.results.peek()
                    if (_r0 != null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_r0.startIndex, _r0.nextIndex, _memo.input, _Thunk({ AST.Statement(p.l, expr.r) }, _r0), true))
                    }

                    break
                }
            }
        }
    }


    open fun label(_memo: _KotlinParser_Memo, __index: Int, _args: _KotlinParser_Args?) {
        val _index = Ref.IntRef()
        _index.element = __index

        val _arg_index = Ref.IntRef()
        val _arg_input_index = Ref.IntRef()

        var name: _KotlinParser_Item? = null

        // AND 1
        var _start_i1 = _index.element

        // AND 2
        var _start_i2 = _index.element

        // STAR 6
        var _start_i6 = _index.element
        val _inp6 = arrayListOf<Token?>()
        val _res6 = arrayListOf<AST.AstNode?>()

        var _label = -1
        while(true) {
            when(_label) {
                -1 -> {
                    // AND 1
                    _start_i1 = _index.element

                    // AND 2
                    _start_i2 = _index.element

                    // CALLORVAR simpleIdentifier
                    var _r4: _KotlinParser_Item? = null
                    _r4 = _MemoCall(_memo, "simpleIdentifier", _index.element, ::simpleIdentifier, null)
                    if (_r4 != null) _index.element = _r4.nextIndex

                    // BIND name
                    name = _memo.results.peek()

                    // AND shortcut 2
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 2
                        continue
                    }

                    // CALLORVAR AT
                    var _r5: _KotlinParser_Item? = null
                    _r5 = _MemoCall(_memo, "AT", _index.element, ::AT, null)
                    if (_r5 != null) _index.element = _r5.nextIndex

                    _label = 2
                }
                // AND 2
                2 -> {
                    val _r2_2 = _memo.results.pop()
                    val _r2_1 = _memo.results.pop()

                    if (_r2_1 != null && _r2_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i2, _index.element, _memo.input, (_r2_1.results + _r2_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i2
                    }

                    // AND shortcut 1
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 1
                        continue
                    }

                    // STAR 6
                    _start_i6 = _index.element
                    _label = 6
                }
                // STAR 6
                6 -> {
                    // CALLORVAR NL
                    var _r7: _KotlinParser_Item? = null
                    _r7 = _MemoCall(_memo, "NL", _index.element, ::NL, null)
                    if (_r7 != null) _index.element = _r7.nextIndex

                    // STAR 6
                    val _r6 = _memo.results.pop()
                    if (_r6 != null) {
                        _res6 += _r6.results
                        _label = 6
                        continue
                    } else {
                        _memo.results.push(_KotlinParser_Item(_start_i6, _index.element, _memo.input, _res6.filterNotNull(), true))
                    }

                    _label = 1
                }
                // AND 1
                1 -> {
                    val _r1_2 = _memo.results.pop()
                    val _r1_1 = _memo.results.pop()

                    if (_r1_1 != null && _r1_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i1, _index.element, _memo.input, (_r1_1.results + _r1_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i1
                    }

                    // ACT 0
                    val _r0 = _memo.results.peek()
                    if (_r0 != null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_r0.startIndex, _r0.nextIndex, _memo.input, _Thunk({ AST.Label(name.s) }, _r0), true))
                    }

                    break
                }
            }
        }
    }


    open fun controlStructureBody(_memo: _KotlinParser_Memo, __index: Int, _args: _KotlinParser_Args?) {
        val _index = Ref.IntRef()
        _index.element = __index

        val _arg_index = Ref.IntRef()
        val _arg_input_index = Ref.IntRef()

        // OR 0
        var _start_i0 = _index.element

        var _label = -1
        while(true) {
            when(_label) {
                -1 -> {
                    // OR 0
                    _start_i0 = _index.element

                    // CALLORVAR block
                    var _r1: _KotlinParser_Item? = null
                    _r1 = _MemoCall(_memo, "block", _index.element, ::block, null)
                    if (_r1 != null) _index.element = _r1.nextIndex

                    // OR shortcut 0
                    if (_memo.results.peek() == null) {
                        _memo.results.pop()
                        _index.element = _start_i0
                    } else {
                        _label = 0
                        continue
                    }

                    // CALLORVAR statement
                    var _r2: _KotlinParser_Item? = null
                    _r2 = _MemoCall(_memo, "statement", _index.element, ::statement, null)
                    if (_r2 != null) _index.element = _r2.nextIndex

                    _label = 0
                }
                // OR 0
                0 -> {
                    break
                }
            }
        }
    }


    open fun block(_memo: _KotlinParser_Memo, __index: Int, _args: _KotlinParser_Args?) {
        val _index = Ref.IntRef()
        _index.element = __index

        val _arg_index = Ref.IntRef()
        val _arg_input_index = Ref.IntRef()

        var stmts: _KotlinParser_Item? = null

        // AND 1
        var _start_i1 = _index.element

        // AND 2
        var _start_i2 = _index.element

        // AND 3
        var _start_i3 = _index.element

        // AND 4
        var _start_i4 = _index.element

        // STAR 6
        var _start_i6 = _index.element
        val _inp6 = arrayListOf<Token?>()
        val _res6 = arrayListOf<AST.AstNode?>()

        // STAR 10
        var _start_i10 = _index.element
        val _inp10 = arrayListOf<Token?>()
        val _res10 = arrayListOf<AST.AstNode?>()

        var _label = -1
        while(true) {
            when(_label) {
                -1 -> {
                    // AND 1
                    _start_i1 = _index.element

                    // AND 2
                    _start_i2 = _index.element

                    // AND 3
                    _start_i3 = _index.element

                    // AND 4
                    _start_i4 = _index.element

                    // CALLORVAR LCURL
                    var _r5: _KotlinParser_Item? = null
                    _r5 = _MemoCall(_memo, "LCURL", _index.element, ::LCURL, null)
                    if (_r5 != null) _index.element = _r5.nextIndex

                    // AND shortcut 4
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 4
                        continue
                    }

                    // STAR 6
                    _start_i6 = _index.element
                    _label = 6
                }
                // STAR 6
                6 -> {
                    // CALLORVAR NL
                    var _r7: _KotlinParser_Item? = null
                    _r7 = _MemoCall(_memo, "NL", _index.element, ::NL, null)
                    if (_r7 != null) _index.element = _r7.nextIndex

                    // STAR 6
                    val _r6 = _memo.results.pop()
                    if (_r6 != null) {
                        _res6 += _r6.results
                        _label = 6
                        continue
                    } else {
                        _memo.results.push(_KotlinParser_Item(_start_i6, _index.element, _memo.input, _res6.filterNotNull(), true))
                    }

                    _label = 4
                }
                // AND 4
                4 -> {
                    val _r4_2 = _memo.results.pop()
                    val _r4_1 = _memo.results.pop()

                    if (_r4_1 != null && _r4_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i4, _index.element, _memo.input, (_r4_1.results + _r4_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i4
                    }

                    // AND shortcut 3
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 3
                        continue
                    }

                    // CALLORVAR statements
                    var _r9: _KotlinParser_Item? = null
                    _r9 = _MemoCall(_memo, "statements", _index.element, ::statements, null)
                    if (_r9 != null) _index.element = _r9.nextIndex

                    // BIND stmts
                    stmts = _memo.results.peek()

                    _label = 3
                }
                // AND 3
                3 -> {
                    val _r3_2 = _memo.results.pop()
                    val _r3_1 = _memo.results.pop()

                    if (_r3_1 != null && _r3_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i3, _index.element, _memo.input, (_r3_1.results + _r3_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i3
                    }

                    // AND shortcut 2
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 2
                        continue
                    }

                    // STAR 10
                    _start_i10 = _index.element
                    _label = 10
                }
                // STAR 10
                10 -> {
                    // CALLORVAR NL
                    var _r11: _KotlinParser_Item? = null
                    _r11 = _MemoCall(_memo, "NL", _index.element, ::NL, null)
                    if (_r11 != null) _index.element = _r11.nextIndex

                    // STAR 10
                    val _r10 = _memo.results.pop()
                    if (_r10 != null) {
                        _res10 += _r10.results
                        _label = 10
                        continue
                    } else {
                        _memo.results.push(_KotlinParser_Item(_start_i10, _index.element, _memo.input, _res10.filterNotNull(), true))
                    }

                    _label = 2
                }
                // AND 2
                2 -> {
                    val _r2_2 = _memo.results.pop()
                    val _r2_1 = _memo.results.pop()

                    if (_r2_1 != null && _r2_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i2, _index.element, _memo.input, (_r2_1.results + _r2_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i2
                    }

                    // AND shortcut 1
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 1
                        continue
                    }

                    // CALLORVAR RCURL
                    var _r12: _KotlinParser_Item? = null
                    _r12 = _MemoCall(_memo, "RCURL", _index.element, ::RCURL, null)
                    if (_r12 != null) _index.element = _r12.nextIndex

                    _label = 1
                }
                // AND 1
                1 -> {
                    val _r1_2 = _memo.results.pop()
                    val _r1_1 = _memo.results.pop()

                    if (_r1_1 != null && _r1_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i1, _index.element, _memo.input, (_r1_1.results + _r1_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i1
                    }

                    // ACT 0
                    val _r0 = _memo.results.peek()
                    if (_r0 != null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_r0.startIndex, _r0.nextIndex, _memo.input, _Thunk({ AST.Block(it.l) }, _r0), true))
                    }

                    break
                }
            }
        }
    }


    open fun loopStatement(_memo: _KotlinParser_Memo, __index: Int, _args: _KotlinParser_Args?) {
        val _index = Ref.IntRef()
        _index.element = __index

        val _arg_index = Ref.IntRef()
        val _arg_input_index = Ref.IntRef()

        // OR 0
        var _start_i0 = _index.element

        // OR 1
        var _start_i1 = _index.element

        var _label = -1
        while(true) {
            when(_label) {
                -1 -> {
                    // OR 0
                    _start_i0 = _index.element

                    // OR 1
                    _start_i1 = _index.element

                    // CALLORVAR forStatement
                    var _r2: _KotlinParser_Item? = null
                    _r2 = _MemoCall(_memo, "forStatement", _index.element, ::forStatement, null)
                    if (_r2 != null) _index.element = _r2.nextIndex

                    // OR shortcut 1
                    if (_memo.results.peek() == null) {
                        _memo.results.pop()
                        _index.element = _start_i1
                    } else {
                        _label = 1
                        continue
                    }

                    // CALLORVAR whileStatement
                    var _r3: _KotlinParser_Item? = null
                    _r3 = _MemoCall(_memo, "whileStatement", _index.element, ::whileStatement, null)
                    if (_r3 != null) _index.element = _r3.nextIndex

                    _label = 1
                }
                // OR 1
                1 -> {
                    // OR shortcut 0
                    if (_memo.results.peek() == null) {
                        _memo.results.pop()
                        _index.element = _start_i0
                    } else {
                        _label = 0
                        continue
                    }

                    // CALLORVAR doWhileStatement
                    var _r4: _KotlinParser_Item? = null
                    _r4 = _MemoCall(_memo, "doWhileStatement", _index.element, ::doWhileStatement, null)
                    if (_r4 != null) _index.element = _r4.nextIndex

                    _label = 0
                }
                // OR 0
                0 -> {
                    break
                }
            }
        }
    }


    open fun forStatement(_memo: _KotlinParser_Memo, __index: Int, _args: _KotlinParser_Args?) {
        val _index = Ref.IntRef()
        _index.element = __index

        val _arg_index = Ref.IntRef()
        val _arg_input_index = Ref.IntRef()

        var anns: _KotlinParser_Item? = null
        var vds: _KotlinParser_Item? = null
        var expr: _KotlinParser_Item? = null
        var csb: _KotlinParser_Item? = null

        // AND 1
        var _start_i1 = _index.element

        // AND 2
        var _start_i2 = _index.element

        // AND 3
        var _start_i3 = _index.element

        // AND 4
        var _start_i4 = _index.element

        // AND 5
        var _start_i5 = _index.element

        // AND 6
        var _start_i6 = _index.element

        // AND 7
        var _start_i7 = _index.element

        // AND 8
        var _start_i8 = _index.element

        // AND 9
        var _start_i9 = _index.element

        // STAR 11
        var _start_i11 = _index.element
        val _inp11 = arrayListOf<Token?>()
        val _res11 = arrayListOf<AST.AstNode?>()

        // STAR 15
        var _start_i15 = _index.element
        val _inp15 = arrayListOf<Token?>()
        val _res15 = arrayListOf<AST.AstNode?>()

        // STAR 23
        var _start_i23 = _index.element
        val _inp23 = arrayListOf<Token?>()
        val _res23 = arrayListOf<AST.AstNode?>()

        var _label = -1
        while(true) {
            when(_label) {
                -1 -> {
                    // AND 1
                    _start_i1 = _index.element

                    // AND 2
                    _start_i2 = _index.element

                    // AND 3
                    _start_i3 = _index.element

                    // AND 4
                    _start_i4 = _index.element

                    // AND 5
                    _start_i5 = _index.element

                    // AND 6
                    _start_i6 = _index.element

                    // AND 7
                    _start_i7 = _index.element

                    // AND 8
                    _start_i8 = _index.element

                    // AND 9
                    _start_i9 = _index.element

                    // CALLORVAR FOR
                    var _r10: _KotlinParser_Item? = null
                    _r10 = _MemoCall(_memo, "FOR", _index.element, ::FOR, null)
                    if (_r10 != null) _index.element = _r10.nextIndex

                    // AND shortcut 9
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 9
                        continue
                    }

                    // STAR 11
                    _start_i11 = _index.element
                    _label = 11
                }
                // STAR 11
                11 -> {
                    // CALLORVAR NL
                    var _r12: _KotlinParser_Item? = null
                    _r12 = _MemoCall(_memo, "NL", _index.element, ::NL, null)
                    if (_r12 != null) _index.element = _r12.nextIndex

                    // STAR 11
                    val _r11 = _memo.results.pop()
                    if (_r11 != null) {
                        _res11 += _r11.results
                        _label = 11
                        continue
                    } else {
                        _memo.results.push(_KotlinParser_Item(_start_i11, _index.element, _memo.input, _res11.filterNotNull(), true))
                    }

                    _label = 9
                }
                // AND 9
                9 -> {
                    val _r9_2 = _memo.results.pop()
                    val _r9_1 = _memo.results.pop()

                    if (_r9_1 != null && _r9_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i9, _index.element, _memo.input, (_r9_1.results + _r9_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i9
                    }

                    // AND shortcut 8
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 8
                        continue
                    }

                    // CALLORVAR LPAREN
                    var _r13: _KotlinParser_Item? = null
                    _r13 = _MemoCall(_memo, "LPAREN", _index.element, ::LPAREN, null)
                    if (_r13 != null) _index.element = _r13.nextIndex

                    _label = 8
                }
                // AND 8
                8 -> {
                    val _r8_2 = _memo.results.pop()
                    val _r8_1 = _memo.results.pop()

                    if (_r8_1 != null && _r8_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i8, _index.element, _memo.input, (_r8_1.results + _r8_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i8
                    }

                    // AND shortcut 7
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 7
                        continue
                    }

                    // STAR 15
                    _start_i15 = _index.element
                    _label = 15
                }
                // STAR 15
                15 -> {
                    // CALLORVAR annotation
                    var _r16: _KotlinParser_Item? = null
                    _r16 = _MemoCall(_memo, "annotation", _index.element, ::annotation, null)
                    if (_r16 != null) _index.element = _r16.nextIndex

                    // STAR 15
                    val _r15 = _memo.results.pop()
                    if (_r15 != null) {
                        _res15 += _r15.results
                        _label = 15
                        continue
                    } else {
                        _memo.results.push(_KotlinParser_Item(_start_i15, _index.element, _memo.input, _res15.filterNotNull(), true))
                    }

                    // BIND anns
                    anns = _memo.results.peek()

                    _label = 7
                }
                // AND 7
                7 -> {
                    val _r7_2 = _memo.results.pop()
                    val _r7_1 = _memo.results.pop()

                    if (_r7_1 != null && _r7_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i7, _index.element, _memo.input, (_r7_1.results + _r7_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i7
                    }

                    // AND shortcut 6
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 6
                        continue
                    }

                    // CALLORVAR varDecls
                    var _r18: _KotlinParser_Item? = null
                    _r18 = _MemoCall(_memo, "varDecls", _index.element, ::varDecls, null)
                    if (_r18 != null) _index.element = _r18.nextIndex

                    // BIND vds
                    vds = _memo.results.peek()

                    _label = 6
                }
                // AND 6
                6 -> {
                    val _r6_2 = _memo.results.pop()
                    val _r6_1 = _memo.results.pop()

                    if (_r6_1 != null && _r6_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i6, _index.element, _memo.input, (_r6_1.results + _r6_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i6
                    }

                    // AND shortcut 5
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 5
                        continue
                    }

                    // CALLORVAR IN
                    var _r19: _KotlinParser_Item? = null
                    _r19 = _MemoCall(_memo, "IN", _index.element, ::IN, null)
                    if (_r19 != null) _index.element = _r19.nextIndex

                    _label = 5
                }
                // AND 5
                5 -> {
                    val _r5_2 = _memo.results.pop()
                    val _r5_1 = _memo.results.pop()

                    if (_r5_1 != null && _r5_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i5, _index.element, _memo.input, (_r5_1.results + _r5_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i5
                    }

                    // AND shortcut 4
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 4
                        continue
                    }

                    // CALLORVAR expression
                    var _r21: _KotlinParser_Item? = null
                    _r21 = _MemoCall(_memo, "expression", _index.element, ::expression, null)
                    if (_r21 != null) _index.element = _r21.nextIndex

                    // BIND expr
                    expr = _memo.results.peek()

                    _label = 4
                }
                // AND 4
                4 -> {
                    val _r4_2 = _memo.results.pop()
                    val _r4_1 = _memo.results.pop()

                    if (_r4_1 != null && _r4_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i4, _index.element, _memo.input, (_r4_1.results + _r4_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i4
                    }

                    // AND shortcut 3
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 3
                        continue
                    }

                    // CALLORVAR RPAREN
                    var _r22: _KotlinParser_Item? = null
                    _r22 = _MemoCall(_memo, "RPAREN", _index.element, ::RPAREN, null)
                    if (_r22 != null) _index.element = _r22.nextIndex

                    _label = 3
                }
                // AND 3
                3 -> {
                    val _r3_2 = _memo.results.pop()
                    val _r3_1 = _memo.results.pop()

                    if (_r3_1 != null && _r3_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i3, _index.element, _memo.input, (_r3_1.results + _r3_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i3
                    }

                    // AND shortcut 2
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 2
                        continue
                    }

                    // STAR 23
                    _start_i23 = _index.element
                    _label = 23
                }
                // STAR 23
                23 -> {
                    // CALLORVAR NL
                    var _r24: _KotlinParser_Item? = null
                    _r24 = _MemoCall(_memo, "NL", _index.element, ::NL, null)
                    if (_r24 != null) _index.element = _r24.nextIndex

                    // STAR 23
                    val _r23 = _memo.results.pop()
                    if (_r23 != null) {
                        _res23 += _r23.results
                        _label = 23
                        continue
                    } else {
                        _memo.results.push(_KotlinParser_Item(_start_i23, _index.element, _memo.input, _res23.filterNotNull(), true))
                    }

                    _label = 2
                }
                // AND 2
                2 -> {
                    val _r2_2 = _memo.results.pop()
                    val _r2_1 = _memo.results.pop()

                    if (_r2_1 != null && _r2_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i2, _index.element, _memo.input, (_r2_1.results + _r2_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i2
                    }

                    // AND shortcut 1
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 1
                        continue
                    }

                    // CALLORVAR controlStructureBody
                    var _r27: _KotlinParser_Item? = null
                    _r27 = _MemoCall(_memo, "controlStructureBody", _index.element, ::controlStructureBody, null)
                    if (_r27 != null) _index.element = _r27.nextIndex

                    // QUES 26
                    if (_memo.results.peek() == null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_index.element, _memo.input))
                    }
                    // BIND csb
                    csb = _memo.results.peek()

                    _label = 1
                }
                // AND 1
                1 -> {
                    val _r1_2 = _memo.results.pop()
                    val _r1_1 = _memo.results.pop()

                    if (_r1_1 != null && _r1_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i1, _index.element, _memo.input, (_r1_1.results + _r1_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i1
                    }

                    // ACT 0
                    val _r0 = _memo.results.peek()
                    if (_r0 != null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_r0.startIndex, _r0.nextIndex, _memo.input, _Thunk({ AST.ForStatement(anns.l, vds.r, expr.r, csb.nr) }, _r0), true))
                    }

                    break
                }
            }
        }
    }


    open fun whileStatement(_memo: _KotlinParser_Memo, __index: Int, _args: _KotlinParser_Args?) {
        val _index = Ref.IntRef()
        _index.element = __index

        val _arg_index = Ref.IntRef()
        val _arg_input_index = Ref.IntRef()

        var expr: _KotlinParser_Item? = null
        var csb: _KotlinParser_Item? = null

        // AND 1
        var _start_i1 = _index.element

        // AND 2
        var _start_i2 = _index.element

        // AND 3
        var _start_i3 = _index.element

        // AND 4
        var _start_i4 = _index.element

        // AND 5
        var _start_i5 = _index.element

        // AND 6
        var _start_i6 = _index.element

        // STAR 8
        var _start_i8 = _index.element
        val _inp8 = arrayListOf<Token?>()
        val _res8 = arrayListOf<AST.AstNode?>()

        // STAR 14
        var _start_i14 = _index.element
        val _inp14 = arrayListOf<Token?>()
        val _res14 = arrayListOf<AST.AstNode?>()

        // OR 16
        var _start_i16 = _index.element

        var _label = -1
        while(true) {
            when(_label) {
                -1 -> {
                    // AND 1
                    _start_i1 = _index.element

                    // AND 2
                    _start_i2 = _index.element

                    // AND 3
                    _start_i3 = _index.element

                    // AND 4
                    _start_i4 = _index.element

                    // AND 5
                    _start_i5 = _index.element

                    // AND 6
                    _start_i6 = _index.element

                    // CALLORVAR WHILE
                    var _r7: _KotlinParser_Item? = null
                    _r7 = _MemoCall(_memo, "WHILE", _index.element, ::WHILE, null)
                    if (_r7 != null) _index.element = _r7.nextIndex

                    // AND shortcut 6
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 6
                        continue
                    }

                    // STAR 8
                    _start_i8 = _index.element
                    _label = 8
                }
                // STAR 8
                8 -> {
                    // CALLORVAR NL
                    var _r9: _KotlinParser_Item? = null
                    _r9 = _MemoCall(_memo, "NL", _index.element, ::NL, null)
                    if (_r9 != null) _index.element = _r9.nextIndex

                    // STAR 8
                    val _r8 = _memo.results.pop()
                    if (_r8 != null) {
                        _res8 += _r8.results
                        _label = 8
                        continue
                    } else {
                        _memo.results.push(_KotlinParser_Item(_start_i8, _index.element, _memo.input, _res8.filterNotNull(), true))
                    }

                    _label = 6
                }
                // AND 6
                6 -> {
                    val _r6_2 = _memo.results.pop()
                    val _r6_1 = _memo.results.pop()

                    if (_r6_1 != null && _r6_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i6, _index.element, _memo.input, (_r6_1.results + _r6_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i6
                    }

                    // AND shortcut 5
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 5
                        continue
                    }

                    // CALLORVAR LPAREN
                    var _r10: _KotlinParser_Item? = null
                    _r10 = _MemoCall(_memo, "LPAREN", _index.element, ::LPAREN, null)
                    if (_r10 != null) _index.element = _r10.nextIndex

                    _label = 5
                }
                // AND 5
                5 -> {
                    val _r5_2 = _memo.results.pop()
                    val _r5_1 = _memo.results.pop()

                    if (_r5_1 != null && _r5_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i5, _index.element, _memo.input, (_r5_1.results + _r5_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i5
                    }

                    // AND shortcut 4
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 4
                        continue
                    }

                    // CALLORVAR expression
                    var _r12: _KotlinParser_Item? = null
                    _r12 = _MemoCall(_memo, "expression", _index.element, ::expression, null)
                    if (_r12 != null) _index.element = _r12.nextIndex

                    // BIND expr
                    expr = _memo.results.peek()

                    _label = 4
                }
                // AND 4
                4 -> {
                    val _r4_2 = _memo.results.pop()
                    val _r4_1 = _memo.results.pop()

                    if (_r4_1 != null && _r4_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i4, _index.element, _memo.input, (_r4_1.results + _r4_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i4
                    }

                    // AND shortcut 3
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 3
                        continue
                    }

                    // CALLORVAR RPAREN
                    var _r13: _KotlinParser_Item? = null
                    _r13 = _MemoCall(_memo, "RPAREN", _index.element, ::RPAREN, null)
                    if (_r13 != null) _index.element = _r13.nextIndex

                    _label = 3
                }
                // AND 3
                3 -> {
                    val _r3_2 = _memo.results.pop()
                    val _r3_1 = _memo.results.pop()

                    if (_r3_1 != null && _r3_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i3, _index.element, _memo.input, (_r3_1.results + _r3_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i3
                    }

                    // AND shortcut 2
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 2
                        continue
                    }

                    // STAR 14
                    _start_i14 = _index.element
                    _label = 14
                }
                // STAR 14
                14 -> {
                    // CALLORVAR NL
                    var _r15: _KotlinParser_Item? = null
                    _r15 = _MemoCall(_memo, "NL", _index.element, ::NL, null)
                    if (_r15 != null) _index.element = _r15.nextIndex

                    // STAR 14
                    val _r14 = _memo.results.pop()
                    if (_r14 != null) {
                        _res14 += _r14.results
                        _label = 14
                        continue
                    } else {
                        _memo.results.push(_KotlinParser_Item(_start_i14, _index.element, _memo.input, _res14.filterNotNull(), true))
                    }

                    _label = 2
                }
                // AND 2
                2 -> {
                    val _r2_2 = _memo.results.pop()
                    val _r2_1 = _memo.results.pop()

                    if (_r2_1 != null && _r2_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i2, _index.element, _memo.input, (_r2_1.results + _r2_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i2
                    }

                    // AND shortcut 1
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 1
                        continue
                    }

                    // OR 16
                    _start_i16 = _index.element

                    // CALLORVAR controlStructureBody
                    var _r18: _KotlinParser_Item? = null
                    _r18 = _MemoCall(_memo, "controlStructureBody", _index.element, ::controlStructureBody, null)
                    if (_r18 != null) _index.element = _r18.nextIndex

                    // BIND csb
                    csb = _memo.results.peek()

                    // OR shortcut 16
                    if (_memo.results.peek() == null) {
                        _memo.results.pop()
                        _index.element = _start_i16
                    } else {
                        _label = 16
                        continue
                    }

                    // CALLORVAR SEMICOLON
                    var _r19: _KotlinParser_Item? = null
                    _r19 = _MemoCall(_memo, "SEMICOLON", _index.element, ::SEMICOLON, null)
                    if (_r19 != null) _index.element = _r19.nextIndex

                    _label = 16
                }
                // OR 16
                16 -> {
                    _label = 1
                }
                // AND 1
                1 -> {
                    val _r1_2 = _memo.results.pop()
                    val _r1_1 = _memo.results.pop()

                    if (_r1_1 != null && _r1_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i1, _index.element, _memo.input, (_r1_1.results + _r1_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i1
                    }

                    // ACT 0
                    val _r0 = _memo.results.peek()
                    if (_r0 != null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_r0.startIndex, _r0.nextIndex, _memo.input, _Thunk({ AST.WhileStatement(expr.r, csb.nr) }, _r0), true))
                    }

                    break
                }
            }
        }
    }


    open fun doWhileStatement(_memo: _KotlinParser_Memo, __index: Int, _args: _KotlinParser_Args?) {
        val _index = Ref.IntRef()
        _index.element = __index

        val _arg_index = Ref.IntRef()
        val _arg_input_index = Ref.IntRef()

        var csb: _KotlinParser_Item? = null
        var expr: _KotlinParser_Item? = null

        // AND 1
        var _start_i1 = _index.element

        // AND 2
        var _start_i2 = _index.element

        // AND 3
        var _start_i3 = _index.element

        // AND 4
        var _start_i4 = _index.element

        // AND 5
        var _start_i5 = _index.element

        // AND 6
        var _start_i6 = _index.element

        // AND 7
        var _start_i7 = _index.element

        // AND 8
        var _start_i8 = _index.element

        // STAR 10
        var _start_i10 = _index.element
        val _inp10 = arrayListOf<Token?>()
        val _res10 = arrayListOf<AST.AstNode?>()

        // STAR 15
        var _start_i15 = _index.element
        val _inp15 = arrayListOf<Token?>()
        val _res15 = arrayListOf<AST.AstNode?>()

        // STAR 18
        var _start_i18 = _index.element
        val _inp18 = arrayListOf<Token?>()
        val _res18 = arrayListOf<AST.AstNode?>()

        var _label = -1
        while(true) {
            when(_label) {
                -1 -> {
                    // AND 1
                    _start_i1 = _index.element

                    // AND 2
                    _start_i2 = _index.element

                    // AND 3
                    _start_i3 = _index.element

                    // AND 4
                    _start_i4 = _index.element

                    // AND 5
                    _start_i5 = _index.element

                    // AND 6
                    _start_i6 = _index.element

                    // AND 7
                    _start_i7 = _index.element

                    // AND 8
                    _start_i8 = _index.element

                    // CALLORVAR DO
                    var _r9: _KotlinParser_Item? = null
                    _r9 = _MemoCall(_memo, "DO", _index.element, ::DO, null)
                    if (_r9 != null) _index.element = _r9.nextIndex

                    // AND shortcut 8
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 8
                        continue
                    }

                    // STAR 10
                    _start_i10 = _index.element
                    _label = 10
                }
                // STAR 10
                10 -> {
                    // CALLORVAR NL
                    var _r11: _KotlinParser_Item? = null
                    _r11 = _MemoCall(_memo, "NL", _index.element, ::NL, null)
                    if (_r11 != null) _index.element = _r11.nextIndex

                    // STAR 10
                    val _r10 = _memo.results.pop()
                    if (_r10 != null) {
                        _res10 += _r10.results
                        _label = 10
                        continue
                    } else {
                        _memo.results.push(_KotlinParser_Item(_start_i10, _index.element, _memo.input, _res10.filterNotNull(), true))
                    }

                    _label = 8
                }
                // AND 8
                8 -> {
                    val _r8_2 = _memo.results.pop()
                    val _r8_1 = _memo.results.pop()

                    if (_r8_1 != null && _r8_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i8, _index.element, _memo.input, (_r8_1.results + _r8_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i8
                    }

                    // AND shortcut 7
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 7
                        continue
                    }

                    // CALLORVAR controlStructureBody
                    var _r14: _KotlinParser_Item? = null
                    _r14 = _MemoCall(_memo, "controlStructureBody", _index.element, ::controlStructureBody, null)
                    if (_r14 != null) _index.element = _r14.nextIndex

                    // QUES 13
                    if (_memo.results.peek() == null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_index.element, _memo.input))
                    }
                    // BIND csb
                    csb = _memo.results.peek()

                    _label = 7
                }
                // AND 7
                7 -> {
                    val _r7_2 = _memo.results.pop()
                    val _r7_1 = _memo.results.pop()

                    if (_r7_1 != null && _r7_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i7, _index.element, _memo.input, (_r7_1.results + _r7_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i7
                    }

                    // AND shortcut 6
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 6
                        continue
                    }

                    // STAR 15
                    _start_i15 = _index.element
                    _label = 15
                }
                // STAR 15
                15 -> {
                    // CALLORVAR NL
                    var _r16: _KotlinParser_Item? = null
                    _r16 = _MemoCall(_memo, "NL", _index.element, ::NL, null)
                    if (_r16 != null) _index.element = _r16.nextIndex

                    // STAR 15
                    val _r15 = _memo.results.pop()
                    if (_r15 != null) {
                        _res15 += _r15.results
                        _label = 15
                        continue
                    } else {
                        _memo.results.push(_KotlinParser_Item(_start_i15, _index.element, _memo.input, _res15.filterNotNull(), true))
                    }

                    _label = 6
                }
                // AND 6
                6 -> {
                    val _r6_2 = _memo.results.pop()
                    val _r6_1 = _memo.results.pop()

                    if (_r6_1 != null && _r6_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i6, _index.element, _memo.input, (_r6_1.results + _r6_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i6
                    }

                    // AND shortcut 5
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 5
                        continue
                    }

                    // CALLORVAR WHILE
                    var _r17: _KotlinParser_Item? = null
                    _r17 = _MemoCall(_memo, "WHILE", _index.element, ::WHILE, null)
                    if (_r17 != null) _index.element = _r17.nextIndex

                    _label = 5
                }
                // AND 5
                5 -> {
                    val _r5_2 = _memo.results.pop()
                    val _r5_1 = _memo.results.pop()

                    if (_r5_1 != null && _r5_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i5, _index.element, _memo.input, (_r5_1.results + _r5_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i5
                    }

                    // AND shortcut 4
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 4
                        continue
                    }

                    // STAR 18
                    _start_i18 = _index.element
                    _label = 18
                }
                // STAR 18
                18 -> {
                    // CALLORVAR NL
                    var _r19: _KotlinParser_Item? = null
                    _r19 = _MemoCall(_memo, "NL", _index.element, ::NL, null)
                    if (_r19 != null) _index.element = _r19.nextIndex

                    // STAR 18
                    val _r18 = _memo.results.pop()
                    if (_r18 != null) {
                        _res18 += _r18.results
                        _label = 18
                        continue
                    } else {
                        _memo.results.push(_KotlinParser_Item(_start_i18, _index.element, _memo.input, _res18.filterNotNull(), true))
                    }

                    _label = 4
                }
                // AND 4
                4 -> {
                    val _r4_2 = _memo.results.pop()
                    val _r4_1 = _memo.results.pop()

                    if (_r4_1 != null && _r4_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i4, _index.element, _memo.input, (_r4_1.results + _r4_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i4
                    }

                    // AND shortcut 3
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 3
                        continue
                    }

                    // CALLORVAR LPAREN
                    var _r20: _KotlinParser_Item? = null
                    _r20 = _MemoCall(_memo, "LPAREN", _index.element, ::LPAREN, null)
                    if (_r20 != null) _index.element = _r20.nextIndex

                    _label = 3
                }
                // AND 3
                3 -> {
                    val _r3_2 = _memo.results.pop()
                    val _r3_1 = _memo.results.pop()

                    if (_r3_1 != null && _r3_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i3, _index.element, _memo.input, (_r3_1.results + _r3_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i3
                    }

                    // AND shortcut 2
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 2
                        continue
                    }

                    // CALLORVAR expression
                    var _r22: _KotlinParser_Item? = null
                    _r22 = _MemoCall(_memo, "expression", _index.element, ::expression, null)
                    if (_r22 != null) _index.element = _r22.nextIndex

                    // BIND expr
                    expr = _memo.results.peek()

                    _label = 2
                }
                // AND 2
                2 -> {
                    val _r2_2 = _memo.results.pop()
                    val _r2_1 = _memo.results.pop()

                    if (_r2_1 != null && _r2_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i2, _index.element, _memo.input, (_r2_1.results + _r2_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i2
                    }

                    // AND shortcut 1
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 1
                        continue
                    }

                    // CALLORVAR RPAREN
                    var _r23: _KotlinParser_Item? = null
                    _r23 = _MemoCall(_memo, "RPAREN", _index.element, ::RPAREN, null)
                    if (_r23 != null) _index.element = _r23.nextIndex

                    _label = 1
                }
                // AND 1
                1 -> {
                    val _r1_2 = _memo.results.pop()
                    val _r1_1 = _memo.results.pop()

                    if (_r1_1 != null && _r1_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i1, _index.element, _memo.input, (_r1_1.results + _r1_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i1
                    }

                    // ACT 0
                    val _r0 = _memo.results.peek()
                    if (_r0 != null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_r0.startIndex, _r0.nextIndex, _memo.input, _Thunk({ AST.DoWhileStatement(csb.nr, expr.r) }, _r0), true))
                    }

                    break
                }
            }
        }
    }


    open fun assignment(_memo: _KotlinParser_Memo, __index: Int, _args: _KotlinParser_Args?) {
        val _index = Ref.IntRef()
        _index.element = __index

        val _arg_index = Ref.IntRef()
        val _arg_input_index = Ref.IntRef()

        var lhs: _KotlinParser_Item? = null
        var rhs: _KotlinParser_Item? = null
        var op: _KotlinParser_Item? = null

        // OR 0
        var _start_i0 = _index.element

        // AND 2
        var _start_i2 = _index.element

        // AND 3
        var _start_i3 = _index.element

        // AND 4
        var _start_i4 = _index.element

        // STAR 8
        var _start_i8 = _index.element
        val _inp8 = arrayListOf<Token?>()
        val _res8 = arrayListOf<AST.AstNode?>()

        // AND 13
        var _start_i13 = _index.element

        // AND 14
        var _start_i14 = _index.element

        // AND 15
        var _start_i15 = _index.element

        // STAR 20
        var _start_i20 = _index.element
        val _inp20 = arrayListOf<Token?>()
        val _res20 = arrayListOf<AST.AstNode?>()

        var _label = -1
        while(true) {
            when(_label) {
                -1 -> {
                    // OR 0
                    _start_i0 = _index.element

                    // AND 2
                    _start_i2 = _index.element

                    // AND 3
                    _start_i3 = _index.element

                    // AND 4
                    _start_i4 = _index.element

                    // CALLORVAR directlyAssignableExpression
                    var _r6: _KotlinParser_Item? = null
                    _r6 = _MemoCall(_memo, "directlyAssignableExpression", _index.element, ::directlyAssignableExpression, null)
                    if (_r6 != null) _index.element = _r6.nextIndex

                    // BIND lhs
                    lhs = _memo.results.peek()

                    // AND shortcut 4
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 4
                        continue
                    }

                    // CALLORVAR ASSIGNMENT
                    var _r7: _KotlinParser_Item? = null
                    _r7 = _MemoCall(_memo, "ASSIGNMENT", _index.element, ::ASSIGNMENT, null)
                    if (_r7 != null) _index.element = _r7.nextIndex

                    _label = 4
                }
                // AND 4
                4 -> {
                    val _r4_2 = _memo.results.pop()
                    val _r4_1 = _memo.results.pop()

                    if (_r4_1 != null && _r4_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i4, _index.element, _memo.input, (_r4_1.results + _r4_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i4
                    }

                    // AND shortcut 3
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 3
                        continue
                    }

                    // STAR 8
                    _start_i8 = _index.element
                    _label = 8
                }
                // STAR 8
                8 -> {
                    // CALLORVAR NL
                    var _r9: _KotlinParser_Item? = null
                    _r9 = _MemoCall(_memo, "NL", _index.element, ::NL, null)
                    if (_r9 != null) _index.element = _r9.nextIndex

                    // STAR 8
                    val _r8 = _memo.results.pop()
                    if (_r8 != null) {
                        _res8 += _r8.results
                        _label = 8
                        continue
                    } else {
                        _memo.results.push(_KotlinParser_Item(_start_i8, _index.element, _memo.input, _res8.filterNotNull(), true))
                    }

                    _label = 3
                }
                // AND 3
                3 -> {
                    val _r3_2 = _memo.results.pop()
                    val _r3_1 = _memo.results.pop()

                    if (_r3_1 != null && _r3_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i3, _index.element, _memo.input, (_r3_1.results + _r3_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i3
                    }

                    // AND shortcut 2
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 2
                        continue
                    }

                    // CALLORVAR expression
                    var _r11: _KotlinParser_Item? = null
                    _r11 = _MemoCall(_memo, "expression", _index.element, ::expression, null)
                    if (_r11 != null) _index.element = _r11.nextIndex

                    // BIND rhs
                    rhs = _memo.results.peek()

                    _label = 2
                }
                // AND 2
                2 -> {
                    val _r2_2 = _memo.results.pop()
                    val _r2_1 = _memo.results.pop()

                    if (_r2_1 != null && _r2_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i2, _index.element, _memo.input, (_r2_1.results + _r2_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i2
                    }

                    // ACT 1
                    val _r1 = _memo.results.peek()
                    if (_r1 != null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_r1.startIndex, _r1.nextIndex, _memo.input, _Thunk({ AST.DirectAssignment(lhs.r, rhs.r) }, _r1), true))
                    }

                    // OR shortcut 0
                    if (_memo.results.peek() == null) {
                        _memo.results.pop()
                        _index.element = _start_i0
                    } else {
                        _label = 0
                        continue
                    }

                    // AND 13
                    _start_i13 = _index.element

                    // AND 14
                    _start_i14 = _index.element

                    // AND 15
                    _start_i15 = _index.element

                    // CALLORVAR assignableExpression
                    var _r17: _KotlinParser_Item? = null
                    _r17 = _MemoCall(_memo, "assignableExpression", _index.element, ::assignableExpression, null)
                    if (_r17 != null) _index.element = _r17.nextIndex

                    // BIND lhs
                    lhs = _memo.results.peek()

                    // AND shortcut 15
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 15
                        continue
                    }

                    // CALLORVAR assignmentAndOperator
                    var _r19: _KotlinParser_Item? = null
                    _r19 = _MemoCall(_memo, "assignmentAndOperator", _index.element, ::assignmentAndOperator, null)
                    if (_r19 != null) _index.element = _r19.nextIndex

                    // BIND op
                    op = _memo.results.peek()

                    _label = 15
                }
                // AND 15
                15 -> {
                    val _r15_2 = _memo.results.pop()
                    val _r15_1 = _memo.results.pop()

                    if (_r15_1 != null && _r15_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i15, _index.element, _memo.input, (_r15_1.results + _r15_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i15
                    }

                    // AND shortcut 14
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 14
                        continue
                    }

                    // STAR 20
                    _start_i20 = _index.element
                    _label = 20
                }
                // STAR 20
                20 -> {
                    // CALLORVAR NL
                    var _r21: _KotlinParser_Item? = null
                    _r21 = _MemoCall(_memo, "NL", _index.element, ::NL, null)
                    if (_r21 != null) _index.element = _r21.nextIndex

                    // STAR 20
                    val _r20 = _memo.results.pop()
                    if (_r20 != null) {
                        _res20 += _r20.results
                        _label = 20
                        continue
                    } else {
                        _memo.results.push(_KotlinParser_Item(_start_i20, _index.element, _memo.input, _res20.filterNotNull(), true))
                    }

                    _label = 14
                }
                // AND 14
                14 -> {
                    val _r14_2 = _memo.results.pop()
                    val _r14_1 = _memo.results.pop()

                    if (_r14_1 != null && _r14_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i14, _index.element, _memo.input, (_r14_1.results + _r14_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i14
                    }

                    // AND shortcut 13
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 13
                        continue
                    }

                    // CALLORVAR expression
                    var _r23: _KotlinParser_Item? = null
                    _r23 = _MemoCall(_memo, "expression", _index.element, ::expression, null)
                    if (_r23 != null) _index.element = _r23.nextIndex

                    // BIND rhs
                    rhs = _memo.results.peek()

                    _label = 13
                }
                // AND 13
                13 -> {
                    val _r13_2 = _memo.results.pop()
                    val _r13_1 = _memo.results.pop()

                    if (_r13_1 != null && _r13_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i13, _index.element, _memo.input, (_r13_1.results + _r13_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i13
                    }

                    // ACT 12
                    val _r12 = _memo.results.peek()
                    if (_r12 != null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_r12.startIndex, _r12.nextIndex, _memo.input, _Thunk({ AST.AugmentedAssignment(lhs.r, op.r, rhs.r) }, _r12), true))
                    }

                    _label = 0
                }
                // OR 0
                0 -> {
                    break
                }
            }
        }
    }


    open fun semi(_memo: _KotlinParser_Memo, __index: Int, _args: _KotlinParser_Args?) {
        val _index = Ref.IntRef()
        _index.element = __index

        val _arg_index = Ref.IntRef()
        val _arg_input_index = Ref.IntRef()

        // OR 0
        var _start_i0 = _index.element

        // AND 1
        var _start_i1 = _index.element

        // OR 2
        var _start_i2 = _index.element

        // STAR 5
        var _start_i5 = _index.element
        val _inp5 = arrayListOf<Token?>()
        val _res5 = arrayListOf<AST.AstNode?>()

        var _label = -1
        while(true) {
            when(_label) {
                -1 -> {
                    // OR 0
                    _start_i0 = _index.element

                    // AND 1
                    _start_i1 = _index.element

                    // OR 2
                    _start_i2 = _index.element

                    // CALLORVAR SEMICOLON
                    var _r3: _KotlinParser_Item? = null
                    _r3 = _MemoCall(_memo, "SEMICOLON", _index.element, ::SEMICOLON, null)
                    if (_r3 != null) _index.element = _r3.nextIndex

                    // OR shortcut 2
                    if (_memo.results.peek() == null) {
                        _memo.results.pop()
                        _index.element = _start_i2
                    } else {
                        _label = 2
                        continue
                    }

                    // CALLORVAR NL
                    var _r4: _KotlinParser_Item? = null
                    _r4 = _MemoCall(_memo, "NL", _index.element, ::NL, null)
                    if (_r4 != null) _index.element = _r4.nextIndex

                    _label = 2
                }
                // OR 2
                2 -> {
                    // AND shortcut 1
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 1
                        continue
                    }

                    // STAR 5
                    _start_i5 = _index.element
                    _label = 5
                }
                // STAR 5
                5 -> {
                    // CALLORVAR NL
                    var _r6: _KotlinParser_Item? = null
                    _r6 = _MemoCall(_memo, "NL", _index.element, ::NL, null)
                    if (_r6 != null) _index.element = _r6.nextIndex

                    // STAR 5
                    val _r5 = _memo.results.pop()
                    if (_r5 != null) {
                        _res5 += _r5.results
                        _label = 5
                        continue
                    } else {
                        _memo.results.push(_KotlinParser_Item(_start_i5, _index.element, _memo.input, _res5.filterNotNull(), true))
                    }

                    _label = 1
                }
                // AND 1
                1 -> {
                    val _r1_2 = _memo.results.pop()
                    val _r1_1 = _memo.results.pop()

                    if (_r1_1 != null && _r1_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i1, _index.element, _memo.input, (_r1_1.results + _r1_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i1
                    }

                    // OR shortcut 0
                    if (_memo.results.peek() == null) {
                        _memo.results.pop()
                        _index.element = _start_i0
                    } else {
                        _label = 0
                        continue
                    }

                    // CALLORVAR EOF
                    var _r7: _KotlinParser_Item? = null
                    _r7 = _MemoCall(_memo, "EOF", _index.element, ::EOF, null)
                    if (_r7 != null) _index.element = _r7.nextIndex

                    _label = 0
                }
                // OR 0
                0 -> {
                    break
                }
            }
        }
    }


    open fun semis(_memo: _KotlinParser_Memo, __index: Int, _args: _KotlinParser_Args?) {
        val _index = Ref.IntRef()
        _index.element = __index

        val _arg_index = Ref.IntRef()
        val _arg_input_index = Ref.IntRef()

        // OR 0
        var _start_i0 = _index.element

        // PLUS 1
        var _start_i1 = _index.element
        val _inp1 = arrayListOf<Token?>()
        val _res1 = arrayListOf<AST.AstNode?>()

        // OR 2
        var _start_i2 = _index.element

        var _label = -1
        while(true) {
            when(_label) {
                -1 -> {
                    // OR 0
                    _start_i0 = _index.element

                    // PLUS 1
                    _start_i1 = _index.element
                    _label = 1
                }
                // PLUS 1
                1 -> {
                    // OR 2
                    _start_i2 = _index.element

                    // CALLORVAR SEMICOLON
                    var _r3: _KotlinParser_Item? = null
                    _r3 = _MemoCall(_memo, "SEMICOLON", _index.element, ::SEMICOLON, null)
                    if (_r3 != null) _index.element = _r3.nextIndex

                    // OR shortcut 2
                    if (_memo.results.peek() == null) {
                        _memo.results.pop()
                        _index.element = _start_i2
                    } else {
                        _label = 2
                        continue
                    }

                    // CALLORVAR NL
                    var _r4: _KotlinParser_Item? = null
                    _r4 = _MemoCall(_memo, "NL", _index.element, ::NL, null)
                    if (_r4 != null) _index.element = _r4.nextIndex

                    _label = 2
                }
                // OR 2
                2 -> {
                    // PLUS 1
                    val _r1 = _memo.results.pop()
                    if (_r1 != null) {
                        _res1 += _r1.results
                        _label = 1
                        continue
                    } else {
                        if (_index.element > _start_i1) {
                            _memo.results.push(_KotlinParser_Item(_start_i1, _index.element, _memo.input, _res1.filterNotNull(), true))
                        } else {
                            _memo.results.push(null)
                        }
                    }

                    // OR shortcut 0
                    if (_memo.results.peek() == null) {
                        _memo.results.pop()
                        _index.element = _start_i0
                    } else {
                        _label = 0
                        continue
                    }

                    // CALLORVAR EOF
                    var _r5: _KotlinParser_Item? = null
                    _r5 = _MemoCall(_memo, "EOF", _index.element, ::EOF, null)
                    if (_r5 != null) _index.element = _r5.nextIndex

                    _label = 0
                }
                // OR 0
                0 -> {
                    break
                }
            }
        }
    }


    open fun expression(_memo: _KotlinParser_Memo, __index: Int, _args: _KotlinParser_Args?) {
        val _index = Ref.IntRef()
        _index.element = __index

        val _arg_index = Ref.IntRef()
        val _arg_input_index = Ref.IntRef()

        // OR 0
        var _start_i0 = _index.element

        var _label = -1
        while(true) {
            when(_label) {
                -1 -> {
                    // OR 0
                    _start_i0 = _index.element

                    // CALLORVAR userDefinedExpression
                    var _r1: _KotlinParser_Item? = null
                    _r1 = _MemoCall(_memo, "userDefinedExpression", _index.element, ::userDefinedExpression, null)
                    if (_r1 != null) _index.element = _r1.nextIndex

                    // OR shortcut 0
                    if (_memo.results.peek() == null) {
                        _memo.results.pop()
                        _index.element = _start_i0
                    } else {
                        _label = 0
                        continue
                    }

                    // CALLORVAR disjunction
                    var _r2: _KotlinParser_Item? = null
                    _r2 = _MemoCall(_memo, "disjunction", _index.element, ::disjunction, null)
                    if (_r2 != null) _index.element = _r2.nextIndex

                    _label = 0
                }
                // OR 0
                0 -> {
                    break
                }
            }
        }
    }


    open fun userDefinedExpression(_memo: _KotlinParser_Memo, __index: Int, _args: _KotlinParser_Args?) {
        val _index = Ref.IntRef()
        _index.element = __index

        val _arg_index = Ref.IntRef()
        val _arg_input_index = Ref.IntRef()

        var _label = -1
        while(true) {
            when(_label) {
                -1 -> {
                    // CALLORVAR _ABSURD
                    var _r0: _KotlinParser_Item? = null
                    _r0 = _MemoCall(_memo, "_ABSURD", _index.element, ::_ABSURD, null)
                    if (_r0 != null) _index.element = _r0.nextIndex

                    break
                }
            }
        }
    }


    open fun disjunction(_memo: _KotlinParser_Memo, __index: Int, _args: _KotlinParser_Args?) {
        val _index = Ref.IntRef()
        _index.element = __index

        val _arg_index = Ref.IntRef()
        val _arg_input_index = Ref.IntRef()

        // AND 1
        var _start_i1 = _index.element

        // STAR 3
        var _start_i3 = _index.element
        val _inp3 = arrayListOf<Token?>()
        val _res3 = arrayListOf<AST.AstNode?>()

        // AND 4
        var _start_i4 = _index.element

        // AND 5
        var _start_i5 = _index.element

        // AND 6
        var _start_i6 = _index.element

        // STAR 7
        var _start_i7 = _index.element
        val _inp7 = arrayListOf<Token?>()
        val _res7 = arrayListOf<AST.AstNode?>()

        // STAR 10
        var _start_i10 = _index.element
        val _inp10 = arrayListOf<Token?>()
        val _res10 = arrayListOf<AST.AstNode?>()

        var _label = -1
        while(true) {
            when(_label) {
                -1 -> {
                    // AND 1
                    _start_i1 = _index.element

                    // CALLORVAR conjunction
                    var _r2: _KotlinParser_Item? = null
                    _r2 = _MemoCall(_memo, "conjunction", _index.element, ::conjunction, null)
                    if (_r2 != null) _index.element = _r2.nextIndex

                    // AND shortcut 1
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 1
                        continue
                    }

                    // STAR 3
                    _start_i3 = _index.element
                    _label = 3
                }
                // STAR 3
                3 -> {
                    // AND 4
                    _start_i4 = _index.element

                    // AND 5
                    _start_i5 = _index.element

                    // AND 6
                    _start_i6 = _index.element

                    // STAR 7
                    _start_i7 = _index.element
                    _label = 7
                }
                // STAR 7
                7 -> {
                    // CALLORVAR NL
                    var _r8: _KotlinParser_Item? = null
                    _r8 = _MemoCall(_memo, "NL", _index.element, ::NL, null)
                    if (_r8 != null) _index.element = _r8.nextIndex

                    // STAR 7
                    val _r7 = _memo.results.pop()
                    if (_r7 != null) {
                        _res7 += _r7.results
                        _label = 7
                        continue
                    } else {
                        _memo.results.push(_KotlinParser_Item(_start_i7, _index.element, _memo.input, _res7.filterNotNull(), true))
                    }

                    // AND shortcut 6
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 6
                        continue
                    }

                    // CALLORVAR DISJ
                    var _r9: _KotlinParser_Item? = null
                    _r9 = _MemoCall(_memo, "DISJ", _index.element, ::DISJ, null)
                    if (_r9 != null) _index.element = _r9.nextIndex

                    _label = 6
                }
                // AND 6
                6 -> {
                    val _r6_2 = _memo.results.pop()
                    val _r6_1 = _memo.results.pop()

                    if (_r6_1 != null && _r6_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i6, _index.element, _memo.input, (_r6_1.results + _r6_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i6
                    }

                    // AND shortcut 5
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 5
                        continue
                    }

                    // STAR 10
                    _start_i10 = _index.element
                    _label = 10
                }
                // STAR 10
                10 -> {
                    // CALLORVAR NL
                    var _r11: _KotlinParser_Item? = null
                    _r11 = _MemoCall(_memo, "NL", _index.element, ::NL, null)
                    if (_r11 != null) _index.element = _r11.nextIndex

                    // STAR 10
                    val _r10 = _memo.results.pop()
                    if (_r10 != null) {
                        _res10 += _r10.results
                        _label = 10
                        continue
                    } else {
                        _memo.results.push(_KotlinParser_Item(_start_i10, _index.element, _memo.input, _res10.filterNotNull(), true))
                    }

                    _label = 5
                }
                // AND 5
                5 -> {
                    val _r5_2 = _memo.results.pop()
                    val _r5_1 = _memo.results.pop()

                    if (_r5_1 != null && _r5_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i5, _index.element, _memo.input, (_r5_1.results + _r5_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i5
                    }

                    // AND shortcut 4
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 4
                        continue
                    }

                    // CALLORVAR conjunction
                    var _r12: _KotlinParser_Item? = null
                    _r12 = _MemoCall(_memo, "conjunction", _index.element, ::conjunction, null)
                    if (_r12 != null) _index.element = _r12.nextIndex

                    _label = 4
                }
                // AND 4
                4 -> {
                    val _r4_2 = _memo.results.pop()
                    val _r4_1 = _memo.results.pop()

                    if (_r4_1 != null && _r4_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i4, _index.element, _memo.input, (_r4_1.results + _r4_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i4
                    }

                    // STAR 3
                    val _r3 = _memo.results.pop()
                    if (_r3 != null) {
                        _res3 += _r3.results
                        _label = 3
                        continue
                    } else {
                        _memo.results.push(_KotlinParser_Item(_start_i3, _index.element, _memo.input, _res3.filterNotNull(), true))
                    }

                    _label = 1
                }
                // AND 1
                1 -> {
                    val _r1_2 = _memo.results.pop()
                    val _r1_1 = _memo.results.pop()

                    if (_r1_1 != null && _r1_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i1, _index.element, _memo.input, (_r1_1.results + _r1_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i1
                    }

                    // ACT 0
                    val _r0 = _memo.results.peek()
                    if (_r0 != null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_r0.startIndex, _r0.nextIndex, _memo.input, _Thunk({ AST.Disjunction(it.l) }, _r0), true))
                    }

                    break
                }
            }
        }
    }


    open fun conjunction(_memo: _KotlinParser_Memo, __index: Int, _args: _KotlinParser_Args?) {
        val _index = Ref.IntRef()
        _index.element = __index

        val _arg_index = Ref.IntRef()
        val _arg_input_index = Ref.IntRef()

        // AND 1
        var _start_i1 = _index.element

        // STAR 3
        var _start_i3 = _index.element
        val _inp3 = arrayListOf<Token?>()
        val _res3 = arrayListOf<AST.AstNode?>()

        // AND 4
        var _start_i4 = _index.element

        // AND 5
        var _start_i5 = _index.element

        // AND 6
        var _start_i6 = _index.element

        // STAR 7
        var _start_i7 = _index.element
        val _inp7 = arrayListOf<Token?>()
        val _res7 = arrayListOf<AST.AstNode?>()

        // STAR 10
        var _start_i10 = _index.element
        val _inp10 = arrayListOf<Token?>()
        val _res10 = arrayListOf<AST.AstNode?>()

        var _label = -1
        while(true) {
            when(_label) {
                -1 -> {
                    // AND 1
                    _start_i1 = _index.element

                    // CALLORVAR equality
                    var _r2: _KotlinParser_Item? = null
                    _r2 = _MemoCall(_memo, "equality", _index.element, ::equality, null)
                    if (_r2 != null) _index.element = _r2.nextIndex

                    // AND shortcut 1
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 1
                        continue
                    }

                    // STAR 3
                    _start_i3 = _index.element
                    _label = 3
                }
                // STAR 3
                3 -> {
                    // AND 4
                    _start_i4 = _index.element

                    // AND 5
                    _start_i5 = _index.element

                    // AND 6
                    _start_i6 = _index.element

                    // STAR 7
                    _start_i7 = _index.element
                    _label = 7
                }
                // STAR 7
                7 -> {
                    // CALLORVAR NL
                    var _r8: _KotlinParser_Item? = null
                    _r8 = _MemoCall(_memo, "NL", _index.element, ::NL, null)
                    if (_r8 != null) _index.element = _r8.nextIndex

                    // STAR 7
                    val _r7 = _memo.results.pop()
                    if (_r7 != null) {
                        _res7 += _r7.results
                        _label = 7
                        continue
                    } else {
                        _memo.results.push(_KotlinParser_Item(_start_i7, _index.element, _memo.input, _res7.filterNotNull(), true))
                    }

                    // AND shortcut 6
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 6
                        continue
                    }

                    // CALLORVAR CONJ
                    var _r9: _KotlinParser_Item? = null
                    _r9 = _MemoCall(_memo, "CONJ", _index.element, ::CONJ, null)
                    if (_r9 != null) _index.element = _r9.nextIndex

                    _label = 6
                }
                // AND 6
                6 -> {
                    val _r6_2 = _memo.results.pop()
                    val _r6_1 = _memo.results.pop()

                    if (_r6_1 != null && _r6_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i6, _index.element, _memo.input, (_r6_1.results + _r6_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i6
                    }

                    // AND shortcut 5
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 5
                        continue
                    }

                    // STAR 10
                    _start_i10 = _index.element
                    _label = 10
                }
                // STAR 10
                10 -> {
                    // CALLORVAR NL
                    var _r11: _KotlinParser_Item? = null
                    _r11 = _MemoCall(_memo, "NL", _index.element, ::NL, null)
                    if (_r11 != null) _index.element = _r11.nextIndex

                    // STAR 10
                    val _r10 = _memo.results.pop()
                    if (_r10 != null) {
                        _res10 += _r10.results
                        _label = 10
                        continue
                    } else {
                        _memo.results.push(_KotlinParser_Item(_start_i10, _index.element, _memo.input, _res10.filterNotNull(), true))
                    }

                    _label = 5
                }
                // AND 5
                5 -> {
                    val _r5_2 = _memo.results.pop()
                    val _r5_1 = _memo.results.pop()

                    if (_r5_1 != null && _r5_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i5, _index.element, _memo.input, (_r5_1.results + _r5_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i5
                    }

                    // AND shortcut 4
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 4
                        continue
                    }

                    // CALLORVAR equality
                    var _r12: _KotlinParser_Item? = null
                    _r12 = _MemoCall(_memo, "equality", _index.element, ::equality, null)
                    if (_r12 != null) _index.element = _r12.nextIndex

                    _label = 4
                }
                // AND 4
                4 -> {
                    val _r4_2 = _memo.results.pop()
                    val _r4_1 = _memo.results.pop()

                    if (_r4_1 != null && _r4_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i4, _index.element, _memo.input, (_r4_1.results + _r4_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i4
                    }

                    // STAR 3
                    val _r3 = _memo.results.pop()
                    if (_r3 != null) {
                        _res3 += _r3.results
                        _label = 3
                        continue
                    } else {
                        _memo.results.push(_KotlinParser_Item(_start_i3, _index.element, _memo.input, _res3.filterNotNull(), true))
                    }

                    _label = 1
                }
                // AND 1
                1 -> {
                    val _r1_2 = _memo.results.pop()
                    val _r1_1 = _memo.results.pop()

                    if (_r1_1 != null && _r1_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i1, _index.element, _memo.input, (_r1_1.results + _r1_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i1
                    }

                    // ACT 0
                    val _r0 = _memo.results.peek()
                    if (_r0 != null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_r0.startIndex, _r0.nextIndex, _memo.input, _Thunk({ AST.Conjunction(it.l) }, _r0), true))
                    }

                    break
                }
            }
        }
    }


    open fun equality(_memo: _KotlinParser_Memo, __index: Int, _args: _KotlinParser_Args?) {
        val _index = Ref.IntRef()
        _index.element = __index

        val _arg_index = Ref.IntRef()
        val _arg_input_index = Ref.IntRef()

        // AND 1
        var _start_i1 = _index.element

        // STAR 3
        var _start_i3 = _index.element
        val _inp3 = arrayListOf<Token?>()
        val _res3 = arrayListOf<AST.AstNode?>()

        // AND 4
        var _start_i4 = _index.element

        // AND 5
        var _start_i5 = _index.element

        // STAR 7
        var _start_i7 = _index.element
        val _inp7 = arrayListOf<Token?>()
        val _res7 = arrayListOf<AST.AstNode?>()

        var _label = -1
        while(true) {
            when(_label) {
                -1 -> {
                    // AND 1
                    _start_i1 = _index.element

                    // CALLORVAR comparison
                    var _r2: _KotlinParser_Item? = null
                    _r2 = _MemoCall(_memo, "comparison", _index.element, ::comparison, null)
                    if (_r2 != null) _index.element = _r2.nextIndex

                    // AND shortcut 1
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 1
                        continue
                    }

                    // STAR 3
                    _start_i3 = _index.element
                    _label = 3
                }
                // STAR 3
                3 -> {
                    // AND 4
                    _start_i4 = _index.element

                    // AND 5
                    _start_i5 = _index.element

                    // CALLORVAR equalityOperator
                    var _r6: _KotlinParser_Item? = null
                    _r6 = _MemoCall(_memo, "equalityOperator", _index.element, ::equalityOperator, null)
                    if (_r6 != null) _index.element = _r6.nextIndex

                    // AND shortcut 5
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 5
                        continue
                    }

                    // STAR 7
                    _start_i7 = _index.element
                    _label = 7
                }
                // STAR 7
                7 -> {
                    // CALLORVAR NL
                    var _r8: _KotlinParser_Item? = null
                    _r8 = _MemoCall(_memo, "NL", _index.element, ::NL, null)
                    if (_r8 != null) _index.element = _r8.nextIndex

                    // STAR 7
                    val _r7 = _memo.results.pop()
                    if (_r7 != null) {
                        _res7 += _r7.results
                        _label = 7
                        continue
                    } else {
                        _memo.results.push(_KotlinParser_Item(_start_i7, _index.element, _memo.input, _res7.filterNotNull(), true))
                    }

                    _label = 5
                }
                // AND 5
                5 -> {
                    val _r5_2 = _memo.results.pop()
                    val _r5_1 = _memo.results.pop()

                    if (_r5_1 != null && _r5_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i5, _index.element, _memo.input, (_r5_1.results + _r5_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i5
                    }

                    // AND shortcut 4
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 4
                        continue
                    }

                    // CALLORVAR comparison
                    var _r9: _KotlinParser_Item? = null
                    _r9 = _MemoCall(_memo, "comparison", _index.element, ::comparison, null)
                    if (_r9 != null) _index.element = _r9.nextIndex

                    _label = 4
                }
                // AND 4
                4 -> {
                    val _r4_2 = _memo.results.pop()
                    val _r4_1 = _memo.results.pop()

                    if (_r4_1 != null && _r4_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i4, _index.element, _memo.input, (_r4_1.results + _r4_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i4
                    }

                    // STAR 3
                    val _r3 = _memo.results.pop()
                    if (_r3 != null) {
                        _res3 += _r3.results
                        _label = 3
                        continue
                    } else {
                        _memo.results.push(_KotlinParser_Item(_start_i3, _index.element, _memo.input, _res3.filterNotNull(), true))
                    }

                    _label = 1
                }
                // AND 1
                1 -> {
                    val _r1_2 = _memo.results.pop()
                    val _r1_1 = _memo.results.pop()

                    if (_r1_1 != null && _r1_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i1, _index.element, _memo.input, (_r1_1.results + _r1_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i1
                    }

                    // ACT 0
                    val _r0 = _memo.results.peek()
                    if (_r0 != null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_r0.startIndex, _r0.nextIndex, _memo.input, _Thunk({ AST.Equality(it.l) }, _r0), true))
                    }

                    break
                }
            }
        }
    }


    open fun comparison(_memo: _KotlinParser_Memo, __index: Int, _args: _KotlinParser_Args?) {
        val _index = Ref.IntRef()
        _index.element = __index

        val _arg_index = Ref.IntRef()
        val _arg_input_index = Ref.IntRef()

        // AND 1
        var _start_i1 = _index.element

        // STAR 3
        var _start_i3 = _index.element
        val _inp3 = arrayListOf<Token?>()
        val _res3 = arrayListOf<AST.AstNode?>()

        // AND 4
        var _start_i4 = _index.element

        // AND 5
        var _start_i5 = _index.element

        // STAR 7
        var _start_i7 = _index.element
        val _inp7 = arrayListOf<Token?>()
        val _res7 = arrayListOf<AST.AstNode?>()

        var _label = -1
        while(true) {
            when(_label) {
                -1 -> {
                    // AND 1
                    _start_i1 = _index.element

                    // CALLORVAR genericCallLikeComparison
                    var _r2: _KotlinParser_Item? = null
                    _r2 = _MemoCall(_memo, "genericCallLikeComparison", _index.element, ::genericCallLikeComparison, null)
                    if (_r2 != null) _index.element = _r2.nextIndex

                    // AND shortcut 1
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 1
                        continue
                    }

                    // STAR 3
                    _start_i3 = _index.element
                    _label = 3
                }
                // STAR 3
                3 -> {
                    // AND 4
                    _start_i4 = _index.element

                    // AND 5
                    _start_i5 = _index.element

                    // CALLORVAR comparisonOperator
                    var _r6: _KotlinParser_Item? = null
                    _r6 = _MemoCall(_memo, "comparisonOperator", _index.element, ::comparisonOperator, null)
                    if (_r6 != null) _index.element = _r6.nextIndex

                    // AND shortcut 5
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 5
                        continue
                    }

                    // STAR 7
                    _start_i7 = _index.element
                    _label = 7
                }
                // STAR 7
                7 -> {
                    // CALLORVAR NL
                    var _r8: _KotlinParser_Item? = null
                    _r8 = _MemoCall(_memo, "NL", _index.element, ::NL, null)
                    if (_r8 != null) _index.element = _r8.nextIndex

                    // STAR 7
                    val _r7 = _memo.results.pop()
                    if (_r7 != null) {
                        _res7 += _r7.results
                        _label = 7
                        continue
                    } else {
                        _memo.results.push(_KotlinParser_Item(_start_i7, _index.element, _memo.input, _res7.filterNotNull(), true))
                    }

                    _label = 5
                }
                // AND 5
                5 -> {
                    val _r5_2 = _memo.results.pop()
                    val _r5_1 = _memo.results.pop()

                    if (_r5_1 != null && _r5_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i5, _index.element, _memo.input, (_r5_1.results + _r5_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i5
                    }

                    // AND shortcut 4
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 4
                        continue
                    }

                    // CALLORVAR genericCallLikeComparison
                    var _r9: _KotlinParser_Item? = null
                    _r9 = _MemoCall(_memo, "genericCallLikeComparison", _index.element, ::genericCallLikeComparison, null)
                    if (_r9 != null) _index.element = _r9.nextIndex

                    _label = 4
                }
                // AND 4
                4 -> {
                    val _r4_2 = _memo.results.pop()
                    val _r4_1 = _memo.results.pop()

                    if (_r4_1 != null && _r4_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i4, _index.element, _memo.input, (_r4_1.results + _r4_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i4
                    }

                    // STAR 3
                    val _r3 = _memo.results.pop()
                    if (_r3 != null) {
                        _res3 += _r3.results
                        _label = 3
                        continue
                    } else {
                        _memo.results.push(_KotlinParser_Item(_start_i3, _index.element, _memo.input, _res3.filterNotNull(), true))
                    }

                    _label = 1
                }
                // AND 1
                1 -> {
                    val _r1_2 = _memo.results.pop()
                    val _r1_1 = _memo.results.pop()

                    if (_r1_1 != null && _r1_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i1, _index.element, _memo.input, (_r1_1.results + _r1_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i1
                    }

                    // ACT 0
                    val _r0 = _memo.results.peek()
                    if (_r0 != null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_r0.startIndex, _r0.nextIndex, _memo.input, _Thunk({ AST.Comparison(it.l) }, _r0), true))
                    }

                    break
                }
            }
        }
    }


    open fun genericCallLikeComparison(_memo: _KotlinParser_Memo, __index: Int, _args: _KotlinParser_Args?) {
        val _index = Ref.IntRef()
        _index.element = __index

        val _arg_index = Ref.IntRef()
        val _arg_input_index = Ref.IntRef()

        var op: _KotlinParser_Item? = null
        var s: _KotlinParser_Item? = null

        // AND 1
        var _start_i1 = _index.element

        // STAR 5
        var _start_i5 = _index.element
        val _inp5 = arrayListOf<Token?>()
        val _res5 = arrayListOf<AST.AstNode?>()

        var _label = -1
        while(true) {
            when(_label) {
                -1 -> {
                    // AND 1
                    _start_i1 = _index.element

                    // CALLORVAR infixOperation
                    var _r3: _KotlinParser_Item? = null
                    _r3 = _MemoCall(_memo, "infixOperation", _index.element, ::infixOperation, null)
                    if (_r3 != null) _index.element = _r3.nextIndex

                    // BIND op
                    op = _memo.results.peek()

                    // AND shortcut 1
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 1
                        continue
                    }

                    // STAR 5
                    _start_i5 = _index.element
                    _label = 5
                }
                // STAR 5
                5 -> {
                    // CALLORVAR callSuffix
                    var _r6: _KotlinParser_Item? = null
                    _r6 = _MemoCall(_memo, "callSuffix", _index.element, ::callSuffix, null)
                    if (_r6 != null) _index.element = _r6.nextIndex

                    // STAR 5
                    val _r5 = _memo.results.pop()
                    if (_r5 != null) {
                        _res5 += _r5.results
                        _label = 5
                        continue
                    } else {
                        _memo.results.push(_KotlinParser_Item(_start_i5, _index.element, _memo.input, _res5.filterNotNull(), true))
                    }

                    // BIND s
                    s = _memo.results.peek()

                    _label = 1
                }
                // AND 1
                1 -> {
                    val _r1_2 = _memo.results.pop()
                    val _r1_1 = _memo.results.pop()

                    if (_r1_1 != null && _r1_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i1, _index.element, _memo.input, (_r1_1.results + _r1_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i1
                    }

                    // ACT 0
                    val _r0 = _memo.results.peek()
                    if (_r0 != null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_r0.startIndex, _r0.nextIndex, _memo.input, _Thunk({ AST.GenericCallLikeComparison(op.r, s.l) }, _r0), true))
                    }

                    break
                }
            }
        }
    }


    open fun infixOperation(_memo: _KotlinParser_Memo, __index: Int, _args: _KotlinParser_Args?) {
        val _index = Ref.IntRef()
        _index.element = __index

        val _arg_index = Ref.IntRef()
        val _arg_input_index = Ref.IntRef()

        var lhs: _KotlinParser_Item? = null
        var rest: _KotlinParser_Item? = null

        // AND 1
        var _start_i1 = _index.element

        // STAR 5
        var _start_i5 = _index.element
        val _inp5 = arrayListOf<Token?>()
        val _res5 = arrayListOf<AST.AstNode?>()

        // OR 6
        var _start_i6 = _index.element

        var _label = -1
        while(true) {
            when(_label) {
                -1 -> {
                    // AND 1
                    _start_i1 = _index.element

                    // CALLORVAR elvisExpression
                    var _r3: _KotlinParser_Item? = null
                    _r3 = _MemoCall(_memo, "elvisExpression", _index.element, ::elvisExpression, null)
                    if (_r3 != null) _index.element = _r3.nextIndex

                    // BIND lhs
                    lhs = _memo.results.peek()

                    // AND shortcut 1
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 1
                        continue
                    }

                    // STAR 5
                    _start_i5 = _index.element
                    _label = 5
                }
                // STAR 5
                5 -> {
                    // OR 6
                    _start_i6 = _index.element

                    // CALLORVAR inCheck
                    var _r7: _KotlinParser_Item? = null
                    _r7 = _MemoCall(_memo, "inCheck", _index.element, ::inCheck, null)
                    if (_r7 != null) _index.element = _r7.nextIndex

                    // OR shortcut 6
                    if (_memo.results.peek() == null) {
                        _memo.results.pop()
                        _index.element = _start_i6
                    } else {
                        _label = 6
                        continue
                    }

                    // CALLORVAR isCheck
                    var _r8: _KotlinParser_Item? = null
                    _r8 = _MemoCall(_memo, "isCheck", _index.element, ::isCheck, null)
                    if (_r8 != null) _index.element = _r8.nextIndex

                    _label = 6
                }
                // OR 6
                6 -> {
                    // STAR 5
                    val _r5 = _memo.results.pop()
                    if (_r5 != null) {
                        _res5 += _r5.results
                        _label = 5
                        continue
                    } else {
                        _memo.results.push(_KotlinParser_Item(_start_i5, _index.element, _memo.input, _res5.filterNotNull(), true))
                    }

                    // BIND rest
                    rest = _memo.results.peek()

                    _label = 1
                }
                // AND 1
                1 -> {
                    val _r1_2 = _memo.results.pop()
                    val _r1_1 = _memo.results.pop()

                    if (_r1_1 != null && _r1_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i1, _index.element, _memo.input, (_r1_1.results + _r1_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i1
                    }

                    // ACT 0
                    val _r0 = _memo.results.peek()
                    if (_r0 != null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_r0.startIndex, _r0.nextIndex, _memo.input, _Thunk({ AST.InfixOperation(lhs.r, rest.l) }, _r0), true))
                    }

                    break
                }
            }
        }
    }


    open fun inCheck(_memo: _KotlinParser_Memo, __index: Int, _args: _KotlinParser_Args?) {
        val _index = Ref.IntRef()
        _index.element = __index

        val _arg_index = Ref.IntRef()
        val _arg_input_index = Ref.IntRef()

        var op: _KotlinParser_Item? = null
        var expr: _KotlinParser_Item? = null

        // AND 1
        var _start_i1 = _index.element

        // AND 2
        var _start_i2 = _index.element

        // STAR 5
        var _start_i5 = _index.element
        val _inp5 = arrayListOf<Token?>()
        val _res5 = arrayListOf<AST.AstNode?>()

        var _label = -1
        while(true) {
            when(_label) {
                -1 -> {
                    // AND 1
                    _start_i1 = _index.element

                    // AND 2
                    _start_i2 = _index.element

                    // CALLORVAR inOperator
                    var _r4: _KotlinParser_Item? = null
                    _r4 = _MemoCall(_memo, "inOperator", _index.element, ::inOperator, null)
                    if (_r4 != null) _index.element = _r4.nextIndex

                    // BIND op
                    op = _memo.results.peek()

                    // AND shortcut 2
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 2
                        continue
                    }

                    // STAR 5
                    _start_i5 = _index.element
                    _label = 5
                }
                // STAR 5
                5 -> {
                    // CALLORVAR NL
                    var _r6: _KotlinParser_Item? = null
                    _r6 = _MemoCall(_memo, "NL", _index.element, ::NL, null)
                    if (_r6 != null) _index.element = _r6.nextIndex

                    // STAR 5
                    val _r5 = _memo.results.pop()
                    if (_r5 != null) {
                        _res5 += _r5.results
                        _label = 5
                        continue
                    } else {
                        _memo.results.push(_KotlinParser_Item(_start_i5, _index.element, _memo.input, _res5.filterNotNull(), true))
                    }

                    _label = 2
                }
                // AND 2
                2 -> {
                    val _r2_2 = _memo.results.pop()
                    val _r2_1 = _memo.results.pop()

                    if (_r2_1 != null && _r2_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i2, _index.element, _memo.input, (_r2_1.results + _r2_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i2
                    }

                    // AND shortcut 1
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 1
                        continue
                    }

                    // CALLORVAR elvisExpression
                    var _r8: _KotlinParser_Item? = null
                    _r8 = _MemoCall(_memo, "elvisExpression", _index.element, ::elvisExpression, null)
                    if (_r8 != null) _index.element = _r8.nextIndex

                    // BIND expr
                    expr = _memo.results.peek()

                    _label = 1
                }
                // AND 1
                1 -> {
                    val _r1_2 = _memo.results.pop()
                    val _r1_1 = _memo.results.pop()

                    if (_r1_1 != null && _r1_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i1, _index.element, _memo.input, (_r1_1.results + _r1_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i1
                    }

                    // ACT 0
                    val _r0 = _memo.results.peek()
                    if (_r0 != null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_r0.startIndex, _r0.nextIndex, _memo.input, _Thunk({ AST.InCheckSuffix(op.r, expr.r) }, _r0), true))
                    }

                    break
                }
            }
        }
    }


    open fun isCheck(_memo: _KotlinParser_Memo, __index: Int, _args: _KotlinParser_Args?) {
        val _index = Ref.IntRef()
        _index.element = __index

        val _arg_index = Ref.IntRef()
        val _arg_input_index = Ref.IntRef()

        var op: _KotlinParser_Item? = null
        var t: _KotlinParser_Item? = null

        // AND 1
        var _start_i1 = _index.element

        // AND 2
        var _start_i2 = _index.element

        // STAR 5
        var _start_i5 = _index.element
        val _inp5 = arrayListOf<Token?>()
        val _res5 = arrayListOf<AST.AstNode?>()

        var _label = -1
        while(true) {
            when(_label) {
                -1 -> {
                    // AND 1
                    _start_i1 = _index.element

                    // AND 2
                    _start_i2 = _index.element

                    // CALLORVAR isOperator
                    var _r4: _KotlinParser_Item? = null
                    _r4 = _MemoCall(_memo, "isOperator", _index.element, ::isOperator, null)
                    if (_r4 != null) _index.element = _r4.nextIndex

                    // BIND op
                    op = _memo.results.peek()

                    // AND shortcut 2
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 2
                        continue
                    }

                    // STAR 5
                    _start_i5 = _index.element
                    _label = 5
                }
                // STAR 5
                5 -> {
                    // CALLORVAR NL
                    var _r6: _KotlinParser_Item? = null
                    _r6 = _MemoCall(_memo, "NL", _index.element, ::NL, null)
                    if (_r6 != null) _index.element = _r6.nextIndex

                    // STAR 5
                    val _r5 = _memo.results.pop()
                    if (_r5 != null) {
                        _res5 += _r5.results
                        _label = 5
                        continue
                    } else {
                        _memo.results.push(_KotlinParser_Item(_start_i5, _index.element, _memo.input, _res5.filterNotNull(), true))
                    }

                    _label = 2
                }
                // AND 2
                2 -> {
                    val _r2_2 = _memo.results.pop()
                    val _r2_1 = _memo.results.pop()

                    if (_r2_1 != null && _r2_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i2, _index.element, _memo.input, (_r2_1.results + _r2_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i2
                    }

                    // AND shortcut 1
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 1
                        continue
                    }

                    // CALLORVAR type
                    var _r8: _KotlinParser_Item? = null
                    _r8 = _MemoCall(_memo, "type", _index.element, ::type, null)
                    if (_r8 != null) _index.element = _r8.nextIndex

                    // BIND t
                    t = _memo.results.peek()

                    _label = 1
                }
                // AND 1
                1 -> {
                    val _r1_2 = _memo.results.pop()
                    val _r1_1 = _memo.results.pop()

                    if (_r1_1 != null && _r1_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i1, _index.element, _memo.input, (_r1_1.results + _r1_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i1
                    }

                    // ACT 0
                    val _r0 = _memo.results.peek()
                    if (_r0 != null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_r0.startIndex, _r0.nextIndex, _memo.input, _Thunk({ AST.IsCheckSuffix(op.r, t.r) }, _r0), true))
                    }

                    break
                }
            }
        }
    }


    open fun elvisExpression(_memo: _KotlinParser_Memo, __index: Int, _args: _KotlinParser_Args?) {
        val _index = Ref.IntRef()
        _index.element = __index

        val _arg_index = Ref.IntRef()
        val _arg_input_index = Ref.IntRef()

        // AND 1
        var _start_i1 = _index.element

        // STAR 3
        var _start_i3 = _index.element
        val _inp3 = arrayListOf<Token?>()
        val _res3 = arrayListOf<AST.AstNode?>()

        // AND 4
        var _start_i4 = _index.element

        // AND 5
        var _start_i5 = _index.element

        // AND 6
        var _start_i6 = _index.element

        // STAR 7
        var _start_i7 = _index.element
        val _inp7 = arrayListOf<Token?>()
        val _res7 = arrayListOf<AST.AstNode?>()

        // STAR 10
        var _start_i10 = _index.element
        val _inp10 = arrayListOf<Token?>()
        val _res10 = arrayListOf<AST.AstNode?>()

        var _label = -1
        while(true) {
            when(_label) {
                -1 -> {
                    // AND 1
                    _start_i1 = _index.element

                    // CALLORVAR infixFunctionCall
                    var _r2: _KotlinParser_Item? = null
                    _r2 = _MemoCall(_memo, "infixFunctionCall", _index.element, ::infixFunctionCall, null)
                    if (_r2 != null) _index.element = _r2.nextIndex

                    // AND shortcut 1
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 1
                        continue
                    }

                    // STAR 3
                    _start_i3 = _index.element
                    _label = 3
                }
                // STAR 3
                3 -> {
                    // AND 4
                    _start_i4 = _index.element

                    // AND 5
                    _start_i5 = _index.element

                    // AND 6
                    _start_i6 = _index.element

                    // STAR 7
                    _start_i7 = _index.element
                    _label = 7
                }
                // STAR 7
                7 -> {
                    // CALLORVAR NL
                    var _r8: _KotlinParser_Item? = null
                    _r8 = _MemoCall(_memo, "NL", _index.element, ::NL, null)
                    if (_r8 != null) _index.element = _r8.nextIndex

                    // STAR 7
                    val _r7 = _memo.results.pop()
                    if (_r7 != null) {
                        _res7 += _r7.results
                        _label = 7
                        continue
                    } else {
                        _memo.results.push(_KotlinParser_Item(_start_i7, _index.element, _memo.input, _res7.filterNotNull(), true))
                    }

                    // AND shortcut 6
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 6
                        continue
                    }

                    // CALLORVAR ELVIS
                    var _r9: _KotlinParser_Item? = null
                    _r9 = _MemoCall(_memo, "ELVIS", _index.element, ::ELVIS, null)
                    if (_r9 != null) _index.element = _r9.nextIndex

                    _label = 6
                }
                // AND 6
                6 -> {
                    val _r6_2 = _memo.results.pop()
                    val _r6_1 = _memo.results.pop()

                    if (_r6_1 != null && _r6_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i6, _index.element, _memo.input, (_r6_1.results + _r6_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i6
                    }

                    // AND shortcut 5
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 5
                        continue
                    }

                    // STAR 10
                    _start_i10 = _index.element
                    _label = 10
                }
                // STAR 10
                10 -> {
                    // CALLORVAR NL
                    var _r11: _KotlinParser_Item? = null
                    _r11 = _MemoCall(_memo, "NL", _index.element, ::NL, null)
                    if (_r11 != null) _index.element = _r11.nextIndex

                    // STAR 10
                    val _r10 = _memo.results.pop()
                    if (_r10 != null) {
                        _res10 += _r10.results
                        _label = 10
                        continue
                    } else {
                        _memo.results.push(_KotlinParser_Item(_start_i10, _index.element, _memo.input, _res10.filterNotNull(), true))
                    }

                    _label = 5
                }
                // AND 5
                5 -> {
                    val _r5_2 = _memo.results.pop()
                    val _r5_1 = _memo.results.pop()

                    if (_r5_1 != null && _r5_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i5, _index.element, _memo.input, (_r5_1.results + _r5_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i5
                    }

                    // AND shortcut 4
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 4
                        continue
                    }

                    // CALLORVAR infixFunctionCall
                    var _r12: _KotlinParser_Item? = null
                    _r12 = _MemoCall(_memo, "infixFunctionCall", _index.element, ::infixFunctionCall, null)
                    if (_r12 != null) _index.element = _r12.nextIndex

                    _label = 4
                }
                // AND 4
                4 -> {
                    val _r4_2 = _memo.results.pop()
                    val _r4_1 = _memo.results.pop()

                    if (_r4_1 != null && _r4_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i4, _index.element, _memo.input, (_r4_1.results + _r4_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i4
                    }

                    // STAR 3
                    val _r3 = _memo.results.pop()
                    if (_r3 != null) {
                        _res3 += _r3.results
                        _label = 3
                        continue
                    } else {
                        _memo.results.push(_KotlinParser_Item(_start_i3, _index.element, _memo.input, _res3.filterNotNull(), true))
                    }

                    _label = 1
                }
                // AND 1
                1 -> {
                    val _r1_2 = _memo.results.pop()
                    val _r1_1 = _memo.results.pop()

                    if (_r1_1 != null && _r1_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i1, _index.element, _memo.input, (_r1_1.results + _r1_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i1
                    }

                    // ACT 0
                    val _r0 = _memo.results.peek()
                    if (_r0 != null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_r0.startIndex, _r0.nextIndex, _memo.input, _Thunk({ AST.ElvisExpression(it.l) }, _r0), true))
                    }

                    break
                }
            }
        }
    }


    open fun infixFunctionCall(_memo: _KotlinParser_Memo, __index: Int, _args: _KotlinParser_Args?) {
        val _index = Ref.IntRef()
        _index.element = __index

        val _arg_index = Ref.IntRef()
        val _arg_input_index = Ref.IntRef()

        // AND 1
        var _start_i1 = _index.element

        // STAR 3
        var _start_i3 = _index.element
        val _inp3 = arrayListOf<Token?>()
        val _res3 = arrayListOf<AST.AstNode?>()

        // AND 4
        var _start_i4 = _index.element

        // AND 5
        var _start_i5 = _index.element

        // STAR 7
        var _start_i7 = _index.element
        val _inp7 = arrayListOf<Token?>()
        val _res7 = arrayListOf<AST.AstNode?>()

        var _label = -1
        while(true) {
            when(_label) {
                -1 -> {
                    // AND 1
                    _start_i1 = _index.element

                    // CALLORVAR rangeExpression
                    var _r2: _KotlinParser_Item? = null
                    _r2 = _MemoCall(_memo, "rangeExpression", _index.element, ::rangeExpression, null)
                    if (_r2 != null) _index.element = _r2.nextIndex

                    // AND shortcut 1
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 1
                        continue
                    }

                    // STAR 3
                    _start_i3 = _index.element
                    _label = 3
                }
                // STAR 3
                3 -> {
                    // AND 4
                    _start_i4 = _index.element

                    // AND 5
                    _start_i5 = _index.element

                    // CALLORVAR simpleIdentifier
                    var _r6: _KotlinParser_Item? = null
                    _r6 = _MemoCall(_memo, "simpleIdentifier", _index.element, ::simpleIdentifier, null)
                    if (_r6 != null) _index.element = _r6.nextIndex

                    // AND shortcut 5
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 5
                        continue
                    }

                    // STAR 7
                    _start_i7 = _index.element
                    _label = 7
                }
                // STAR 7
                7 -> {
                    // CALLORVAR NL
                    var _r8: _KotlinParser_Item? = null
                    _r8 = _MemoCall(_memo, "NL", _index.element, ::NL, null)
                    if (_r8 != null) _index.element = _r8.nextIndex

                    // STAR 7
                    val _r7 = _memo.results.pop()
                    if (_r7 != null) {
                        _res7 += _r7.results
                        _label = 7
                        continue
                    } else {
                        _memo.results.push(_KotlinParser_Item(_start_i7, _index.element, _memo.input, _res7.filterNotNull(), true))
                    }

                    _label = 5
                }
                // AND 5
                5 -> {
                    val _r5_2 = _memo.results.pop()
                    val _r5_1 = _memo.results.pop()

                    if (_r5_1 != null && _r5_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i5, _index.element, _memo.input, (_r5_1.results + _r5_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i5
                    }

                    // AND shortcut 4
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 4
                        continue
                    }

                    // CALLORVAR rangeExpression
                    var _r9: _KotlinParser_Item? = null
                    _r9 = _MemoCall(_memo, "rangeExpression", _index.element, ::rangeExpression, null)
                    if (_r9 != null) _index.element = _r9.nextIndex

                    _label = 4
                }
                // AND 4
                4 -> {
                    val _r4_2 = _memo.results.pop()
                    val _r4_1 = _memo.results.pop()

                    if (_r4_1 != null && _r4_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i4, _index.element, _memo.input, (_r4_1.results + _r4_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i4
                    }

                    // STAR 3
                    val _r3 = _memo.results.pop()
                    if (_r3 != null) {
                        _res3 += _r3.results
                        _label = 3
                        continue
                    } else {
                        _memo.results.push(_KotlinParser_Item(_start_i3, _index.element, _memo.input, _res3.filterNotNull(), true))
                    }

                    _label = 1
                }
                // AND 1
                1 -> {
                    val _r1_2 = _memo.results.pop()
                    val _r1_1 = _memo.results.pop()

                    if (_r1_1 != null && _r1_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i1, _index.element, _memo.input, (_r1_1.results + _r1_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i1
                    }

                    // ACT 0
                    val _r0 = _memo.results.peek()
                    if (_r0 != null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_r0.startIndex, _r0.nextIndex, _memo.input, _Thunk({ AST.InfixFunctionCall(it.l) }, _r0), true))
                    }

                    break
                }
            }
        }
    }


    open fun rangeExpression(_memo: _KotlinParser_Memo, __index: Int, _args: _KotlinParser_Args?) {
        val _index = Ref.IntRef()
        _index.element = __index

        val _arg_index = Ref.IntRef()
        val _arg_input_index = Ref.IntRef()

        // AND 1
        var _start_i1 = _index.element

        // STAR 3
        var _start_i3 = _index.element
        val _inp3 = arrayListOf<Token?>()
        val _res3 = arrayListOf<AST.AstNode?>()

        // AND 4
        var _start_i4 = _index.element

        // AND 5
        var _start_i5 = _index.element

        // STAR 7
        var _start_i7 = _index.element
        val _inp7 = arrayListOf<Token?>()
        val _res7 = arrayListOf<AST.AstNode?>()

        var _label = -1
        while(true) {
            when(_label) {
                -1 -> {
                    // AND 1
                    _start_i1 = _index.element

                    // CALLORVAR additiveExpression
                    var _r2: _KotlinParser_Item? = null
                    _r2 = _MemoCall(_memo, "additiveExpression", _index.element, ::additiveExpression, null)
                    if (_r2 != null) _index.element = _r2.nextIndex

                    // AND shortcut 1
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 1
                        continue
                    }

                    // STAR 3
                    _start_i3 = _index.element
                    _label = 3
                }
                // STAR 3
                3 -> {
                    // AND 4
                    _start_i4 = _index.element

                    // AND 5
                    _start_i5 = _index.element

                    // CALLORVAR RANGE
                    var _r6: _KotlinParser_Item? = null
                    _r6 = _MemoCall(_memo, "RANGE", _index.element, ::RANGE, null)
                    if (_r6 != null) _index.element = _r6.nextIndex

                    // AND shortcut 5
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 5
                        continue
                    }

                    // STAR 7
                    _start_i7 = _index.element
                    _label = 7
                }
                // STAR 7
                7 -> {
                    // CALLORVAR NL
                    var _r8: _KotlinParser_Item? = null
                    _r8 = _MemoCall(_memo, "NL", _index.element, ::NL, null)
                    if (_r8 != null) _index.element = _r8.nextIndex

                    // STAR 7
                    val _r7 = _memo.results.pop()
                    if (_r7 != null) {
                        _res7 += _r7.results
                        _label = 7
                        continue
                    } else {
                        _memo.results.push(_KotlinParser_Item(_start_i7, _index.element, _memo.input, _res7.filterNotNull(), true))
                    }

                    _label = 5
                }
                // AND 5
                5 -> {
                    val _r5_2 = _memo.results.pop()
                    val _r5_1 = _memo.results.pop()

                    if (_r5_1 != null && _r5_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i5, _index.element, _memo.input, (_r5_1.results + _r5_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i5
                    }

                    // AND shortcut 4
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 4
                        continue
                    }

                    // CALLORVAR additiveExpression
                    var _r9: _KotlinParser_Item? = null
                    _r9 = _MemoCall(_memo, "additiveExpression", _index.element, ::additiveExpression, null)
                    if (_r9 != null) _index.element = _r9.nextIndex

                    _label = 4
                }
                // AND 4
                4 -> {
                    val _r4_2 = _memo.results.pop()
                    val _r4_1 = _memo.results.pop()

                    if (_r4_1 != null && _r4_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i4, _index.element, _memo.input, (_r4_1.results + _r4_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i4
                    }

                    // STAR 3
                    val _r3 = _memo.results.pop()
                    if (_r3 != null) {
                        _res3 += _r3.results
                        _label = 3
                        continue
                    } else {
                        _memo.results.push(_KotlinParser_Item(_start_i3, _index.element, _memo.input, _res3.filterNotNull(), true))
                    }

                    _label = 1
                }
                // AND 1
                1 -> {
                    val _r1_2 = _memo.results.pop()
                    val _r1_1 = _memo.results.pop()

                    if (_r1_1 != null && _r1_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i1, _index.element, _memo.input, (_r1_1.results + _r1_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i1
                    }

                    // ACT 0
                    val _r0 = _memo.results.peek()
                    if (_r0 != null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_r0.startIndex, _r0.nextIndex, _memo.input, _Thunk({ AST.RangeExpression(it.l) }, _r0), true))
                    }

                    break
                }
            }
        }
    }


    open fun additiveExpression(_memo: _KotlinParser_Memo, __index: Int, _args: _KotlinParser_Args?) {
        val _index = Ref.IntRef()
        _index.element = __index

        val _arg_index = Ref.IntRef()
        val _arg_input_index = Ref.IntRef()

        // AND 1
        var _start_i1 = _index.element

        // STAR 3
        var _start_i3 = _index.element
        val _inp3 = arrayListOf<Token?>()
        val _res3 = arrayListOf<AST.AstNode?>()

        // AND 4
        var _start_i4 = _index.element

        // AND 5
        var _start_i5 = _index.element

        // STAR 7
        var _start_i7 = _index.element
        val _inp7 = arrayListOf<Token?>()
        val _res7 = arrayListOf<AST.AstNode?>()

        var _label = -1
        while(true) {
            when(_label) {
                -1 -> {
                    // AND 1
                    _start_i1 = _index.element

                    // CALLORVAR multiplicativeExpression
                    var _r2: _KotlinParser_Item? = null
                    _r2 = _MemoCall(_memo, "multiplicativeExpression", _index.element, ::multiplicativeExpression, null)
                    if (_r2 != null) _index.element = _r2.nextIndex

                    // AND shortcut 1
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 1
                        continue
                    }

                    // STAR 3
                    _start_i3 = _index.element
                    _label = 3
                }
                // STAR 3
                3 -> {
                    // AND 4
                    _start_i4 = _index.element

                    // AND 5
                    _start_i5 = _index.element

                    // CALLORVAR additiveOperator
                    var _r6: _KotlinParser_Item? = null
                    _r6 = _MemoCall(_memo, "additiveOperator", _index.element, ::additiveOperator, null)
                    if (_r6 != null) _index.element = _r6.nextIndex

                    // AND shortcut 5
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 5
                        continue
                    }

                    // STAR 7
                    _start_i7 = _index.element
                    _label = 7
                }
                // STAR 7
                7 -> {
                    // CALLORVAR NL
                    var _r8: _KotlinParser_Item? = null
                    _r8 = _MemoCall(_memo, "NL", _index.element, ::NL, null)
                    if (_r8 != null) _index.element = _r8.nextIndex

                    // STAR 7
                    val _r7 = _memo.results.pop()
                    if (_r7 != null) {
                        _res7 += _r7.results
                        _label = 7
                        continue
                    } else {
                        _memo.results.push(_KotlinParser_Item(_start_i7, _index.element, _memo.input, _res7.filterNotNull(), true))
                    }

                    _label = 5
                }
                // AND 5
                5 -> {
                    val _r5_2 = _memo.results.pop()
                    val _r5_1 = _memo.results.pop()

                    if (_r5_1 != null && _r5_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i5, _index.element, _memo.input, (_r5_1.results + _r5_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i5
                    }

                    // AND shortcut 4
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 4
                        continue
                    }

                    // CALLORVAR multiplicativeExpression
                    var _r9: _KotlinParser_Item? = null
                    _r9 = _MemoCall(_memo, "multiplicativeExpression", _index.element, ::multiplicativeExpression, null)
                    if (_r9 != null) _index.element = _r9.nextIndex

                    _label = 4
                }
                // AND 4
                4 -> {
                    val _r4_2 = _memo.results.pop()
                    val _r4_1 = _memo.results.pop()

                    if (_r4_1 != null && _r4_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i4, _index.element, _memo.input, (_r4_1.results + _r4_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i4
                    }

                    // STAR 3
                    val _r3 = _memo.results.pop()
                    if (_r3 != null) {
                        _res3 += _r3.results
                        _label = 3
                        continue
                    } else {
                        _memo.results.push(_KotlinParser_Item(_start_i3, _index.element, _memo.input, _res3.filterNotNull(), true))
                    }

                    _label = 1
                }
                // AND 1
                1 -> {
                    val _r1_2 = _memo.results.pop()
                    val _r1_1 = _memo.results.pop()

                    if (_r1_1 != null && _r1_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i1, _index.element, _memo.input, (_r1_1.results + _r1_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i1
                    }

                    // ACT 0
                    val _r0 = _memo.results.peek()
                    if (_r0 != null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_r0.startIndex, _r0.nextIndex, _memo.input, _Thunk({ AST.Additive(it.l) }, _r0), true))
                    }

                    break
                }
            }
        }
    }


    open fun multiplicativeExpression(_memo: _KotlinParser_Memo, __index: Int, _args: _KotlinParser_Args?) {
        val _index = Ref.IntRef()
        _index.element = __index

        val _arg_index = Ref.IntRef()
        val _arg_input_index = Ref.IntRef()

        // AND 1
        var _start_i1 = _index.element

        // STAR 3
        var _start_i3 = _index.element
        val _inp3 = arrayListOf<Token?>()
        val _res3 = arrayListOf<AST.AstNode?>()

        // AND 4
        var _start_i4 = _index.element

        // AND 5
        var _start_i5 = _index.element

        // STAR 7
        var _start_i7 = _index.element
        val _inp7 = arrayListOf<Token?>()
        val _res7 = arrayListOf<AST.AstNode?>()

        var _label = -1
        while(true) {
            when(_label) {
                -1 -> {
                    // AND 1
                    _start_i1 = _index.element

                    // CALLORVAR asExpression
                    var _r2: _KotlinParser_Item? = null
                    _r2 = _MemoCall(_memo, "asExpression", _index.element, ::asExpression, null)
                    if (_r2 != null) _index.element = _r2.nextIndex

                    // AND shortcut 1
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 1
                        continue
                    }

                    // STAR 3
                    _start_i3 = _index.element
                    _label = 3
                }
                // STAR 3
                3 -> {
                    // AND 4
                    _start_i4 = _index.element

                    // AND 5
                    _start_i5 = _index.element

                    // CALLORVAR multiplicativeOperator
                    var _r6: _KotlinParser_Item? = null
                    _r6 = _MemoCall(_memo, "multiplicativeOperator", _index.element, ::multiplicativeOperator, null)
                    if (_r6 != null) _index.element = _r6.nextIndex

                    // AND shortcut 5
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 5
                        continue
                    }

                    // STAR 7
                    _start_i7 = _index.element
                    _label = 7
                }
                // STAR 7
                7 -> {
                    // CALLORVAR NL
                    var _r8: _KotlinParser_Item? = null
                    _r8 = _MemoCall(_memo, "NL", _index.element, ::NL, null)
                    if (_r8 != null) _index.element = _r8.nextIndex

                    // STAR 7
                    val _r7 = _memo.results.pop()
                    if (_r7 != null) {
                        _res7 += _r7.results
                        _label = 7
                        continue
                    } else {
                        _memo.results.push(_KotlinParser_Item(_start_i7, _index.element, _memo.input, _res7.filterNotNull(), true))
                    }

                    _label = 5
                }
                // AND 5
                5 -> {
                    val _r5_2 = _memo.results.pop()
                    val _r5_1 = _memo.results.pop()

                    if (_r5_1 != null && _r5_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i5, _index.element, _memo.input, (_r5_1.results + _r5_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i5
                    }

                    // AND shortcut 4
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 4
                        continue
                    }

                    // CALLORVAR asExpression
                    var _r9: _KotlinParser_Item? = null
                    _r9 = _MemoCall(_memo, "asExpression", _index.element, ::asExpression, null)
                    if (_r9 != null) _index.element = _r9.nextIndex

                    _label = 4
                }
                // AND 4
                4 -> {
                    val _r4_2 = _memo.results.pop()
                    val _r4_1 = _memo.results.pop()

                    if (_r4_1 != null && _r4_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i4, _index.element, _memo.input, (_r4_1.results + _r4_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i4
                    }

                    // STAR 3
                    val _r3 = _memo.results.pop()
                    if (_r3 != null) {
                        _res3 += _r3.results
                        _label = 3
                        continue
                    } else {
                        _memo.results.push(_KotlinParser_Item(_start_i3, _index.element, _memo.input, _res3.filterNotNull(), true))
                    }

                    _label = 1
                }
                // AND 1
                1 -> {
                    val _r1_2 = _memo.results.pop()
                    val _r1_1 = _memo.results.pop()

                    if (_r1_1 != null && _r1_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i1, _index.element, _memo.input, (_r1_1.results + _r1_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i1
                    }

                    // ACT 0
                    val _r0 = _memo.results.peek()
                    if (_r0 != null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_r0.startIndex, _r0.nextIndex, _memo.input, _Thunk({ AST.Multiplicative(it.l) }, _r0), true))
                    }

                    break
                }
            }
        }
    }


    open fun asExpression(_memo: _KotlinParser_Memo, __index: Int, _args: _KotlinParser_Args?) {
        val _index = Ref.IntRef()
        _index.element = __index

        val _arg_index = Ref.IntRef()
        val _arg_input_index = Ref.IntRef()

        // AND 1
        var _start_i1 = _index.element

        // STAR 3
        var _start_i3 = _index.element
        val _inp3 = arrayListOf<Token?>()
        val _res3 = arrayListOf<AST.AstNode?>()

        // AND 4
        var _start_i4 = _index.element

        // AND 5
        var _start_i5 = _index.element

        // AND 6
        var _start_i6 = _index.element

        // STAR 7
        var _start_i7 = _index.element
        val _inp7 = arrayListOf<Token?>()
        val _res7 = arrayListOf<AST.AstNode?>()

        // STAR 10
        var _start_i10 = _index.element
        val _inp10 = arrayListOf<Token?>()
        val _res10 = arrayListOf<AST.AstNode?>()

        var _label = -1
        while(true) {
            when(_label) {
                -1 -> {
                    // AND 1
                    _start_i1 = _index.element

                    // CALLORVAR prefixUnaryExpression
                    var _r2: _KotlinParser_Item? = null
                    _r2 = _MemoCall(_memo, "prefixUnaryExpression", _index.element, ::prefixUnaryExpression, null)
                    if (_r2 != null) _index.element = _r2.nextIndex

                    // AND shortcut 1
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 1
                        continue
                    }

                    // STAR 3
                    _start_i3 = _index.element
                    _label = 3
                }
                // STAR 3
                3 -> {
                    // AND 4
                    _start_i4 = _index.element

                    // AND 5
                    _start_i5 = _index.element

                    // AND 6
                    _start_i6 = _index.element

                    // STAR 7
                    _start_i7 = _index.element
                    _label = 7
                }
                // STAR 7
                7 -> {
                    // CALLORVAR NL
                    var _r8: _KotlinParser_Item? = null
                    _r8 = _MemoCall(_memo, "NL", _index.element, ::NL, null)
                    if (_r8 != null) _index.element = _r8.nextIndex

                    // STAR 7
                    val _r7 = _memo.results.pop()
                    if (_r7 != null) {
                        _res7 += _r7.results
                        _label = 7
                        continue
                    } else {
                        _memo.results.push(_KotlinParser_Item(_start_i7, _index.element, _memo.input, _res7.filterNotNull(), true))
                    }

                    // AND shortcut 6
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 6
                        continue
                    }

                    // CALLORVAR asOperator
                    var _r9: _KotlinParser_Item? = null
                    _r9 = _MemoCall(_memo, "asOperator", _index.element, ::asOperator, null)
                    if (_r9 != null) _index.element = _r9.nextIndex

                    _label = 6
                }
                // AND 6
                6 -> {
                    val _r6_2 = _memo.results.pop()
                    val _r6_1 = _memo.results.pop()

                    if (_r6_1 != null && _r6_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i6, _index.element, _memo.input, (_r6_1.results + _r6_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i6
                    }

                    // AND shortcut 5
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 5
                        continue
                    }

                    // STAR 10
                    _start_i10 = _index.element
                    _label = 10
                }
                // STAR 10
                10 -> {
                    // CALLORVAR NL
                    var _r11: _KotlinParser_Item? = null
                    _r11 = _MemoCall(_memo, "NL", _index.element, ::NL, null)
                    if (_r11 != null) _index.element = _r11.nextIndex

                    // STAR 10
                    val _r10 = _memo.results.pop()
                    if (_r10 != null) {
                        _res10 += _r10.results
                        _label = 10
                        continue
                    } else {
                        _memo.results.push(_KotlinParser_Item(_start_i10, _index.element, _memo.input, _res10.filterNotNull(), true))
                    }

                    _label = 5
                }
                // AND 5
                5 -> {
                    val _r5_2 = _memo.results.pop()
                    val _r5_1 = _memo.results.pop()

                    if (_r5_1 != null && _r5_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i5, _index.element, _memo.input, (_r5_1.results + _r5_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i5
                    }

                    // AND shortcut 4
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 4
                        continue
                    }

                    // CALLORVAR type
                    var _r12: _KotlinParser_Item? = null
                    _r12 = _MemoCall(_memo, "type", _index.element, ::type, null)
                    if (_r12 != null) _index.element = _r12.nextIndex

                    _label = 4
                }
                // AND 4
                4 -> {
                    val _r4_2 = _memo.results.pop()
                    val _r4_1 = _memo.results.pop()

                    if (_r4_1 != null && _r4_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i4, _index.element, _memo.input, (_r4_1.results + _r4_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i4
                    }

                    // STAR 3
                    val _r3 = _memo.results.pop()
                    if (_r3 != null) {
                        _res3 += _r3.results
                        _label = 3
                        continue
                    } else {
                        _memo.results.push(_KotlinParser_Item(_start_i3, _index.element, _memo.input, _res3.filterNotNull(), true))
                    }

                    _label = 1
                }
                // AND 1
                1 -> {
                    val _r1_2 = _memo.results.pop()
                    val _r1_1 = _memo.results.pop()

                    if (_r1_1 != null && _r1_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i1, _index.element, _memo.input, (_r1_1.results + _r1_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i1
                    }

                    // ACT 0
                    val _r0 = _memo.results.peek()
                    if (_r0 != null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_r0.startIndex, _r0.nextIndex, _memo.input, _Thunk({ AST.AsExpression(it.l) }, _r0), true))
                    }

                    break
                }
            }
        }
    }


    open fun prefixUnaryExpression(_memo: _KotlinParser_Memo, __index: Int, _args: _KotlinParser_Args?) {
        val _index = Ref.IntRef()
        _index.element = __index

        val _arg_index = Ref.IntRef()
        val _arg_input_index = Ref.IntRef()

        var p: _KotlinParser_Item? = null
        var expr: _KotlinParser_Item? = null

        // AND 1
        var _start_i1 = _index.element

        // STAR 3
        var _start_i3 = _index.element
        val _inp3 = arrayListOf<Token?>()
        val _res3 = arrayListOf<AST.AstNode?>()

        var _label = -1
        while(true) {
            when(_label) {
                -1 -> {
                    // AND 1
                    _start_i1 = _index.element

                    // STAR 3
                    _start_i3 = _index.element
                    _label = 3
                }
                // STAR 3
                3 -> {
                    // CALLORVAR unaryPrefix
                    var _r4: _KotlinParser_Item? = null
                    _r4 = _MemoCall(_memo, "unaryPrefix", _index.element, ::unaryPrefix, null)
                    if (_r4 != null) _index.element = _r4.nextIndex

                    // STAR 3
                    val _r3 = _memo.results.pop()
                    if (_r3 != null) {
                        _res3 += _r3.results
                        _label = 3
                        continue
                    } else {
                        _memo.results.push(_KotlinParser_Item(_start_i3, _index.element, _memo.input, _res3.filterNotNull(), true))
                    }

                    // BIND p
                    p = _memo.results.peek()

                    // AND shortcut 1
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 1
                        continue
                    }

                    // CALLORVAR postfixUnaryExpression
                    var _r6: _KotlinParser_Item? = null
                    _r6 = _MemoCall(_memo, "postfixUnaryExpression", _index.element, ::postfixUnaryExpression, null)
                    if (_r6 != null) _index.element = _r6.nextIndex

                    // BIND expr
                    expr = _memo.results.peek()

                    _label = 1
                }
                // AND 1
                1 -> {
                    val _r1_2 = _memo.results.pop()
                    val _r1_1 = _memo.results.pop()

                    if (_r1_1 != null && _r1_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i1, _index.element, _memo.input, (_r1_1.results + _r1_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i1
                    }

                    // ACT 0
                    val _r0 = _memo.results.peek()
                    if (_r0 != null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_r0.startIndex, _r0.nextIndex, _memo.input, _Thunk({ AST.PrefixUnaryExpression(p.l, expr.r) }, _r0), true))
                    }

                    break
                }
            }
        }
    }


    open fun unaryPrefix(_memo: _KotlinParser_Memo, __index: Int, _args: _KotlinParser_Args?) {
        val _index = Ref.IntRef()
        _index.element = __index

        val _arg_index = Ref.IntRef()
        val _arg_input_index = Ref.IntRef()

        // OR 0
        var _start_i0 = _index.element

        // OR 1
        var _start_i1 = _index.element

        // AND 4
        var _start_i4 = _index.element

        // STAR 6
        var _start_i6 = _index.element
        val _inp6 = arrayListOf<Token?>()
        val _res6 = arrayListOf<AST.AstNode?>()

        var _label = -1
        while(true) {
            when(_label) {
                -1 -> {
                    // OR 0
                    _start_i0 = _index.element

                    // OR 1
                    _start_i1 = _index.element

                    // CALLORVAR annotation
                    var _r2: _KotlinParser_Item? = null
                    _r2 = _MemoCall(_memo, "annotation", _index.element, ::annotation, null)
                    if (_r2 != null) _index.element = _r2.nextIndex

                    // OR shortcut 1
                    if (_memo.results.peek() == null) {
                        _memo.results.pop()
                        _index.element = _start_i1
                    } else {
                        _label = 1
                        continue
                    }

                    // CALLORVAR label
                    var _r3: _KotlinParser_Item? = null
                    _r3 = _MemoCall(_memo, "label", _index.element, ::label, null)
                    if (_r3 != null) _index.element = _r3.nextIndex

                    _label = 1
                }
                // OR 1
                1 -> {
                    // OR shortcut 0
                    if (_memo.results.peek() == null) {
                        _memo.results.pop()
                        _index.element = _start_i0
                    } else {
                        _label = 0
                        continue
                    }

                    // AND 4
                    _start_i4 = _index.element

                    // CALLORVAR prefixUnaryOperator
                    var _r5: _KotlinParser_Item? = null
                    _r5 = _MemoCall(_memo, "prefixUnaryOperator", _index.element, ::prefixUnaryOperator, null)
                    if (_r5 != null) _index.element = _r5.nextIndex

                    // AND shortcut 4
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 4
                        continue
                    }

                    // STAR 6
                    _start_i6 = _index.element
                    _label = 6
                }
                // STAR 6
                6 -> {
                    // CALLORVAR NL
                    var _r7: _KotlinParser_Item? = null
                    _r7 = _MemoCall(_memo, "NL", _index.element, ::NL, null)
                    if (_r7 != null) _index.element = _r7.nextIndex

                    // STAR 6
                    val _r6 = _memo.results.pop()
                    if (_r6 != null) {
                        _res6 += _r6.results
                        _label = 6
                        continue
                    } else {
                        _memo.results.push(_KotlinParser_Item(_start_i6, _index.element, _memo.input, _res6.filterNotNull(), true))
                    }

                    _label = 4
                }
                // AND 4
                4 -> {
                    val _r4_2 = _memo.results.pop()
                    val _r4_1 = _memo.results.pop()

                    if (_r4_1 != null && _r4_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i4, _index.element, _memo.input, (_r4_1.results + _r4_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i4
                    }

                    _label = 0
                }
                // OR 0
                0 -> {
                    break
                }
            }
        }
    }


    open fun postfixUnaryExpression(_memo: _KotlinParser_Memo, __index: Int, _args: _KotlinParser_Args?) {
        val _index = Ref.IntRef()
        _index.element = __index

        val _arg_index = Ref.IntRef()
        val _arg_input_index = Ref.IntRef()

        var expr: _KotlinParser_Item? = null
        var s: _KotlinParser_Item? = null

        // AND 1
        var _start_i1 = _index.element

        // STAR 5
        var _start_i5 = _index.element
        val _inp5 = arrayListOf<Token?>()
        val _res5 = arrayListOf<AST.AstNode?>()

        var _label = -1
        while(true) {
            when(_label) {
                -1 -> {
                    // AND 1
                    _start_i1 = _index.element

                    // CALLORVAR primaryExpression
                    var _r3: _KotlinParser_Item? = null
                    _r3 = _MemoCall(_memo, "primaryExpression", _index.element, ::primaryExpression, null)
                    if (_r3 != null) _index.element = _r3.nextIndex

                    // BIND expr
                    expr = _memo.results.peek()

                    // AND shortcut 1
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 1
                        continue
                    }

                    // STAR 5
                    _start_i5 = _index.element
                    _label = 5
                }
                // STAR 5
                5 -> {
                    // CALLORVAR postfixUnarySuffix
                    var _r6: _KotlinParser_Item? = null
                    _r6 = _MemoCall(_memo, "postfixUnarySuffix", _index.element, ::postfixUnarySuffix, null)
                    if (_r6 != null) _index.element = _r6.nextIndex

                    // STAR 5
                    val _r5 = _memo.results.pop()
                    if (_r5 != null) {
                        _res5 += _r5.results
                        _label = 5
                        continue
                    } else {
                        _memo.results.push(_KotlinParser_Item(_start_i5, _index.element, _memo.input, _res5.filterNotNull(), true))
                    }

                    // BIND s
                    s = _memo.results.peek()

                    _label = 1
                }
                // AND 1
                1 -> {
                    val _r1_2 = _memo.results.pop()
                    val _r1_1 = _memo.results.pop()

                    if (_r1_1 != null && _r1_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i1, _index.element, _memo.input, (_r1_1.results + _r1_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i1
                    }

                    // ACT 0
                    val _r0 = _memo.results.peek()
                    if (_r0 != null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_r0.startIndex, _r0.nextIndex, _memo.input, _Thunk({ AST.PostfixUnaryExpression(expr.r, s.l) }, _r0), true))
                    }

                    break
                }
            }
        }
    }


    open fun postfixUnarySuffix(_memo: _KotlinParser_Memo, __index: Int, _args: _KotlinParser_Args?) {
        val _index = Ref.IntRef()
        _index.element = __index

        val _arg_index = Ref.IntRef()
        val _arg_input_index = Ref.IntRef()

        // OR 0
        var _start_i0 = _index.element

        // OR 1
        var _start_i1 = _index.element

        var _label = -1
        while(true) {
            when(_label) {
                -1 -> {
                    // OR 0
                    _start_i0 = _index.element

                    // OR 1
                    _start_i1 = _index.element

                    // CALLORVAR postfixUnaryOperator
                    var _r2: _KotlinParser_Item? = null
                    _r2 = _MemoCall(_memo, "postfixUnaryOperator", _index.element, ::postfixUnaryOperator, null)
                    if (_r2 != null) _index.element = _r2.nextIndex

                    // OR shortcut 1
                    if (_memo.results.peek() == null) {
                        _memo.results.pop()
                        _index.element = _start_i1
                    } else {
                        _label = 1
                        continue
                    }

                    // CALLORVAR callSuffix
                    var _r3: _KotlinParser_Item? = null
                    _r3 = _MemoCall(_memo, "callSuffix", _index.element, ::callSuffix, null)
                    if (_r3 != null) _index.element = _r3.nextIndex

                    _label = 1
                }
                // OR 1
                1 -> {
                    // OR shortcut 0
                    if (_memo.results.peek() == null) {
                        _memo.results.pop()
                        _index.element = _start_i0
                    } else {
                        _label = 0
                        continue
                    }

                    // CALLORVAR assignableSuffix
                    var _r4: _KotlinParser_Item? = null
                    _r4 = _MemoCall(_memo, "assignableSuffix", _index.element, ::assignableSuffix, null)
                    if (_r4 != null) _index.element = _r4.nextIndex

                    _label = 0
                }
                // OR 0
                0 -> {
                    break
                }
            }
        }
    }


    open fun typeArgumentsPostfix(_memo: _KotlinParser_Memo, __index: Int, _args: _KotlinParser_Args?) {
        val _index = Ref.IntRef()
        _index.element = __index

        val _arg_index = Ref.IntRef()
        val _arg_input_index = Ref.IntRef()

        var _label = -1
        while(true) {
            when(_label) {
                -1 -> {
                    // CALLORVAR typeArguments
                    var _r1: _KotlinParser_Item? = null
                    _r1 = _MemoCall(_memo, "typeArguments", _index.element, ::typeArguments, null)
                    if (_r1 != null) _index.element = _r1.nextIndex

                    // ACT 0
                    val _r0 = _memo.results.peek()
                    if (_r0 != null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_r0.startIndex, _r0.nextIndex, _memo.input, _Thunk({ AST.TypeArgumentsPostfix(it.l) }, _r0), true))
                    }

                    break
                }
            }
        }
    }


    open fun directlyAssignableExpression(_memo: _KotlinParser_Memo, __index: Int, _args: _KotlinParser_Args?) {
        val _index = Ref.IntRef()
        _index.element = __index

        val _arg_index = Ref.IntRef()
        val _arg_input_index = Ref.IntRef()

        var expr: _KotlinParser_Item? = null
        var s: _KotlinParser_Item? = null

        // OR 0
        var _start_i0 = _index.element

        // OR 1
        var _start_i1 = _index.element

        // AND 3
        var _start_i3 = _index.element

        var _label = -1
        while(true) {
            when(_label) {
                -1 -> {
                    // OR 0
                    _start_i0 = _index.element

                    // OR 1
                    _start_i1 = _index.element

                    // AND 3
                    _start_i3 = _index.element

                    // CALLORVAR postfixUnaryExpression
                    var _r5: _KotlinParser_Item? = null
                    _r5 = _MemoCall(_memo, "postfixUnaryExpression", _index.element, ::postfixUnaryExpression, null)
                    if (_r5 != null) _index.element = _r5.nextIndex

                    // BIND expr
                    expr = _memo.results.peek()

                    // AND shortcut 3
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 3
                        continue
                    }

                    // CALLORVAR assignableSuffix
                    var _r7: _KotlinParser_Item? = null
                    _r7 = _MemoCall(_memo, "assignableSuffix", _index.element, ::assignableSuffix, null)
                    if (_r7 != null) _index.element = _r7.nextIndex

                    // BIND s
                    s = _memo.results.peek()

                    _label = 3
                }
                // AND 3
                3 -> {
                    val _r3_2 = _memo.results.pop()
                    val _r3_1 = _memo.results.pop()

                    if (_r3_1 != null && _r3_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i3, _index.element, _memo.input, (_r3_1.results + _r3_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i3
                    }

                    // ACT 2
                    val _r2 = _memo.results.peek()
                    if (_r2 != null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_r2.startIndex, _r2.nextIndex, _memo.input, _Thunk({ AST.DirectlyAssignableExpression(expr.r, s.r) }, _r2), true))
                    }

                    // OR shortcut 1
                    if (_memo.results.peek() == null) {
                        _memo.results.pop()
                        _index.element = _start_i1
                    } else {
                        _label = 1
                        continue
                    }

                    // CALLORVAR simpleIdentifier
                    var _r9: _KotlinParser_Item? = null
                    _r9 = _MemoCall(_memo, "simpleIdentifier", _index.element, ::simpleIdentifier, null)
                    if (_r9 != null) _index.element = _r9.nextIndex

                    // ACT 8
                    val _r8 = _memo.results.peek()
                    if (_r8 != null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_r8.startIndex, _r8.nextIndex, _memo.input, _Thunk({ AST.NameExpression(it.s) }, _r8), true))
                    }

                    _label = 1
                }
                // OR 1
                1 -> {
                    // OR shortcut 0
                    if (_memo.results.peek() == null) {
                        _memo.results.pop()
                        _index.element = _start_i0
                    } else {
                        _label = 0
                        continue
                    }

                    // CALLORVAR parenthesizedDirectlyAssignableExpression
                    var _r10: _KotlinParser_Item? = null
                    _r10 = _MemoCall(_memo, "parenthesizedDirectlyAssignableExpression", _index.element, ::parenthesizedDirectlyAssignableExpression, null)
                    if (_r10 != null) _index.element = _r10.nextIndex

                    _label = 0
                }
                // OR 0
                0 -> {
                    break
                }
            }
        }
    }


    open fun parenthesizedDirectlyAssignableExpression(_memo: _KotlinParser_Memo, __index: Int, _args: _KotlinParser_Args?) {
        val _index = Ref.IntRef()
        _index.element = __index

        val _arg_index = Ref.IntRef()
        val _arg_input_index = Ref.IntRef()

        var expr: _KotlinParser_Item? = null

        // AND 1
        var _start_i1 = _index.element

        // AND 2
        var _start_i2 = _index.element

        // AND 3
        var _start_i3 = _index.element

        // AND 4
        var _start_i4 = _index.element

        // STAR 6
        var _start_i6 = _index.element
        val _inp6 = arrayListOf<Token?>()
        val _res6 = arrayListOf<AST.AstNode?>()

        // STAR 10
        var _start_i10 = _index.element
        val _inp10 = arrayListOf<Token?>()
        val _res10 = arrayListOf<AST.AstNode?>()

        var _label = -1
        while(true) {
            when(_label) {
                -1 -> {
                    // AND 1
                    _start_i1 = _index.element

                    // AND 2
                    _start_i2 = _index.element

                    // AND 3
                    _start_i3 = _index.element

                    // AND 4
                    _start_i4 = _index.element

                    // CALLORVAR LPAREN
                    var _r5: _KotlinParser_Item? = null
                    _r5 = _MemoCall(_memo, "LPAREN", _index.element, ::LPAREN, null)
                    if (_r5 != null) _index.element = _r5.nextIndex

                    // AND shortcut 4
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 4
                        continue
                    }

                    // STAR 6
                    _start_i6 = _index.element
                    _label = 6
                }
                // STAR 6
                6 -> {
                    // CALLORVAR NL
                    var _r7: _KotlinParser_Item? = null
                    _r7 = _MemoCall(_memo, "NL", _index.element, ::NL, null)
                    if (_r7 != null) _index.element = _r7.nextIndex

                    // STAR 6
                    val _r6 = _memo.results.pop()
                    if (_r6 != null) {
                        _res6 += _r6.results
                        _label = 6
                        continue
                    } else {
                        _memo.results.push(_KotlinParser_Item(_start_i6, _index.element, _memo.input, _res6.filterNotNull(), true))
                    }

                    _label = 4
                }
                // AND 4
                4 -> {
                    val _r4_2 = _memo.results.pop()
                    val _r4_1 = _memo.results.pop()

                    if (_r4_1 != null && _r4_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i4, _index.element, _memo.input, (_r4_1.results + _r4_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i4
                    }

                    // AND shortcut 3
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 3
                        continue
                    }

                    // CALLORVAR directlyAssignableExpression
                    var _r9: _KotlinParser_Item? = null
                    _r9 = _MemoCall(_memo, "directlyAssignableExpression", _index.element, ::directlyAssignableExpression, null)
                    if (_r9 != null) _index.element = _r9.nextIndex

                    // BIND expr
                    expr = _memo.results.peek()

                    _label = 3
                }
                // AND 3
                3 -> {
                    val _r3_2 = _memo.results.pop()
                    val _r3_1 = _memo.results.pop()

                    if (_r3_1 != null && _r3_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i3, _index.element, _memo.input, (_r3_1.results + _r3_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i3
                    }

                    // AND shortcut 2
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 2
                        continue
                    }

                    // STAR 10
                    _start_i10 = _index.element
                    _label = 10
                }
                // STAR 10
                10 -> {
                    // CALLORVAR NL
                    var _r11: _KotlinParser_Item? = null
                    _r11 = _MemoCall(_memo, "NL", _index.element, ::NL, null)
                    if (_r11 != null) _index.element = _r11.nextIndex

                    // STAR 10
                    val _r10 = _memo.results.pop()
                    if (_r10 != null) {
                        _res10 += _r10.results
                        _label = 10
                        continue
                    } else {
                        _memo.results.push(_KotlinParser_Item(_start_i10, _index.element, _memo.input, _res10.filterNotNull(), true))
                    }

                    _label = 2
                }
                // AND 2
                2 -> {
                    val _r2_2 = _memo.results.pop()
                    val _r2_1 = _memo.results.pop()

                    if (_r2_1 != null && _r2_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i2, _index.element, _memo.input, (_r2_1.results + _r2_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i2
                    }

                    // AND shortcut 1
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 1
                        continue
                    }

                    // CALLORVAR RPAREN
                    var _r12: _KotlinParser_Item? = null
                    _r12 = _MemoCall(_memo, "RPAREN", _index.element, ::RPAREN, null)
                    if (_r12 != null) _index.element = _r12.nextIndex

                    _label = 1
                }
                // AND 1
                1 -> {
                    val _r1_2 = _memo.results.pop()
                    val _r1_1 = _memo.results.pop()

                    if (_r1_1 != null && _r1_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i1, _index.element, _memo.input, (_r1_1.results + _r1_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i1
                    }

                    // ACT 0
                    val _r0 = _memo.results.peek()
                    if (_r0 != null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_r0.startIndex, _r0.nextIndex, _memo.input, _Thunk({ expr.r }, _r0), true))
                    }

                    break
                }
            }
        }
    }


    open fun assignableExpression(_memo: _KotlinParser_Memo, __index: Int, _args: _KotlinParser_Args?) {
        val _index = Ref.IntRef()
        _index.element = __index

        val _arg_index = Ref.IntRef()
        val _arg_input_index = Ref.IntRef()

        // OR 0
        var _start_i0 = _index.element

        var _label = -1
        while(true) {
            when(_label) {
                -1 -> {
                    // OR 0
                    _start_i0 = _index.element

                    // CALLORVAR prefixUnaryExpression
                    var _r1: _KotlinParser_Item? = null
                    _r1 = _MemoCall(_memo, "prefixUnaryExpression", _index.element, ::prefixUnaryExpression, null)
                    if (_r1 != null) _index.element = _r1.nextIndex

                    // OR shortcut 0
                    if (_memo.results.peek() == null) {
                        _memo.results.pop()
                        _index.element = _start_i0
                    } else {
                        _label = 0
                        continue
                    }

                    // CALLORVAR parenthesizedAssignableExpression
                    var _r2: _KotlinParser_Item? = null
                    _r2 = _MemoCall(_memo, "parenthesizedAssignableExpression", _index.element, ::parenthesizedAssignableExpression, null)
                    if (_r2 != null) _index.element = _r2.nextIndex

                    _label = 0
                }
                // OR 0
                0 -> {
                    break
                }
            }
        }
    }


    open fun parenthesizedAssignableExpression(_memo: _KotlinParser_Memo, __index: Int, _args: _KotlinParser_Args?) {
        val _index = Ref.IntRef()
        _index.element = __index

        val _arg_index = Ref.IntRef()
        val _arg_input_index = Ref.IntRef()

        var expr: _KotlinParser_Item? = null

        // AND 1
        var _start_i1 = _index.element

        // AND 2
        var _start_i2 = _index.element

        // AND 3
        var _start_i3 = _index.element

        // AND 4
        var _start_i4 = _index.element

        // STAR 6
        var _start_i6 = _index.element
        val _inp6 = arrayListOf<Token?>()
        val _res6 = arrayListOf<AST.AstNode?>()

        // STAR 10
        var _start_i10 = _index.element
        val _inp10 = arrayListOf<Token?>()
        val _res10 = arrayListOf<AST.AstNode?>()

        var _label = -1
        while(true) {
            when(_label) {
                -1 -> {
                    // AND 1
                    _start_i1 = _index.element

                    // AND 2
                    _start_i2 = _index.element

                    // AND 3
                    _start_i3 = _index.element

                    // AND 4
                    _start_i4 = _index.element

                    // CALLORVAR LPAREN
                    var _r5: _KotlinParser_Item? = null
                    _r5 = _MemoCall(_memo, "LPAREN", _index.element, ::LPAREN, null)
                    if (_r5 != null) _index.element = _r5.nextIndex

                    // AND shortcut 4
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 4
                        continue
                    }

                    // STAR 6
                    _start_i6 = _index.element
                    _label = 6
                }
                // STAR 6
                6 -> {
                    // CALLORVAR NL
                    var _r7: _KotlinParser_Item? = null
                    _r7 = _MemoCall(_memo, "NL", _index.element, ::NL, null)
                    if (_r7 != null) _index.element = _r7.nextIndex

                    // STAR 6
                    val _r6 = _memo.results.pop()
                    if (_r6 != null) {
                        _res6 += _r6.results
                        _label = 6
                        continue
                    } else {
                        _memo.results.push(_KotlinParser_Item(_start_i6, _index.element, _memo.input, _res6.filterNotNull(), true))
                    }

                    _label = 4
                }
                // AND 4
                4 -> {
                    val _r4_2 = _memo.results.pop()
                    val _r4_1 = _memo.results.pop()

                    if (_r4_1 != null && _r4_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i4, _index.element, _memo.input, (_r4_1.results + _r4_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i4
                    }

                    // AND shortcut 3
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 3
                        continue
                    }

                    // CALLORVAR assignableExpression
                    var _r9: _KotlinParser_Item? = null
                    _r9 = _MemoCall(_memo, "assignableExpression", _index.element, ::assignableExpression, null)
                    if (_r9 != null) _index.element = _r9.nextIndex

                    // BIND expr
                    expr = _memo.results.peek()

                    _label = 3
                }
                // AND 3
                3 -> {
                    val _r3_2 = _memo.results.pop()
                    val _r3_1 = _memo.results.pop()

                    if (_r3_1 != null && _r3_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i3, _index.element, _memo.input, (_r3_1.results + _r3_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i3
                    }

                    // AND shortcut 2
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 2
                        continue
                    }

                    // STAR 10
                    _start_i10 = _index.element
                    _label = 10
                }
                // STAR 10
                10 -> {
                    // CALLORVAR NL
                    var _r11: _KotlinParser_Item? = null
                    _r11 = _MemoCall(_memo, "NL", _index.element, ::NL, null)
                    if (_r11 != null) _index.element = _r11.nextIndex

                    // STAR 10
                    val _r10 = _memo.results.pop()
                    if (_r10 != null) {
                        _res10 += _r10.results
                        _label = 10
                        continue
                    } else {
                        _memo.results.push(_KotlinParser_Item(_start_i10, _index.element, _memo.input, _res10.filterNotNull(), true))
                    }

                    _label = 2
                }
                // AND 2
                2 -> {
                    val _r2_2 = _memo.results.pop()
                    val _r2_1 = _memo.results.pop()

                    if (_r2_1 != null && _r2_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i2, _index.element, _memo.input, (_r2_1.results + _r2_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i2
                    }

                    // AND shortcut 1
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 1
                        continue
                    }

                    // CALLORVAR RPAREN
                    var _r12: _KotlinParser_Item? = null
                    _r12 = _MemoCall(_memo, "RPAREN", _index.element, ::RPAREN, null)
                    if (_r12 != null) _index.element = _r12.nextIndex

                    _label = 1
                }
                // AND 1
                1 -> {
                    val _r1_2 = _memo.results.pop()
                    val _r1_1 = _memo.results.pop()

                    if (_r1_1 != null && _r1_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i1, _index.element, _memo.input, (_r1_1.results + _r1_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i1
                    }

                    // ACT 0
                    val _r0 = _memo.results.peek()
                    if (_r0 != null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_r0.startIndex, _r0.nextIndex, _memo.input, _Thunk({ expr.r }, _r0), true))
                    }

                    break
                }
            }
        }
    }


    open fun assignableSuffix(_memo: _KotlinParser_Memo, __index: Int, _args: _KotlinParser_Args?) {
        val _index = Ref.IntRef()
        _index.element = __index

        val _arg_index = Ref.IntRef()
        val _arg_input_index = Ref.IntRef()

        // OR 0
        var _start_i0 = _index.element

        // OR 1
        var _start_i1 = _index.element

        var _label = -1
        while(true) {
            when(_label) {
                -1 -> {
                    // OR 0
                    _start_i0 = _index.element

                    // OR 1
                    _start_i1 = _index.element

                    // CALLORVAR typeArgumentsPostfix
                    var _r2: _KotlinParser_Item? = null
                    _r2 = _MemoCall(_memo, "typeArgumentsPostfix", _index.element, ::typeArgumentsPostfix, null)
                    if (_r2 != null) _index.element = _r2.nextIndex

                    // OR shortcut 1
                    if (_memo.results.peek() == null) {
                        _memo.results.pop()
                        _index.element = _start_i1
                    } else {
                        _label = 1
                        continue
                    }

                    // CALLORVAR indexingSuffix
                    var _r3: _KotlinParser_Item? = null
                    _r3 = _MemoCall(_memo, "indexingSuffix", _index.element, ::indexingSuffix, null)
                    if (_r3 != null) _index.element = _r3.nextIndex

                    _label = 1
                }
                // OR 1
                1 -> {
                    // OR shortcut 0
                    if (_memo.results.peek() == null) {
                        _memo.results.pop()
                        _index.element = _start_i0
                    } else {
                        _label = 0
                        continue
                    }

                    // CALLORVAR navigationSuffix
                    var _r4: _KotlinParser_Item? = null
                    _r4 = _MemoCall(_memo, "navigationSuffix", _index.element, ::navigationSuffix, null)
                    if (_r4 != null) _index.element = _r4.nextIndex

                    _label = 0
                }
                // OR 0
                0 -> {
                    break
                }
            }
        }
    }


    open fun indexingSuffix(_memo: _KotlinParser_Memo, __index: Int, _args: _KotlinParser_Args?) {
        val _index = Ref.IntRef()
        _index.element = __index

        val _arg_index = Ref.IntRef()
        val _arg_input_index = Ref.IntRef()

        // AND 1
        var _start_i1 = _index.element

        // AND 2
        var _start_i2 = _index.element

        // AND 3
        var _start_i3 = _index.element

        // AND 4
        var _start_i4 = _index.element

        // AND 5
        var _start_i5 = _index.element

        // AND 6
        var _start_i6 = _index.element

        // STAR 8
        var _start_i8 = _index.element
        val _inp8 = arrayListOf<Token?>()
        val _res8 = arrayListOf<AST.AstNode?>()

        // STAR 11
        var _start_i11 = _index.element
        val _inp11 = arrayListOf<Token?>()
        val _res11 = arrayListOf<AST.AstNode?>()

        // AND 12
        var _start_i12 = _index.element

        // AND 13
        var _start_i13 = _index.element

        // AND 14
        var _start_i14 = _index.element

        // STAR 15
        var _start_i15 = _index.element
        val _inp15 = arrayListOf<Token?>()
        val _res15 = arrayListOf<AST.AstNode?>()

        // STAR 18
        var _start_i18 = _index.element
        val _inp18 = arrayListOf<Token?>()
        val _res18 = arrayListOf<AST.AstNode?>()

        // AND 22
        var _start_i22 = _index.element

        // STAR 23
        var _start_i23 = _index.element
        val _inp23 = arrayListOf<Token?>()
        val _res23 = arrayListOf<AST.AstNode?>()

        // STAR 26
        var _start_i26 = _index.element
        val _inp26 = arrayListOf<Token?>()
        val _res26 = arrayListOf<AST.AstNode?>()

        var _label = -1
        while(true) {
            when(_label) {
                -1 -> {
                    // AND 1
                    _start_i1 = _index.element

                    // AND 2
                    _start_i2 = _index.element

                    // AND 3
                    _start_i3 = _index.element

                    // AND 4
                    _start_i4 = _index.element

                    // AND 5
                    _start_i5 = _index.element

                    // AND 6
                    _start_i6 = _index.element

                    // CALLORVAR LSQUARE
                    var _r7: _KotlinParser_Item? = null
                    _r7 = _MemoCall(_memo, "LSQUARE", _index.element, ::LSQUARE, null)
                    if (_r7 != null) _index.element = _r7.nextIndex

                    // AND shortcut 6
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 6
                        continue
                    }

                    // STAR 8
                    _start_i8 = _index.element
                    _label = 8
                }
                // STAR 8
                8 -> {
                    // CALLORVAR NL
                    var _r9: _KotlinParser_Item? = null
                    _r9 = _MemoCall(_memo, "NL", _index.element, ::NL, null)
                    if (_r9 != null) _index.element = _r9.nextIndex

                    // STAR 8
                    val _r8 = _memo.results.pop()
                    if (_r8 != null) {
                        _res8 += _r8.results
                        _label = 8
                        continue
                    } else {
                        _memo.results.push(_KotlinParser_Item(_start_i8, _index.element, _memo.input, _res8.filterNotNull(), true))
                    }

                    _label = 6
                }
                // AND 6
                6 -> {
                    val _r6_2 = _memo.results.pop()
                    val _r6_1 = _memo.results.pop()

                    if (_r6_1 != null && _r6_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i6, _index.element, _memo.input, (_r6_1.results + _r6_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i6
                    }

                    // AND shortcut 5
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 5
                        continue
                    }

                    // CALLORVAR expression
                    var _r10: _KotlinParser_Item? = null
                    _r10 = _MemoCall(_memo, "expression", _index.element, ::expression, null)
                    if (_r10 != null) _index.element = _r10.nextIndex

                    _label = 5
                }
                // AND 5
                5 -> {
                    val _r5_2 = _memo.results.pop()
                    val _r5_1 = _memo.results.pop()

                    if (_r5_1 != null && _r5_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i5, _index.element, _memo.input, (_r5_1.results + _r5_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i5
                    }

                    // AND shortcut 4
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 4
                        continue
                    }

                    // STAR 11
                    _start_i11 = _index.element
                    _label = 11
                }
                // STAR 11
                11 -> {
                    // AND 12
                    _start_i12 = _index.element

                    // AND 13
                    _start_i13 = _index.element

                    // AND 14
                    _start_i14 = _index.element

                    // STAR 15
                    _start_i15 = _index.element
                    _label = 15
                }
                // STAR 15
                15 -> {
                    // CALLORVAR NL
                    var _r16: _KotlinParser_Item? = null
                    _r16 = _MemoCall(_memo, "NL", _index.element, ::NL, null)
                    if (_r16 != null) _index.element = _r16.nextIndex

                    // STAR 15
                    val _r15 = _memo.results.pop()
                    if (_r15 != null) {
                        _res15 += _r15.results
                        _label = 15
                        continue
                    } else {
                        _memo.results.push(_KotlinParser_Item(_start_i15, _index.element, _memo.input, _res15.filterNotNull(), true))
                    }

                    // AND shortcut 14
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 14
                        continue
                    }

                    // CALLORVAR COMMA
                    var _r17: _KotlinParser_Item? = null
                    _r17 = _MemoCall(_memo, "COMMA", _index.element, ::COMMA, null)
                    if (_r17 != null) _index.element = _r17.nextIndex

                    _label = 14
                }
                // AND 14
                14 -> {
                    val _r14_2 = _memo.results.pop()
                    val _r14_1 = _memo.results.pop()

                    if (_r14_1 != null && _r14_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i14, _index.element, _memo.input, (_r14_1.results + _r14_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i14
                    }

                    // AND shortcut 13
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 13
                        continue
                    }

                    // STAR 18
                    _start_i18 = _index.element
                    _label = 18
                }
                // STAR 18
                18 -> {
                    // CALLORVAR NL
                    var _r19: _KotlinParser_Item? = null
                    _r19 = _MemoCall(_memo, "NL", _index.element, ::NL, null)
                    if (_r19 != null) _index.element = _r19.nextIndex

                    // STAR 18
                    val _r18 = _memo.results.pop()
                    if (_r18 != null) {
                        _res18 += _r18.results
                        _label = 18
                        continue
                    } else {
                        _memo.results.push(_KotlinParser_Item(_start_i18, _index.element, _memo.input, _res18.filterNotNull(), true))
                    }

                    _label = 13
                }
                // AND 13
                13 -> {
                    val _r13_2 = _memo.results.pop()
                    val _r13_1 = _memo.results.pop()

                    if (_r13_1 != null && _r13_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i13, _index.element, _memo.input, (_r13_1.results + _r13_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i13
                    }

                    // AND shortcut 12
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 12
                        continue
                    }

                    // CALLORVAR expression
                    var _r20: _KotlinParser_Item? = null
                    _r20 = _MemoCall(_memo, "expression", _index.element, ::expression, null)
                    if (_r20 != null) _index.element = _r20.nextIndex

                    _label = 12
                }
                // AND 12
                12 -> {
                    val _r12_2 = _memo.results.pop()
                    val _r12_1 = _memo.results.pop()

                    if (_r12_1 != null && _r12_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i12, _index.element, _memo.input, (_r12_1.results + _r12_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i12
                    }

                    // STAR 11
                    val _r11 = _memo.results.pop()
                    if (_r11 != null) {
                        _res11 += _r11.results
                        _label = 11
                        continue
                    } else {
                        _memo.results.push(_KotlinParser_Item(_start_i11, _index.element, _memo.input, _res11.filterNotNull(), true))
                    }

                    _label = 4
                }
                // AND 4
                4 -> {
                    val _r4_2 = _memo.results.pop()
                    val _r4_1 = _memo.results.pop()

                    if (_r4_1 != null && _r4_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i4, _index.element, _memo.input, (_r4_1.results + _r4_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i4
                    }

                    // AND shortcut 3
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 3
                        continue
                    }

                    // AND 22
                    _start_i22 = _index.element

                    // STAR 23
                    _start_i23 = _index.element
                    _label = 23
                }
                // STAR 23
                23 -> {
                    // CALLORVAR NL
                    var _r24: _KotlinParser_Item? = null
                    _r24 = _MemoCall(_memo, "NL", _index.element, ::NL, null)
                    if (_r24 != null) _index.element = _r24.nextIndex

                    // STAR 23
                    val _r23 = _memo.results.pop()
                    if (_r23 != null) {
                        _res23 += _r23.results
                        _label = 23
                        continue
                    } else {
                        _memo.results.push(_KotlinParser_Item(_start_i23, _index.element, _memo.input, _res23.filterNotNull(), true))
                    }

                    // AND shortcut 22
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 22
                        continue
                    }

                    // CALLORVAR COMMA
                    var _r25: _KotlinParser_Item? = null
                    _r25 = _MemoCall(_memo, "COMMA", _index.element, ::COMMA, null)
                    if (_r25 != null) _index.element = _r25.nextIndex

                    _label = 22
                }
                // AND 22
                22 -> {
                    val _r22_2 = _memo.results.pop()
                    val _r22_1 = _memo.results.pop()

                    if (_r22_1 != null && _r22_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i22, _index.element, _memo.input, (_r22_1.results + _r22_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i22
                    }

                    // QUES 21
                    if (_memo.results.peek() == null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_index.element, _memo.input))
                    }
                    _label = 3
                }
                // AND 3
                3 -> {
                    val _r3_2 = _memo.results.pop()
                    val _r3_1 = _memo.results.pop()

                    if (_r3_1 != null && _r3_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i3, _index.element, _memo.input, (_r3_1.results + _r3_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i3
                    }

                    // AND shortcut 2
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 2
                        continue
                    }

                    // STAR 26
                    _start_i26 = _index.element
                    _label = 26
                }
                // STAR 26
                26 -> {
                    // CALLORVAR NL
                    var _r27: _KotlinParser_Item? = null
                    _r27 = _MemoCall(_memo, "NL", _index.element, ::NL, null)
                    if (_r27 != null) _index.element = _r27.nextIndex

                    // STAR 26
                    val _r26 = _memo.results.pop()
                    if (_r26 != null) {
                        _res26 += _r26.results
                        _label = 26
                        continue
                    } else {
                        _memo.results.push(_KotlinParser_Item(_start_i26, _index.element, _memo.input, _res26.filterNotNull(), true))
                    }

                    _label = 2
                }
                // AND 2
                2 -> {
                    val _r2_2 = _memo.results.pop()
                    val _r2_1 = _memo.results.pop()

                    if (_r2_1 != null && _r2_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i2, _index.element, _memo.input, (_r2_1.results + _r2_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i2
                    }

                    // AND shortcut 1
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 1
                        continue
                    }

                    // CALLORVAR RSQUARE
                    var _r28: _KotlinParser_Item? = null
                    _r28 = _MemoCall(_memo, "RSQUARE", _index.element, ::RSQUARE, null)
                    if (_r28 != null) _index.element = _r28.nextIndex

                    _label = 1
                }
                // AND 1
                1 -> {
                    val _r1_2 = _memo.results.pop()
                    val _r1_1 = _memo.results.pop()

                    if (_r1_1 != null && _r1_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i1, _index.element, _memo.input, (_r1_1.results + _r1_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i1
                    }

                    // ACT 0
                    val _r0 = _memo.results.peek()
                    if (_r0 != null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_r0.startIndex, _r0.nextIndex, _memo.input, _Thunk({ AST.IndexingSuffix(it.l) }, _r0), true))
                    }

                    break
                }
            }
        }
    }


    open fun navigationSuffix(_memo: _KotlinParser_Memo, __index: Int, _args: _KotlinParser_Args?) {
        val _index = Ref.IntRef()
        _index.element = __index

        val _arg_index = Ref.IntRef()
        val _arg_input_index = Ref.IntRef()

        var op: _KotlinParser_Item? = null
        var name: _KotlinParser_Item? = null
        var expr: _KotlinParser_Item? = null

        // OR 0
        var _start_i0 = _index.element

        // OR 1
        var _start_i1 = _index.element

        // AND 3
        var _start_i3 = _index.element

        // AND 4
        var _start_i4 = _index.element

        // STAR 7
        var _start_i7 = _index.element
        val _inp7 = arrayListOf<Token?>()
        val _res7 = arrayListOf<AST.AstNode?>()

        // AND 12
        var _start_i12 = _index.element

        // AND 13
        var _start_i13 = _index.element

        // STAR 16
        var _start_i16 = _index.element
        val _inp16 = arrayListOf<Token?>()
        val _res16 = arrayListOf<AST.AstNode?>()

        // AND 21
        var _start_i21 = _index.element

        // AND 22
        var _start_i22 = _index.element

        // STAR 25
        var _start_i25 = _index.element
        val _inp25 = arrayListOf<Token?>()
        val _res25 = arrayListOf<AST.AstNode?>()

        var _label = -1
        while(true) {
            when(_label) {
                -1 -> {
                    // OR 0
                    _start_i0 = _index.element

                    // OR 1
                    _start_i1 = _index.element

                    // AND 3
                    _start_i3 = _index.element

                    // AND 4
                    _start_i4 = _index.element

                    // CALLORVAR memberAccessOperator
                    var _r6: _KotlinParser_Item? = null
                    _r6 = _MemoCall(_memo, "memberAccessOperator", _index.element, ::memberAccessOperator, null)
                    if (_r6 != null) _index.element = _r6.nextIndex

                    // BIND op
                    op = _memo.results.peek()

                    // AND shortcut 4
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 4
                        continue
                    }

                    // STAR 7
                    _start_i7 = _index.element
                    _label = 7
                }
                // STAR 7
                7 -> {
                    // CALLORVAR NL
                    var _r8: _KotlinParser_Item? = null
                    _r8 = _MemoCall(_memo, "NL", _index.element, ::NL, null)
                    if (_r8 != null) _index.element = _r8.nextIndex

                    // STAR 7
                    val _r7 = _memo.results.pop()
                    if (_r7 != null) {
                        _res7 += _r7.results
                        _label = 7
                        continue
                    } else {
                        _memo.results.push(_KotlinParser_Item(_start_i7, _index.element, _memo.input, _res7.filterNotNull(), true))
                    }

                    _label = 4
                }
                // AND 4
                4 -> {
                    val _r4_2 = _memo.results.pop()
                    val _r4_1 = _memo.results.pop()

                    if (_r4_1 != null && _r4_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i4, _index.element, _memo.input, (_r4_1.results + _r4_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i4
                    }

                    // AND shortcut 3
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 3
                        continue
                    }

                    // CALLORVAR simpleIdentifier
                    var _r10: _KotlinParser_Item? = null
                    _r10 = _MemoCall(_memo, "simpleIdentifier", _index.element, ::simpleIdentifier, null)
                    if (_r10 != null) _index.element = _r10.nextIndex

                    // BIND name
                    name = _memo.results.peek()

                    _label = 3
                }
                // AND 3
                3 -> {
                    val _r3_2 = _memo.results.pop()
                    val _r3_1 = _memo.results.pop()

                    if (_r3_1 != null && _r3_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i3, _index.element, _memo.input, (_r3_1.results + _r3_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i3
                    }

                    // ACT 2
                    val _r2 = _memo.results.peek()
                    if (_r2 != null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_r2.startIndex, _r2.nextIndex, _memo.input, _Thunk({ AST.IdentifierNavigationSuffix(op.r, name.s) }, _r2), true))
                    }

                    // OR shortcut 1
                    if (_memo.results.peek() == null) {
                        _memo.results.pop()
                        _index.element = _start_i1
                    } else {
                        _label = 1
                        continue
                    }

                    // AND 12
                    _start_i12 = _index.element

                    // AND 13
                    _start_i13 = _index.element

                    // CALLORVAR memberAccessOperator
                    var _r15: _KotlinParser_Item? = null
                    _r15 = _MemoCall(_memo, "memberAccessOperator", _index.element, ::memberAccessOperator, null)
                    if (_r15 != null) _index.element = _r15.nextIndex

                    // BIND op
                    op = _memo.results.peek()

                    // AND shortcut 13
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 13
                        continue
                    }

                    // STAR 16
                    _start_i16 = _index.element
                    _label = 16
                }
                // STAR 16
                16 -> {
                    // CALLORVAR NL
                    var _r17: _KotlinParser_Item? = null
                    _r17 = _MemoCall(_memo, "NL", _index.element, ::NL, null)
                    if (_r17 != null) _index.element = _r17.nextIndex

                    // STAR 16
                    val _r16 = _memo.results.pop()
                    if (_r16 != null) {
                        _res16 += _r16.results
                        _label = 16
                        continue
                    } else {
                        _memo.results.push(_KotlinParser_Item(_start_i16, _index.element, _memo.input, _res16.filterNotNull(), true))
                    }

                    _label = 13
                }
                // AND 13
                13 -> {
                    val _r13_2 = _memo.results.pop()
                    val _r13_1 = _memo.results.pop()

                    if (_r13_1 != null && _r13_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i13, _index.element, _memo.input, (_r13_1.results + _r13_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i13
                    }

                    // AND shortcut 12
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 12
                        continue
                    }

                    // CALLORVAR parenthesizedExpression
                    var _r19: _KotlinParser_Item? = null
                    _r19 = _MemoCall(_memo, "parenthesizedExpression", _index.element, ::parenthesizedExpression, null)
                    if (_r19 != null) _index.element = _r19.nextIndex

                    // BIND expr
                    expr = _memo.results.peek()

                    _label = 12
                }
                // AND 12
                12 -> {
                    val _r12_2 = _memo.results.pop()
                    val _r12_1 = _memo.results.pop()

                    if (_r12_1 != null && _r12_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i12, _index.element, _memo.input, (_r12_1.results + _r12_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i12
                    }

                    // ACT 11
                    val _r11 = _memo.results.peek()
                    if (_r11 != null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_r11.startIndex, _r11.nextIndex, _memo.input, _Thunk({ AST.ExpressionNavigationSuffix(op.r, expr.r) }, _r11), true))
                    }

                    _label = 1
                }
                // OR 1
                1 -> {
                    // OR shortcut 0
                    if (_memo.results.peek() == null) {
                        _memo.results.pop()
                        _index.element = _start_i0
                    } else {
                        _label = 0
                        continue
                    }

                    // AND 21
                    _start_i21 = _index.element

                    // AND 22
                    _start_i22 = _index.element

                    // CALLORVAR memberAccessOperator
                    var _r24: _KotlinParser_Item? = null
                    _r24 = _MemoCall(_memo, "memberAccessOperator", _index.element, ::memberAccessOperator, null)
                    if (_r24 != null) _index.element = _r24.nextIndex

                    // BIND op
                    op = _memo.results.peek()

                    // AND shortcut 22
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 22
                        continue
                    }

                    // STAR 25
                    _start_i25 = _index.element
                    _label = 25
                }
                // STAR 25
                25 -> {
                    // CALLORVAR NL
                    var _r26: _KotlinParser_Item? = null
                    _r26 = _MemoCall(_memo, "NL", _index.element, ::NL, null)
                    if (_r26 != null) _index.element = _r26.nextIndex

                    // STAR 25
                    val _r25 = _memo.results.pop()
                    if (_r25 != null) {
                        _res25 += _r25.results
                        _label = 25
                        continue
                    } else {
                        _memo.results.push(_KotlinParser_Item(_start_i25, _index.element, _memo.input, _res25.filterNotNull(), true))
                    }

                    _label = 22
                }
                // AND 22
                22 -> {
                    val _r22_2 = _memo.results.pop()
                    val _r22_1 = _memo.results.pop()

                    if (_r22_1 != null && _r22_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i22, _index.element, _memo.input, (_r22_1.results + _r22_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i22
                    }

                    // AND shortcut 21
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 21
                        continue
                    }

                    // CALLORVAR CLASS
                    var _r27: _KotlinParser_Item? = null
                    _r27 = _MemoCall(_memo, "CLASS", _index.element, ::CLASS, null)
                    if (_r27 != null) _index.element = _r27.nextIndex

                    _label = 21
                }
                // AND 21
                21 -> {
                    val _r21_2 = _memo.results.pop()
                    val _r21_1 = _memo.results.pop()

                    if (_r21_1 != null && _r21_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i21, _index.element, _memo.input, (_r21_1.results + _r21_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i21
                    }

                    // ACT 20
                    val _r20 = _memo.results.peek()
                    if (_r20 != null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_r20.startIndex, _r20.nextIndex, _memo.input, _Thunk({ AST.ClassNavigationSuffix(op.r) }, _r20), true))
                    }

                    _label = 0
                }
                // OR 0
                0 -> {
                    break
                }
            }
        }
    }


    open fun callSuffix(_memo: _KotlinParser_Memo, __index: Int, _args: _KotlinParser_Args?) {
        val _index = Ref.IntRef()
        _index.element = __index

        val _arg_index = Ref.IntRef()
        val _arg_input_index = Ref.IntRef()

        var tas: _KotlinParser_Item? = null
        var args: _KotlinParser_Item? = null
        var l: _KotlinParser_Item? = null

        // OR 0
        var _start_i0 = _index.element

        // AND 2
        var _start_i2 = _index.element

        // AND 3
        var _start_i3 = _index.element

        // AND 13
        var _start_i13 = _index.element

        var _label = -1
        while(true) {
            when(_label) {
                -1 -> {
                    // OR 0
                    _start_i0 = _index.element

                    // AND 2
                    _start_i2 = _index.element

                    // AND 3
                    _start_i3 = _index.element

                    // CALLORVAR typeArguments
                    var _r6: _KotlinParser_Item? = null
                    _r6 = _MemoCall(_memo, "typeArguments", _index.element, ::typeArguments, null)
                    if (_r6 != null) _index.element = _r6.nextIndex

                    // QUES 5
                    if (_memo.results.peek() == null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_index.element, _memo.input))
                    }
                    // BIND tas
                    tas = _memo.results.peek()

                    // AND shortcut 3
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 3
                        continue
                    }

                    // CALLORVAR valueArguments
                    var _r9: _KotlinParser_Item? = null
                    _r9 = _MemoCall(_memo, "valueArguments", _index.element, ::valueArguments, null)
                    if (_r9 != null) _index.element = _r9.nextIndex

                    // QUES 8
                    if (_memo.results.peek() == null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_index.element, _memo.input))
                    }
                    // BIND args
                    args = _memo.results.peek()

                    _label = 3
                }
                // AND 3
                3 -> {
                    val _r3_2 = _memo.results.pop()
                    val _r3_1 = _memo.results.pop()

                    if (_r3_1 != null && _r3_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i3, _index.element, _memo.input, (_r3_1.results + _r3_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i3
                    }

                    // AND shortcut 2
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 2
                        continue
                    }

                    // CALLORVAR annotatedLambda
                    var _r11: _KotlinParser_Item? = null
                    _r11 = _MemoCall(_memo, "annotatedLambda", _index.element, ::annotatedLambda, null)
                    if (_r11 != null) _index.element = _r11.nextIndex

                    // BIND l
                    l = _memo.results.peek()

                    _label = 2
                }
                // AND 2
                2 -> {
                    val _r2_2 = _memo.results.pop()
                    val _r2_1 = _memo.results.pop()

                    if (_r2_1 != null && _r2_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i2, _index.element, _memo.input, (_r2_1.results + _r2_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i2
                    }

                    // ACT 1
                    val _r1 = _memo.results.peek()
                    if (_r1 != null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_r1.startIndex, _r1.nextIndex, _memo.input, _Thunk({ AST.CallSuffix(tas.l, args.l, l.r) }, _r1), true))
                    }

                    // OR shortcut 0
                    if (_memo.results.peek() == null) {
                        _memo.results.pop()
                        _index.element = _start_i0
                    } else {
                        _label = 0
                        continue
                    }

                    // AND 13
                    _start_i13 = _index.element

                    // CALLORVAR typeArguments
                    var _r16: _KotlinParser_Item? = null
                    _r16 = _MemoCall(_memo, "typeArguments", _index.element, ::typeArguments, null)
                    if (_r16 != null) _index.element = _r16.nextIndex

                    // QUES 15
                    if (_memo.results.peek() == null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_index.element, _memo.input))
                    }
                    // BIND tas
                    tas = _memo.results.peek()

                    // AND shortcut 13
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 13
                        continue
                    }

                    // CALLORVAR valueArguments
                    var _r18: _KotlinParser_Item? = null
                    _r18 = _MemoCall(_memo, "valueArguments", _index.element, ::valueArguments, null)
                    if (_r18 != null) _index.element = _r18.nextIndex

                    // BIND args
                    args = _memo.results.peek()

                    _label = 13
                }
                // AND 13
                13 -> {
                    val _r13_2 = _memo.results.pop()
                    val _r13_1 = _memo.results.pop()

                    if (_r13_1 != null && _r13_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i13, _index.element, _memo.input, (_r13_1.results + _r13_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i13
                    }

                    // ACT 12
                    val _r12 = _memo.results.peek()
                    if (_r12 != null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_r12.startIndex, _r12.nextIndex, _memo.input, _Thunk({ AST.CallSuffix(tas.l, args.l, null) }, _r12), true))
                    }

                    _label = 0
                }
                // OR 0
                0 -> {
                    break
                }
            }
        }
    }


    open fun annotatedLambda(_memo: _KotlinParser_Memo, __index: Int, _args: _KotlinParser_Args?) {
        val _index = Ref.IntRef()
        _index.element = __index

        val _arg_index = Ref.IntRef()
        val _arg_input_index = Ref.IntRef()

        var anns: _KotlinParser_Item? = null
        var l: _KotlinParser_Item? = null
        var ll: _KotlinParser_Item? = null

        // AND 1
        var _start_i1 = _index.element

        // AND 2
        var _start_i2 = _index.element

        // AND 3
        var _start_i3 = _index.element

        // STAR 5
        var _start_i5 = _index.element
        val _inp5 = arrayListOf<Token?>()
        val _res5 = arrayListOf<AST.AstNode?>()

        // STAR 10
        var _start_i10 = _index.element
        val _inp10 = arrayListOf<Token?>()
        val _res10 = arrayListOf<AST.AstNode?>()

        var _label = -1
        while(true) {
            when(_label) {
                -1 -> {
                    // AND 1
                    _start_i1 = _index.element

                    // AND 2
                    _start_i2 = _index.element

                    // AND 3
                    _start_i3 = _index.element

                    // STAR 5
                    _start_i5 = _index.element
                    _label = 5
                }
                // STAR 5
                5 -> {
                    // CALLORVAR annotation
                    var _r6: _KotlinParser_Item? = null
                    _r6 = _MemoCall(_memo, "annotation", _index.element, ::annotation, null)
                    if (_r6 != null) _index.element = _r6.nextIndex

                    // STAR 5
                    val _r5 = _memo.results.pop()
                    if (_r5 != null) {
                        _res5 += _r5.results
                        _label = 5
                        continue
                    } else {
                        _memo.results.push(_KotlinParser_Item(_start_i5, _index.element, _memo.input, _res5.filterNotNull(), true))
                    }

                    // BIND anns
                    anns = _memo.results.peek()

                    // AND shortcut 3
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 3
                        continue
                    }

                    // CALLORVAR label
                    var _r9: _KotlinParser_Item? = null
                    _r9 = _MemoCall(_memo, "label", _index.element, ::label, null)
                    if (_r9 != null) _index.element = _r9.nextIndex

                    // QUES 8
                    if (_memo.results.peek() == null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_index.element, _memo.input))
                    }
                    // BIND l
                    l = _memo.results.peek()

                    _label = 3
                }
                // AND 3
                3 -> {
                    val _r3_2 = _memo.results.pop()
                    val _r3_1 = _memo.results.pop()

                    if (_r3_1 != null && _r3_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i3, _index.element, _memo.input, (_r3_1.results + _r3_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i3
                    }

                    // AND shortcut 2
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 2
                        continue
                    }

                    // STAR 10
                    _start_i10 = _index.element
                    _label = 10
                }
                // STAR 10
                10 -> {
                    // CALLORVAR NL
                    var _r11: _KotlinParser_Item? = null
                    _r11 = _MemoCall(_memo, "NL", _index.element, ::NL, null)
                    if (_r11 != null) _index.element = _r11.nextIndex

                    // STAR 10
                    val _r10 = _memo.results.pop()
                    if (_r10 != null) {
                        _res10 += _r10.results
                        _label = 10
                        continue
                    } else {
                        _memo.results.push(_KotlinParser_Item(_start_i10, _index.element, _memo.input, _res10.filterNotNull(), true))
                    }

                    _label = 2
                }
                // AND 2
                2 -> {
                    val _r2_2 = _memo.results.pop()
                    val _r2_1 = _memo.results.pop()

                    if (_r2_1 != null && _r2_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i2, _index.element, _memo.input, (_r2_1.results + _r2_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i2
                    }

                    // AND shortcut 1
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 1
                        continue
                    }

                    // CALLORVAR lambdaLiteral
                    var _r13: _KotlinParser_Item? = null
                    _r13 = _MemoCall(_memo, "lambdaLiteral", _index.element, ::lambdaLiteral, null)
                    if (_r13 != null) _index.element = _r13.nextIndex

                    // BIND ll
                    ll = _memo.results.peek()

                    _label = 1
                }
                // AND 1
                1 -> {
                    val _r1_2 = _memo.results.pop()
                    val _r1_1 = _memo.results.pop()

                    if (_r1_1 != null && _r1_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i1, _index.element, _memo.input, (_r1_1.results + _r1_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i1
                    }

                    // ACT 0
                    val _r0 = _memo.results.peek()
                    if (_r0 != null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_r0.startIndex, _r0.nextIndex, _memo.input, _Thunk({ AST.AnnotatedLambda(anns.l, l.nr, ll.r) }, _r0), true))
                    }

                    break
                }
            }
        }
    }


    open fun typeArguments(_memo: _KotlinParser_Memo, __index: Int, _args: _KotlinParser_Args?) {
        val _index = Ref.IntRef()
        _index.element = __index

        val _arg_index = Ref.IntRef()
        val _arg_input_index = Ref.IntRef()

        // AND 1
        var _start_i1 = _index.element

        // AND 2
        var _start_i2 = _index.element

        // AND 3
        var _start_i3 = _index.element

        // AND 4
        var _start_i4 = _index.element

        // AND 5
        var _start_i5 = _index.element

        // AND 6
        var _start_i6 = _index.element

        // STAR 8
        var _start_i8 = _index.element
        val _inp8 = arrayListOf<Token?>()
        val _res8 = arrayListOf<AST.AstNode?>()

        // STAR 11
        var _start_i11 = _index.element
        val _inp11 = arrayListOf<Token?>()
        val _res11 = arrayListOf<AST.AstNode?>()

        // AND 12
        var _start_i12 = _index.element

        // AND 13
        var _start_i13 = _index.element

        // AND 14
        var _start_i14 = _index.element

        // STAR 15
        var _start_i15 = _index.element
        val _inp15 = arrayListOf<Token?>()
        val _res15 = arrayListOf<AST.AstNode?>()

        // STAR 18
        var _start_i18 = _index.element
        val _inp18 = arrayListOf<Token?>()
        val _res18 = arrayListOf<AST.AstNode?>()

        // AND 22
        var _start_i22 = _index.element

        // STAR 23
        var _start_i23 = _index.element
        val _inp23 = arrayListOf<Token?>()
        val _res23 = arrayListOf<AST.AstNode?>()

        // STAR 26
        var _start_i26 = _index.element
        val _inp26 = arrayListOf<Token?>()
        val _res26 = arrayListOf<AST.AstNode?>()

        var _label = -1
        while(true) {
            when(_label) {
                -1 -> {
                    // AND 1
                    _start_i1 = _index.element

                    // AND 2
                    _start_i2 = _index.element

                    // AND 3
                    _start_i3 = _index.element

                    // AND 4
                    _start_i4 = _index.element

                    // AND 5
                    _start_i5 = _index.element

                    // AND 6
                    _start_i6 = _index.element

                    // CALLORVAR LANGLE
                    var _r7: _KotlinParser_Item? = null
                    _r7 = _MemoCall(_memo, "LANGLE", _index.element, ::LANGLE, null)
                    if (_r7 != null) _index.element = _r7.nextIndex

                    // AND shortcut 6
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 6
                        continue
                    }

                    // STAR 8
                    _start_i8 = _index.element
                    _label = 8
                }
                // STAR 8
                8 -> {
                    // CALLORVAR NL
                    var _r9: _KotlinParser_Item? = null
                    _r9 = _MemoCall(_memo, "NL", _index.element, ::NL, null)
                    if (_r9 != null) _index.element = _r9.nextIndex

                    // STAR 8
                    val _r8 = _memo.results.pop()
                    if (_r8 != null) {
                        _res8 += _r8.results
                        _label = 8
                        continue
                    } else {
                        _memo.results.push(_KotlinParser_Item(_start_i8, _index.element, _memo.input, _res8.filterNotNull(), true))
                    }

                    _label = 6
                }
                // AND 6
                6 -> {
                    val _r6_2 = _memo.results.pop()
                    val _r6_1 = _memo.results.pop()

                    if (_r6_1 != null && _r6_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i6, _index.element, _memo.input, (_r6_1.results + _r6_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i6
                    }

                    // AND shortcut 5
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 5
                        continue
                    }

                    // CALLORVAR typeProjection
                    var _r10: _KotlinParser_Item? = null
                    _r10 = _MemoCall(_memo, "typeProjection", _index.element, ::typeProjection, null)
                    if (_r10 != null) _index.element = _r10.nextIndex

                    _label = 5
                }
                // AND 5
                5 -> {
                    val _r5_2 = _memo.results.pop()
                    val _r5_1 = _memo.results.pop()

                    if (_r5_1 != null && _r5_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i5, _index.element, _memo.input, (_r5_1.results + _r5_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i5
                    }

                    // AND shortcut 4
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 4
                        continue
                    }

                    // STAR 11
                    _start_i11 = _index.element
                    _label = 11
                }
                // STAR 11
                11 -> {
                    // AND 12
                    _start_i12 = _index.element

                    // AND 13
                    _start_i13 = _index.element

                    // AND 14
                    _start_i14 = _index.element

                    // STAR 15
                    _start_i15 = _index.element
                    _label = 15
                }
                // STAR 15
                15 -> {
                    // CALLORVAR NL
                    var _r16: _KotlinParser_Item? = null
                    _r16 = _MemoCall(_memo, "NL", _index.element, ::NL, null)
                    if (_r16 != null) _index.element = _r16.nextIndex

                    // STAR 15
                    val _r15 = _memo.results.pop()
                    if (_r15 != null) {
                        _res15 += _r15.results
                        _label = 15
                        continue
                    } else {
                        _memo.results.push(_KotlinParser_Item(_start_i15, _index.element, _memo.input, _res15.filterNotNull(), true))
                    }

                    // AND shortcut 14
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 14
                        continue
                    }

                    // CALLORVAR COMMA
                    var _r17: _KotlinParser_Item? = null
                    _r17 = _MemoCall(_memo, "COMMA", _index.element, ::COMMA, null)
                    if (_r17 != null) _index.element = _r17.nextIndex

                    _label = 14
                }
                // AND 14
                14 -> {
                    val _r14_2 = _memo.results.pop()
                    val _r14_1 = _memo.results.pop()

                    if (_r14_1 != null && _r14_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i14, _index.element, _memo.input, (_r14_1.results + _r14_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i14
                    }

                    // AND shortcut 13
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 13
                        continue
                    }

                    // STAR 18
                    _start_i18 = _index.element
                    _label = 18
                }
                // STAR 18
                18 -> {
                    // CALLORVAR NL
                    var _r19: _KotlinParser_Item? = null
                    _r19 = _MemoCall(_memo, "NL", _index.element, ::NL, null)
                    if (_r19 != null) _index.element = _r19.nextIndex

                    // STAR 18
                    val _r18 = _memo.results.pop()
                    if (_r18 != null) {
                        _res18 += _r18.results
                        _label = 18
                        continue
                    } else {
                        _memo.results.push(_KotlinParser_Item(_start_i18, _index.element, _memo.input, _res18.filterNotNull(), true))
                    }

                    _label = 13
                }
                // AND 13
                13 -> {
                    val _r13_2 = _memo.results.pop()
                    val _r13_1 = _memo.results.pop()

                    if (_r13_1 != null && _r13_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i13, _index.element, _memo.input, (_r13_1.results + _r13_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i13
                    }

                    // AND shortcut 12
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 12
                        continue
                    }

                    // CALLORVAR typeProjection
                    var _r20: _KotlinParser_Item? = null
                    _r20 = _MemoCall(_memo, "typeProjection", _index.element, ::typeProjection, null)
                    if (_r20 != null) _index.element = _r20.nextIndex

                    _label = 12
                }
                // AND 12
                12 -> {
                    val _r12_2 = _memo.results.pop()
                    val _r12_1 = _memo.results.pop()

                    if (_r12_1 != null && _r12_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i12, _index.element, _memo.input, (_r12_1.results + _r12_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i12
                    }

                    // STAR 11
                    val _r11 = _memo.results.pop()
                    if (_r11 != null) {
                        _res11 += _r11.results
                        _label = 11
                        continue
                    } else {
                        _memo.results.push(_KotlinParser_Item(_start_i11, _index.element, _memo.input, _res11.filterNotNull(), true))
                    }

                    _label = 4
                }
                // AND 4
                4 -> {
                    val _r4_2 = _memo.results.pop()
                    val _r4_1 = _memo.results.pop()

                    if (_r4_1 != null && _r4_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i4, _index.element, _memo.input, (_r4_1.results + _r4_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i4
                    }

                    // AND shortcut 3
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 3
                        continue
                    }

                    // AND 22
                    _start_i22 = _index.element

                    // STAR 23
                    _start_i23 = _index.element
                    _label = 23
                }
                // STAR 23
                23 -> {
                    // CALLORVAR NL
                    var _r24: _KotlinParser_Item? = null
                    _r24 = _MemoCall(_memo, "NL", _index.element, ::NL, null)
                    if (_r24 != null) _index.element = _r24.nextIndex

                    // STAR 23
                    val _r23 = _memo.results.pop()
                    if (_r23 != null) {
                        _res23 += _r23.results
                        _label = 23
                        continue
                    } else {
                        _memo.results.push(_KotlinParser_Item(_start_i23, _index.element, _memo.input, _res23.filterNotNull(), true))
                    }

                    // AND shortcut 22
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 22
                        continue
                    }

                    // CALLORVAR COMMA
                    var _r25: _KotlinParser_Item? = null
                    _r25 = _MemoCall(_memo, "COMMA", _index.element, ::COMMA, null)
                    if (_r25 != null) _index.element = _r25.nextIndex

                    _label = 22
                }
                // AND 22
                22 -> {
                    val _r22_2 = _memo.results.pop()
                    val _r22_1 = _memo.results.pop()

                    if (_r22_1 != null && _r22_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i22, _index.element, _memo.input, (_r22_1.results + _r22_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i22
                    }

                    // QUES 21
                    if (_memo.results.peek() == null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_index.element, _memo.input))
                    }
                    _label = 3
                }
                // AND 3
                3 -> {
                    val _r3_2 = _memo.results.pop()
                    val _r3_1 = _memo.results.pop()

                    if (_r3_1 != null && _r3_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i3, _index.element, _memo.input, (_r3_1.results + _r3_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i3
                    }

                    // AND shortcut 2
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 2
                        continue
                    }

                    // STAR 26
                    _start_i26 = _index.element
                    _label = 26
                }
                // STAR 26
                26 -> {
                    // CALLORVAR NL
                    var _r27: _KotlinParser_Item? = null
                    _r27 = _MemoCall(_memo, "NL", _index.element, ::NL, null)
                    if (_r27 != null) _index.element = _r27.nextIndex

                    // STAR 26
                    val _r26 = _memo.results.pop()
                    if (_r26 != null) {
                        _res26 += _r26.results
                        _label = 26
                        continue
                    } else {
                        _memo.results.push(_KotlinParser_Item(_start_i26, _index.element, _memo.input, _res26.filterNotNull(), true))
                    }

                    _label = 2
                }
                // AND 2
                2 -> {
                    val _r2_2 = _memo.results.pop()
                    val _r2_1 = _memo.results.pop()

                    if (_r2_1 != null && _r2_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i2, _index.element, _memo.input, (_r2_1.results + _r2_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i2
                    }

                    // AND shortcut 1
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 1
                        continue
                    }

                    // CALLORVAR RANGLE
                    var _r28: _KotlinParser_Item? = null
                    _r28 = _MemoCall(_memo, "RANGLE", _index.element, ::RANGLE, null)
                    if (_r28 != null) _index.element = _r28.nextIndex

                    _label = 1
                }
                // AND 1
                1 -> {
                    val _r1_2 = _memo.results.pop()
                    val _r1_1 = _memo.results.pop()

                    if (_r1_1 != null && _r1_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i1, _index.element, _memo.input, (_r1_1.results + _r1_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i1
                    }

                    // ACT 0
                    val _r0 = _memo.results.peek()
                    if (_r0 != null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_r0.startIndex, _r0.nextIndex, _memo.input, _Thunk({ it.l }, _r0), true))
                    }

                    break
                }
            }
        }
    }


    open fun valueArguments(_memo: _KotlinParser_Memo, __index: Int, _args: _KotlinParser_Args?) {
        val _index = Ref.IntRef()
        _index.element = __index

        val _arg_index = Ref.IntRef()
        val _arg_input_index = Ref.IntRef()

        // AND 1
        var _start_i1 = _index.element

        // AND 2
        var _start_i2 = _index.element

        // AND 3
        var _start_i3 = _index.element

        // STAR 5
        var _start_i5 = _index.element
        val _inp5 = arrayListOf<Token?>()
        val _res5 = arrayListOf<AST.AstNode?>()

        // AND 8
        var _start_i8 = _index.element

        // AND 9
        var _start_i9 = _index.element

        // AND 10
        var _start_i10 = _index.element

        // STAR 12
        var _start_i12 = _index.element
        val _inp12 = arrayListOf<Token?>()
        val _res12 = arrayListOf<AST.AstNode?>()

        // AND 13
        var _start_i13 = _index.element

        // AND 14
        var _start_i14 = _index.element

        // AND 15
        var _start_i15 = _index.element

        // STAR 16
        var _start_i16 = _index.element
        val _inp16 = arrayListOf<Token?>()
        val _res16 = arrayListOf<AST.AstNode?>()

        // STAR 19
        var _start_i19 = _index.element
        val _inp19 = arrayListOf<Token?>()
        val _res19 = arrayListOf<AST.AstNode?>()

        // AND 23
        var _start_i23 = _index.element

        // STAR 24
        var _start_i24 = _index.element
        val _inp24 = arrayListOf<Token?>()
        val _res24 = arrayListOf<AST.AstNode?>()

        // STAR 27
        var _start_i27 = _index.element
        val _inp27 = arrayListOf<Token?>()
        val _res27 = arrayListOf<AST.AstNode?>()

        var _label = -1
        while(true) {
            when(_label) {
                -1 -> {
                    // AND 1
                    _start_i1 = _index.element

                    // AND 2
                    _start_i2 = _index.element

                    // AND 3
                    _start_i3 = _index.element

                    // CALLORVAR LPAREN
                    var _r4: _KotlinParser_Item? = null
                    _r4 = _MemoCall(_memo, "LPAREN", _index.element, ::LPAREN, null)
                    if (_r4 != null) _index.element = _r4.nextIndex

                    // AND shortcut 3
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 3
                        continue
                    }

                    // STAR 5
                    _start_i5 = _index.element
                    _label = 5
                }
                // STAR 5
                5 -> {
                    // CALLORVAR NL
                    var _r6: _KotlinParser_Item? = null
                    _r6 = _MemoCall(_memo, "NL", _index.element, ::NL, null)
                    if (_r6 != null) _index.element = _r6.nextIndex

                    // STAR 5
                    val _r5 = _memo.results.pop()
                    if (_r5 != null) {
                        _res5 += _r5.results
                        _label = 5
                        continue
                    } else {
                        _memo.results.push(_KotlinParser_Item(_start_i5, _index.element, _memo.input, _res5.filterNotNull(), true))
                    }

                    _label = 3
                }
                // AND 3
                3 -> {
                    val _r3_2 = _memo.results.pop()
                    val _r3_1 = _memo.results.pop()

                    if (_r3_1 != null && _r3_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i3, _index.element, _memo.input, (_r3_1.results + _r3_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i3
                    }

                    // AND shortcut 2
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 2
                        continue
                    }

                    // AND 8
                    _start_i8 = _index.element

                    // AND 9
                    _start_i9 = _index.element

                    // AND 10
                    _start_i10 = _index.element

                    // CALLORVAR valueArgument
                    var _r11: _KotlinParser_Item? = null
                    _r11 = _MemoCall(_memo, "valueArgument", _index.element, ::valueArgument, null)
                    if (_r11 != null) _index.element = _r11.nextIndex

                    // AND shortcut 10
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 10
                        continue
                    }

                    // STAR 12
                    _start_i12 = _index.element
                    _label = 12
                }
                // STAR 12
                12 -> {
                    // AND 13
                    _start_i13 = _index.element

                    // AND 14
                    _start_i14 = _index.element

                    // AND 15
                    _start_i15 = _index.element

                    // STAR 16
                    _start_i16 = _index.element
                    _label = 16
                }
                // STAR 16
                16 -> {
                    // CALLORVAR NL
                    var _r17: _KotlinParser_Item? = null
                    _r17 = _MemoCall(_memo, "NL", _index.element, ::NL, null)
                    if (_r17 != null) _index.element = _r17.nextIndex

                    // STAR 16
                    val _r16 = _memo.results.pop()
                    if (_r16 != null) {
                        _res16 += _r16.results
                        _label = 16
                        continue
                    } else {
                        _memo.results.push(_KotlinParser_Item(_start_i16, _index.element, _memo.input, _res16.filterNotNull(), true))
                    }

                    // AND shortcut 15
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 15
                        continue
                    }

                    // CALLORVAR COMMA
                    var _r18: _KotlinParser_Item? = null
                    _r18 = _MemoCall(_memo, "COMMA", _index.element, ::COMMA, null)
                    if (_r18 != null) _index.element = _r18.nextIndex

                    _label = 15
                }
                // AND 15
                15 -> {
                    val _r15_2 = _memo.results.pop()
                    val _r15_1 = _memo.results.pop()

                    if (_r15_1 != null && _r15_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i15, _index.element, _memo.input, (_r15_1.results + _r15_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i15
                    }

                    // AND shortcut 14
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 14
                        continue
                    }

                    // STAR 19
                    _start_i19 = _index.element
                    _label = 19
                }
                // STAR 19
                19 -> {
                    // CALLORVAR NL
                    var _r20: _KotlinParser_Item? = null
                    _r20 = _MemoCall(_memo, "NL", _index.element, ::NL, null)
                    if (_r20 != null) _index.element = _r20.nextIndex

                    // STAR 19
                    val _r19 = _memo.results.pop()
                    if (_r19 != null) {
                        _res19 += _r19.results
                        _label = 19
                        continue
                    } else {
                        _memo.results.push(_KotlinParser_Item(_start_i19, _index.element, _memo.input, _res19.filterNotNull(), true))
                    }

                    _label = 14
                }
                // AND 14
                14 -> {
                    val _r14_2 = _memo.results.pop()
                    val _r14_1 = _memo.results.pop()

                    if (_r14_1 != null && _r14_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i14, _index.element, _memo.input, (_r14_1.results + _r14_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i14
                    }

                    // AND shortcut 13
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 13
                        continue
                    }

                    // CALLORVAR valueArgument
                    var _r21: _KotlinParser_Item? = null
                    _r21 = _MemoCall(_memo, "valueArgument", _index.element, ::valueArgument, null)
                    if (_r21 != null) _index.element = _r21.nextIndex

                    _label = 13
                }
                // AND 13
                13 -> {
                    val _r13_2 = _memo.results.pop()
                    val _r13_1 = _memo.results.pop()

                    if (_r13_1 != null && _r13_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i13, _index.element, _memo.input, (_r13_1.results + _r13_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i13
                    }

                    // STAR 12
                    val _r12 = _memo.results.pop()
                    if (_r12 != null) {
                        _res12 += _r12.results
                        _label = 12
                        continue
                    } else {
                        _memo.results.push(_KotlinParser_Item(_start_i12, _index.element, _memo.input, _res12.filterNotNull(), true))
                    }

                    _label = 10
                }
                // AND 10
                10 -> {
                    val _r10_2 = _memo.results.pop()
                    val _r10_1 = _memo.results.pop()

                    if (_r10_1 != null && _r10_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i10, _index.element, _memo.input, (_r10_1.results + _r10_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i10
                    }

                    // AND shortcut 9
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 9
                        continue
                    }

                    // AND 23
                    _start_i23 = _index.element

                    // STAR 24
                    _start_i24 = _index.element
                    _label = 24
                }
                // STAR 24
                24 -> {
                    // CALLORVAR NL
                    var _r25: _KotlinParser_Item? = null
                    _r25 = _MemoCall(_memo, "NL", _index.element, ::NL, null)
                    if (_r25 != null) _index.element = _r25.nextIndex

                    // STAR 24
                    val _r24 = _memo.results.pop()
                    if (_r24 != null) {
                        _res24 += _r24.results
                        _label = 24
                        continue
                    } else {
                        _memo.results.push(_KotlinParser_Item(_start_i24, _index.element, _memo.input, _res24.filterNotNull(), true))
                    }

                    // AND shortcut 23
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 23
                        continue
                    }

                    // CALLORVAR COMMA
                    var _r26: _KotlinParser_Item? = null
                    _r26 = _MemoCall(_memo, "COMMA", _index.element, ::COMMA, null)
                    if (_r26 != null) _index.element = _r26.nextIndex

                    _label = 23
                }
                // AND 23
                23 -> {
                    val _r23_2 = _memo.results.pop()
                    val _r23_1 = _memo.results.pop()

                    if (_r23_1 != null && _r23_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i23, _index.element, _memo.input, (_r23_1.results + _r23_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i23
                    }

                    // QUES 22
                    if (_memo.results.peek() == null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_index.element, _memo.input))
                    }
                    _label = 9
                }
                // AND 9
                9 -> {
                    val _r9_2 = _memo.results.pop()
                    val _r9_1 = _memo.results.pop()

                    if (_r9_1 != null && _r9_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i9, _index.element, _memo.input, (_r9_1.results + _r9_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i9
                    }

                    // AND shortcut 8
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 8
                        continue
                    }

                    // STAR 27
                    _start_i27 = _index.element
                    _label = 27
                }
                // STAR 27
                27 -> {
                    // CALLORVAR NL
                    var _r28: _KotlinParser_Item? = null
                    _r28 = _MemoCall(_memo, "NL", _index.element, ::NL, null)
                    if (_r28 != null) _index.element = _r28.nextIndex

                    // STAR 27
                    val _r27 = _memo.results.pop()
                    if (_r27 != null) {
                        _res27 += _r27.results
                        _label = 27
                        continue
                    } else {
                        _memo.results.push(_KotlinParser_Item(_start_i27, _index.element, _memo.input, _res27.filterNotNull(), true))
                    }

                    _label = 8
                }
                // AND 8
                8 -> {
                    val _r8_2 = _memo.results.pop()
                    val _r8_1 = _memo.results.pop()

                    if (_r8_1 != null && _r8_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i8, _index.element, _memo.input, (_r8_1.results + _r8_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i8
                    }

                    // QUES 7
                    if (_memo.results.peek() == null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_index.element, _memo.input))
                    }
                    _label = 2
                }
                // AND 2
                2 -> {
                    val _r2_2 = _memo.results.pop()
                    val _r2_1 = _memo.results.pop()

                    if (_r2_1 != null && _r2_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i2, _index.element, _memo.input, (_r2_1.results + _r2_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i2
                    }

                    // AND shortcut 1
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 1
                        continue
                    }

                    // CALLORVAR RPAREN
                    var _r29: _KotlinParser_Item? = null
                    _r29 = _MemoCall(_memo, "RPAREN", _index.element, ::RPAREN, null)
                    if (_r29 != null) _index.element = _r29.nextIndex

                    _label = 1
                }
                // AND 1
                1 -> {
                    val _r1_2 = _memo.results.pop()
                    val _r1_1 = _memo.results.pop()

                    if (_r1_1 != null && _r1_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i1, _index.element, _memo.input, (_r1_1.results + _r1_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i1
                    }

                    // ACT 0
                    val _r0 = _memo.results.peek()
                    if (_r0 != null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_r0.startIndex, _r0.nextIndex, _memo.input, _Thunk({ it.l }, _r0), true))
                    }

                    break
                }
            }
        }
    }


    open fun valueArgument(_memo: _KotlinParser_Memo, __index: Int, _args: _KotlinParser_Args?) {
        val _index = Ref.IntRef()
        _index.element = __index

        val _arg_index = Ref.IntRef()
        val _arg_input_index = Ref.IntRef()

        var ann: _KotlinParser_Item? = null
        var name: _KotlinParser_Item? = null
        var expr: _KotlinParser_Item? = null

        // OR 0
        var _start_i0 = _index.element

        // AND 2
        var _start_i2 = _index.element

        // AND 3
        var _start_i3 = _index.element

        // AND 4
        var _start_i4 = _index.element

        // AND 5
        var _start_i5 = _index.element

        // AND 6
        var _start_i6 = _index.element

        // STAR 8
        var _start_i8 = _index.element
        val _inp8 = arrayListOf<Token?>()
        val _res8 = arrayListOf<AST.AstNode?>()

        // STAR 10
        var _start_i10 = _index.element
        val _inp10 = arrayListOf<Token?>()
        val _res10 = arrayListOf<AST.AstNode?>()

        // AND 14
        var _start_i14 = _index.element

        // AND 15
        var _start_i15 = _index.element

        // AND 16
        var _start_i16 = _index.element

        // STAR 18
        var _start_i18 = _index.element
        val _inp18 = arrayListOf<Token?>()
        val _res18 = arrayListOf<AST.AstNode?>()

        // STAR 21
        var _start_i21 = _index.element
        val _inp21 = arrayListOf<Token?>()
        val _res21 = arrayListOf<AST.AstNode?>()

        // STAR 24
        var _start_i24 = _index.element
        val _inp24 = arrayListOf<Token?>()
        val _res24 = arrayListOf<AST.AstNode?>()

        // AND 29
        var _start_i29 = _index.element

        // AND 30
        var _start_i30 = _index.element

        // AND 31
        var _start_i31 = _index.element

        // STAR 33
        var _start_i33 = _index.element
        val _inp33 = arrayListOf<Token?>()
        val _res33 = arrayListOf<AST.AstNode?>()

        // STAR 35
        var _start_i35 = _index.element
        val _inp35 = arrayListOf<Token?>()
        val _res35 = arrayListOf<AST.AstNode?>()

        // AND 39
        var _start_i39 = _index.element

        // AND 40
        var _start_i40 = _index.element

        // AND 41
        var _start_i41 = _index.element

        // STAR 43
        var _start_i43 = _index.element
        val _inp43 = arrayListOf<Token?>()
        val _res43 = arrayListOf<AST.AstNode?>()

        // STAR 46
        var _start_i46 = _index.element
        val _inp46 = arrayListOf<Token?>()
        val _res46 = arrayListOf<AST.AstNode?>()

        var _label = -1
        while(true) {
            when(_label) {
                -1 -> {
                    // OR 0
                    _start_i0 = _index.element

                    // AND 2
                    _start_i2 = _index.element

                    // AND 3
                    _start_i3 = _index.element

                    // AND 4
                    _start_i4 = _index.element

                    // AND 5
                    _start_i5 = _index.element

                    // AND 6
                    _start_i6 = _index.element

                    // STAR 8
                    _start_i8 = _index.element
                    _label = 8
                }
                // STAR 8
                8 -> {
                    // CALLORVAR annotation
                    var _r9: _KotlinParser_Item? = null
                    _r9 = _MemoCall(_memo, "annotation", _index.element, ::annotation, null)
                    if (_r9 != null) _index.element = _r9.nextIndex

                    // STAR 8
                    val _r8 = _memo.results.pop()
                    if (_r8 != null) {
                        _res8 += _r8.results
                        _label = 8
                        continue
                    } else {
                        _memo.results.push(_KotlinParser_Item(_start_i8, _index.element, _memo.input, _res8.filterNotNull(), true))
                    }

                    // BIND ann
                    ann = _memo.results.peek()

                    // AND shortcut 6
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 6
                        continue
                    }

                    // STAR 10
                    _start_i10 = _index.element
                    _label = 10
                }
                // STAR 10
                10 -> {
                    // CALLORVAR NL
                    var _r11: _KotlinParser_Item? = null
                    _r11 = _MemoCall(_memo, "NL", _index.element, ::NL, null)
                    if (_r11 != null) _index.element = _r11.nextIndex

                    // STAR 10
                    val _r10 = _memo.results.pop()
                    if (_r10 != null) {
                        _res10 += _r10.results
                        _label = 10
                        continue
                    } else {
                        _memo.results.push(_KotlinParser_Item(_start_i10, _index.element, _memo.input, _res10.filterNotNull(), true))
                    }

                    _label = 6
                }
                // AND 6
                6 -> {
                    val _r6_2 = _memo.results.pop()
                    val _r6_1 = _memo.results.pop()

                    if (_r6_1 != null && _r6_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i6, _index.element, _memo.input, (_r6_1.results + _r6_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i6
                    }

                    // AND shortcut 5
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 5
                        continue
                    }

                    // AND 14
                    _start_i14 = _index.element

                    // AND 15
                    _start_i15 = _index.element

                    // AND 16
                    _start_i16 = _index.element

                    // CALLORVAR simpleIdentifier
                    var _r17: _KotlinParser_Item? = null
                    _r17 = _MemoCall(_memo, "simpleIdentifier", _index.element, ::simpleIdentifier, null)
                    if (_r17 != null) _index.element = _r17.nextIndex

                    // AND shortcut 16
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 16
                        continue
                    }

                    // STAR 18
                    _start_i18 = _index.element
                    _label = 18
                }
                // STAR 18
                18 -> {
                    // CALLORVAR NL
                    var _r19: _KotlinParser_Item? = null
                    _r19 = _MemoCall(_memo, "NL", _index.element, ::NL, null)
                    if (_r19 != null) _index.element = _r19.nextIndex

                    // STAR 18
                    val _r18 = _memo.results.pop()
                    if (_r18 != null) {
                        _res18 += _r18.results
                        _label = 18
                        continue
                    } else {
                        _memo.results.push(_KotlinParser_Item(_start_i18, _index.element, _memo.input, _res18.filterNotNull(), true))
                    }

                    _label = 16
                }
                // AND 16
                16 -> {
                    val _r16_2 = _memo.results.pop()
                    val _r16_1 = _memo.results.pop()

                    if (_r16_1 != null && _r16_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i16, _index.element, _memo.input, (_r16_1.results + _r16_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i16
                    }

                    // AND shortcut 15
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 15
                        continue
                    }

                    // CALLORVAR ASSIGNMENT
                    var _r20: _KotlinParser_Item? = null
                    _r20 = _MemoCall(_memo, "ASSIGNMENT", _index.element, ::ASSIGNMENT, null)
                    if (_r20 != null) _index.element = _r20.nextIndex

                    _label = 15
                }
                // AND 15
                15 -> {
                    val _r15_2 = _memo.results.pop()
                    val _r15_1 = _memo.results.pop()

                    if (_r15_1 != null && _r15_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i15, _index.element, _memo.input, (_r15_1.results + _r15_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i15
                    }

                    // AND shortcut 14
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 14
                        continue
                    }

                    // STAR 21
                    _start_i21 = _index.element
                    _label = 21
                }
                // STAR 21
                21 -> {
                    // CALLORVAR NL
                    var _r22: _KotlinParser_Item? = null
                    _r22 = _MemoCall(_memo, "NL", _index.element, ::NL, null)
                    if (_r22 != null) _index.element = _r22.nextIndex

                    // STAR 21
                    val _r21 = _memo.results.pop()
                    if (_r21 != null) {
                        _res21 += _r21.results
                        _label = 21
                        continue
                    } else {
                        _memo.results.push(_KotlinParser_Item(_start_i21, _index.element, _memo.input, _res21.filterNotNull(), true))
                    }

                    _label = 14
                }
                // AND 14
                14 -> {
                    val _r14_2 = _memo.results.pop()
                    val _r14_1 = _memo.results.pop()

                    if (_r14_1 != null && _r14_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i14, _index.element, _memo.input, (_r14_1.results + _r14_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i14
                    }

                    // QUES 13
                    if (_memo.results.peek() == null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_index.element, _memo.input))
                    }
                    // BIND name
                    name = _memo.results.peek()

                    _label = 5
                }
                // AND 5
                5 -> {
                    val _r5_2 = _memo.results.pop()
                    val _r5_1 = _memo.results.pop()

                    if (_r5_1 != null && _r5_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i5, _index.element, _memo.input, (_r5_1.results + _r5_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i5
                    }

                    // AND shortcut 4
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 4
                        continue
                    }

                    // CALLORVAR MULT
                    var _r23: _KotlinParser_Item? = null
                    _r23 = _MemoCall(_memo, "MULT", _index.element, ::MULT, null)
                    if (_r23 != null) _index.element = _r23.nextIndex

                    _label = 4
                }
                // AND 4
                4 -> {
                    val _r4_2 = _memo.results.pop()
                    val _r4_1 = _memo.results.pop()

                    if (_r4_1 != null && _r4_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i4, _index.element, _memo.input, (_r4_1.results + _r4_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i4
                    }

                    // AND shortcut 3
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 3
                        continue
                    }

                    // STAR 24
                    _start_i24 = _index.element
                    _label = 24
                }
                // STAR 24
                24 -> {
                    // CALLORVAR NL
                    var _r25: _KotlinParser_Item? = null
                    _r25 = _MemoCall(_memo, "NL", _index.element, ::NL, null)
                    if (_r25 != null) _index.element = _r25.nextIndex

                    // STAR 24
                    val _r24 = _memo.results.pop()
                    if (_r24 != null) {
                        _res24 += _r24.results
                        _label = 24
                        continue
                    } else {
                        _memo.results.push(_KotlinParser_Item(_start_i24, _index.element, _memo.input, _res24.filterNotNull(), true))
                    }

                    _label = 3
                }
                // AND 3
                3 -> {
                    val _r3_2 = _memo.results.pop()
                    val _r3_1 = _memo.results.pop()

                    if (_r3_1 != null && _r3_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i3, _index.element, _memo.input, (_r3_1.results + _r3_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i3
                    }

                    // AND shortcut 2
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 2
                        continue
                    }

                    // CALLORVAR expression
                    var _r27: _KotlinParser_Item? = null
                    _r27 = _MemoCall(_memo, "expression", _index.element, ::expression, null)
                    if (_r27 != null) _index.element = _r27.nextIndex

                    // BIND expr
                    expr = _memo.results.peek()

                    _label = 2
                }
                // AND 2
                2 -> {
                    val _r2_2 = _memo.results.pop()
                    val _r2_1 = _memo.results.pop()

                    if (_r2_1 != null && _r2_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i2, _index.element, _memo.input, (_r2_1.results + _r2_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i2
                    }

                    // ACT 1
                    val _r1 = _memo.results.peek()
                    if (_r1 != null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_r1.startIndex, _r1.nextIndex, _memo.input, _Thunk({ AST.ValueArgument(ann.l, name.nr?.toString(), expr.r, withSpread = true) }, _r1), true))
                    }

                    // OR shortcut 0
                    if (_memo.results.peek() == null) {
                        _memo.results.pop()
                        _index.element = _start_i0
                    } else {
                        _label = 0
                        continue
                    }

                    // AND 29
                    _start_i29 = _index.element

                    // AND 30
                    _start_i30 = _index.element

                    // AND 31
                    _start_i31 = _index.element

                    // STAR 33
                    _start_i33 = _index.element
                    _label = 33
                }
                // STAR 33
                33 -> {
                    // CALLORVAR annotation
                    var _r34: _KotlinParser_Item? = null
                    _r34 = _MemoCall(_memo, "annotation", _index.element, ::annotation, null)
                    if (_r34 != null) _index.element = _r34.nextIndex

                    // STAR 33
                    val _r33 = _memo.results.pop()
                    if (_r33 != null) {
                        _res33 += _r33.results
                        _label = 33
                        continue
                    } else {
                        _memo.results.push(_KotlinParser_Item(_start_i33, _index.element, _memo.input, _res33.filterNotNull(), true))
                    }

                    // BIND ann
                    ann = _memo.results.peek()

                    // AND shortcut 31
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 31
                        continue
                    }

                    // STAR 35
                    _start_i35 = _index.element
                    _label = 35
                }
                // STAR 35
                35 -> {
                    // CALLORVAR NL
                    var _r36: _KotlinParser_Item? = null
                    _r36 = _MemoCall(_memo, "NL", _index.element, ::NL, null)
                    if (_r36 != null) _index.element = _r36.nextIndex

                    // STAR 35
                    val _r35 = _memo.results.pop()
                    if (_r35 != null) {
                        _res35 += _r35.results
                        _label = 35
                        continue
                    } else {
                        _memo.results.push(_KotlinParser_Item(_start_i35, _index.element, _memo.input, _res35.filterNotNull(), true))
                    }

                    _label = 31
                }
                // AND 31
                31 -> {
                    val _r31_2 = _memo.results.pop()
                    val _r31_1 = _memo.results.pop()

                    if (_r31_1 != null && _r31_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i31, _index.element, _memo.input, (_r31_1.results + _r31_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i31
                    }

                    // AND shortcut 30
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 30
                        continue
                    }

                    // AND 39
                    _start_i39 = _index.element

                    // AND 40
                    _start_i40 = _index.element

                    // AND 41
                    _start_i41 = _index.element

                    // CALLORVAR simpleIdentifier
                    var _r42: _KotlinParser_Item? = null
                    _r42 = _MemoCall(_memo, "simpleIdentifier", _index.element, ::simpleIdentifier, null)
                    if (_r42 != null) _index.element = _r42.nextIndex

                    // AND shortcut 41
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 41
                        continue
                    }

                    // STAR 43
                    _start_i43 = _index.element
                    _label = 43
                }
                // STAR 43
                43 -> {
                    // CALLORVAR NL
                    var _r44: _KotlinParser_Item? = null
                    _r44 = _MemoCall(_memo, "NL", _index.element, ::NL, null)
                    if (_r44 != null) _index.element = _r44.nextIndex

                    // STAR 43
                    val _r43 = _memo.results.pop()
                    if (_r43 != null) {
                        _res43 += _r43.results
                        _label = 43
                        continue
                    } else {
                        _memo.results.push(_KotlinParser_Item(_start_i43, _index.element, _memo.input, _res43.filterNotNull(), true))
                    }

                    _label = 41
                }
                // AND 41
                41 -> {
                    val _r41_2 = _memo.results.pop()
                    val _r41_1 = _memo.results.pop()

                    if (_r41_1 != null && _r41_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i41, _index.element, _memo.input, (_r41_1.results + _r41_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i41
                    }

                    // AND shortcut 40
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 40
                        continue
                    }

                    // CALLORVAR ASSIGNMENT
                    var _r45: _KotlinParser_Item? = null
                    _r45 = _MemoCall(_memo, "ASSIGNMENT", _index.element, ::ASSIGNMENT, null)
                    if (_r45 != null) _index.element = _r45.nextIndex

                    _label = 40
                }
                // AND 40
                40 -> {
                    val _r40_2 = _memo.results.pop()
                    val _r40_1 = _memo.results.pop()

                    if (_r40_1 != null && _r40_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i40, _index.element, _memo.input, (_r40_1.results + _r40_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i40
                    }

                    // AND shortcut 39
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 39
                        continue
                    }

                    // STAR 46
                    _start_i46 = _index.element
                    _label = 46
                }
                // STAR 46
                46 -> {
                    // CALLORVAR NL
                    var _r47: _KotlinParser_Item? = null
                    _r47 = _MemoCall(_memo, "NL", _index.element, ::NL, null)
                    if (_r47 != null) _index.element = _r47.nextIndex

                    // STAR 46
                    val _r46 = _memo.results.pop()
                    if (_r46 != null) {
                        _res46 += _r46.results
                        _label = 46
                        continue
                    } else {
                        _memo.results.push(_KotlinParser_Item(_start_i46, _index.element, _memo.input, _res46.filterNotNull(), true))
                    }

                    _label = 39
                }
                // AND 39
                39 -> {
                    val _r39_2 = _memo.results.pop()
                    val _r39_1 = _memo.results.pop()

                    if (_r39_1 != null && _r39_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i39, _index.element, _memo.input, (_r39_1.results + _r39_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i39
                    }

                    // QUES 38
                    if (_memo.results.peek() == null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_index.element, _memo.input))
                    }
                    // BIND name
                    name = _memo.results.peek()

                    _label = 30
                }
                // AND 30
                30 -> {
                    val _r30_2 = _memo.results.pop()
                    val _r30_1 = _memo.results.pop()

                    if (_r30_1 != null && _r30_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i30, _index.element, _memo.input, (_r30_1.results + _r30_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i30
                    }

                    // AND shortcut 29
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 29
                        continue
                    }

                    // CALLORVAR expression
                    var _r49: _KotlinParser_Item? = null
                    _r49 = _MemoCall(_memo, "expression", _index.element, ::expression, null)
                    if (_r49 != null) _index.element = _r49.nextIndex

                    // BIND expr
                    expr = _memo.results.peek()

                    _label = 29
                }
                // AND 29
                29 -> {
                    val _r29_2 = _memo.results.pop()
                    val _r29_1 = _memo.results.pop()

                    if (_r29_1 != null && _r29_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i29, _index.element, _memo.input, (_r29_1.results + _r29_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i29
                    }

                    // ACT 28
                    val _r28 = _memo.results.peek()
                    if (_r28 != null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_r28.startIndex, _r28.nextIndex, _memo.input, _Thunk({ AST.ValueArgument(ann.l, name.nr?.toString(), expr.r, withSpread = false) }, _r28), true))
                    }

                    _label = 0
                }
                // OR 0
                0 -> {
                    break
                }
            }
        }
    }


    open fun primaryExpression(_memo: _KotlinParser_Memo, __index: Int, _args: _KotlinParser_Args?) {
        val _index = Ref.IntRef()
        _index.element = __index

        val _arg_index = Ref.IntRef()
        val _arg_input_index = Ref.IntRef()

        // OR 0
        var _start_i0 = _index.element

        // OR 1
        var _start_i1 = _index.element

        // OR 2
        var _start_i2 = _index.element

        // OR 3
        var _start_i3 = _index.element

        // OR 4
        var _start_i4 = _index.element

        // OR 5
        var _start_i5 = _index.element

        // OR 6
        var _start_i6 = _index.element

        // OR 7
        var _start_i7 = _index.element

        // OR 8
        var _start_i8 = _index.element

        // OR 9
        var _start_i9 = _index.element

        // OR 10
        var _start_i10 = _index.element

        // OR 11
        var _start_i11 = _index.element

        // OR 12
        var _start_i12 = _index.element

        var _label = -1
        while(true) {
            when(_label) {
                -1 -> {
                    // OR 0
                    _start_i0 = _index.element

                    // OR 1
                    _start_i1 = _index.element

                    // OR 2
                    _start_i2 = _index.element

                    // OR 3
                    _start_i3 = _index.element

                    // OR 4
                    _start_i4 = _index.element

                    // OR 5
                    _start_i5 = _index.element

                    // OR 6
                    _start_i6 = _index.element

                    // OR 7
                    _start_i7 = _index.element

                    // OR 8
                    _start_i8 = _index.element

                    // OR 9
                    _start_i9 = _index.element

                    // OR 10
                    _start_i10 = _index.element

                    // OR 11
                    _start_i11 = _index.element

                    // OR 12
                    _start_i12 = _index.element

                    // CALLORVAR parenthesizedExpression
                    var _r13: _KotlinParser_Item? = null
                    _r13 = _MemoCall(_memo, "parenthesizedExpression", _index.element, ::parenthesizedExpression, null)
                    if (_r13 != null) _index.element = _r13.nextIndex

                    // OR shortcut 12
                    if (_memo.results.peek() == null) {
                        _memo.results.pop()
                        _index.element = _start_i12
                    } else {
                        _label = 12
                        continue
                    }

                    // CALLORVAR literalConstant
                    var _r14: _KotlinParser_Item? = null
                    _r14 = _MemoCall(_memo, "literalConstant", _index.element, ::literalConstant, null)
                    if (_r14 != null) _index.element = _r14.nextIndex

                    _label = 12
                }
                // OR 12
                12 -> {
                    // OR shortcut 11
                    if (_memo.results.peek() == null) {
                        _memo.results.pop()
                        _index.element = _start_i11
                    } else {
                        _label = 11
                        continue
                    }

                    // CALLORVAR stringLiteral
                    var _r15: _KotlinParser_Item? = null
                    _r15 = _MemoCall(_memo, "stringLiteral", _index.element, ::stringLiteral, null)
                    if (_r15 != null) _index.element = _r15.nextIndex

                    _label = 11
                }
                // OR 11
                11 -> {
                    // OR shortcut 10
                    if (_memo.results.peek() == null) {
                        _memo.results.pop()
                        _index.element = _start_i10
                    } else {
                        _label = 10
                        continue
                    }

                    // CALLORVAR callableReference
                    var _r16: _KotlinParser_Item? = null
                    _r16 = _MemoCall(_memo, "callableReference", _index.element, ::callableReference, null)
                    if (_r16 != null) _index.element = _r16.nextIndex

                    _label = 10
                }
                // OR 10
                10 -> {
                    // OR shortcut 9
                    if (_memo.results.peek() == null) {
                        _memo.results.pop()
                        _index.element = _start_i9
                    } else {
                        _label = 9
                        continue
                    }

                    // CALLORVAR functionLiteral
                    var _r17: _KotlinParser_Item? = null
                    _r17 = _MemoCall(_memo, "functionLiteral", _index.element, ::functionLiteral, null)
                    if (_r17 != null) _index.element = _r17.nextIndex

                    _label = 9
                }
                // OR 9
                9 -> {
                    // OR shortcut 8
                    if (_memo.results.peek() == null) {
                        _memo.results.pop()
                        _index.element = _start_i8
                    } else {
                        _label = 8
                        continue
                    }

                    // CALLORVAR objectLiteral
                    var _r18: _KotlinParser_Item? = null
                    _r18 = _MemoCall(_memo, "objectLiteral", _index.element, ::objectLiteral, null)
                    if (_r18 != null) _index.element = _r18.nextIndex

                    _label = 8
                }
                // OR 8
                8 -> {
                    // OR shortcut 7
                    if (_memo.results.peek() == null) {
                        _memo.results.pop()
                        _index.element = _start_i7
                    } else {
                        _label = 7
                        continue
                    }

                    // CALLORVAR collectionLiteral
                    var _r19: _KotlinParser_Item? = null
                    _r19 = _MemoCall(_memo, "collectionLiteral", _index.element, ::collectionLiteral, null)
                    if (_r19 != null) _index.element = _r19.nextIndex

                    _label = 7
                }
                // OR 7
                7 -> {
                    // OR shortcut 6
                    if (_memo.results.peek() == null) {
                        _memo.results.pop()
                        _index.element = _start_i6
                    } else {
                        _label = 6
                        continue
                    }

                    // CALLORVAR thisExpression
                    var _r20: _KotlinParser_Item? = null
                    _r20 = _MemoCall(_memo, "thisExpression", _index.element, ::thisExpression, null)
                    if (_r20 != null) _index.element = _r20.nextIndex

                    _label = 6
                }
                // OR 6
                6 -> {
                    // OR shortcut 5
                    if (_memo.results.peek() == null) {
                        _memo.results.pop()
                        _index.element = _start_i5
                    } else {
                        _label = 5
                        continue
                    }

                    // CALLORVAR superExpression
                    var _r21: _KotlinParser_Item? = null
                    _r21 = _MemoCall(_memo, "superExpression", _index.element, ::superExpression, null)
                    if (_r21 != null) _index.element = _r21.nextIndex

                    _label = 5
                }
                // OR 5
                5 -> {
                    // OR shortcut 4
                    if (_memo.results.peek() == null) {
                        _memo.results.pop()
                        _index.element = _start_i4
                    } else {
                        _label = 4
                        continue
                    }

                    // CALLORVAR ifExpression
                    var _r22: _KotlinParser_Item? = null
                    _r22 = _MemoCall(_memo, "ifExpression", _index.element, ::ifExpression, null)
                    if (_r22 != null) _index.element = _r22.nextIndex

                    _label = 4
                }
                // OR 4
                4 -> {
                    // OR shortcut 3
                    if (_memo.results.peek() == null) {
                        _memo.results.pop()
                        _index.element = _start_i3
                    } else {
                        _label = 3
                        continue
                    }

                    // CALLORVAR whenExpression
                    var _r23: _KotlinParser_Item? = null
                    _r23 = _MemoCall(_memo, "whenExpression", _index.element, ::whenExpression, null)
                    if (_r23 != null) _index.element = _r23.nextIndex

                    _label = 3
                }
                // OR 3
                3 -> {
                    // OR shortcut 2
                    if (_memo.results.peek() == null) {
                        _memo.results.pop()
                        _index.element = _start_i2
                    } else {
                        _label = 2
                        continue
                    }

                    // CALLORVAR tryExpression
                    var _r24: _KotlinParser_Item? = null
                    _r24 = _MemoCall(_memo, "tryExpression", _index.element, ::tryExpression, null)
                    if (_r24 != null) _index.element = _r24.nextIndex

                    _label = 2
                }
                // OR 2
                2 -> {
                    // OR shortcut 1
                    if (_memo.results.peek() == null) {
                        _memo.results.pop()
                        _index.element = _start_i1
                    } else {
                        _label = 1
                        continue
                    }

                    // CALLORVAR jumpExpression
                    var _r25: _KotlinParser_Item? = null
                    _r25 = _MemoCall(_memo, "jumpExpression", _index.element, ::jumpExpression, null)
                    if (_r25 != null) _index.element = _r25.nextIndex

                    _label = 1
                }
                // OR 1
                1 -> {
                    // OR shortcut 0
                    if (_memo.results.peek() == null) {
                        _memo.results.pop()
                        _index.element = _start_i0
                    } else {
                        _label = 0
                        continue
                    }

                    // CALLORVAR simpleIdentifier
                    var _r27: _KotlinParser_Item? = null
                    _r27 = _MemoCall(_memo, "simpleIdentifier", _index.element, ::simpleIdentifier, null)
                    if (_r27 != null) _index.element = _r27.nextIndex

                    // ACT 26
                    val _r26 = _memo.results.peek()
                    if (_r26 != null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_r26.startIndex, _r26.nextIndex, _memo.input, _Thunk({ AST.NameExpression(it.s) }, _r26), true))
                    }

                    _label = 0
                }
                // OR 0
                0 -> {
                    break
                }
            }
        }
    }


    open fun parenthesizedExpression(_memo: _KotlinParser_Memo, __index: Int, _args: _KotlinParser_Args?) {
        val _index = Ref.IntRef()
        _index.element = __index

        val _arg_index = Ref.IntRef()
        val _arg_input_index = Ref.IntRef()

        var expr: _KotlinParser_Item? = null

        // AND 1
        var _start_i1 = _index.element

        // AND 2
        var _start_i2 = _index.element

        // AND 3
        var _start_i3 = _index.element

        // AND 4
        var _start_i4 = _index.element

        // STAR 6
        var _start_i6 = _index.element
        val _inp6 = arrayListOf<Token?>()
        val _res6 = arrayListOf<AST.AstNode?>()

        // STAR 10
        var _start_i10 = _index.element
        val _inp10 = arrayListOf<Token?>()
        val _res10 = arrayListOf<AST.AstNode?>()

        var _label = -1
        while(true) {
            when(_label) {
                -1 -> {
                    // AND 1
                    _start_i1 = _index.element

                    // AND 2
                    _start_i2 = _index.element

                    // AND 3
                    _start_i3 = _index.element

                    // AND 4
                    _start_i4 = _index.element

                    // CALLORVAR LPAREN
                    var _r5: _KotlinParser_Item? = null
                    _r5 = _MemoCall(_memo, "LPAREN", _index.element, ::LPAREN, null)
                    if (_r5 != null) _index.element = _r5.nextIndex

                    // AND shortcut 4
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 4
                        continue
                    }

                    // STAR 6
                    _start_i6 = _index.element
                    _label = 6
                }
                // STAR 6
                6 -> {
                    // CALLORVAR NL
                    var _r7: _KotlinParser_Item? = null
                    _r7 = _MemoCall(_memo, "NL", _index.element, ::NL, null)
                    if (_r7 != null) _index.element = _r7.nextIndex

                    // STAR 6
                    val _r6 = _memo.results.pop()
                    if (_r6 != null) {
                        _res6 += _r6.results
                        _label = 6
                        continue
                    } else {
                        _memo.results.push(_KotlinParser_Item(_start_i6, _index.element, _memo.input, _res6.filterNotNull(), true))
                    }

                    _label = 4
                }
                // AND 4
                4 -> {
                    val _r4_2 = _memo.results.pop()
                    val _r4_1 = _memo.results.pop()

                    if (_r4_1 != null && _r4_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i4, _index.element, _memo.input, (_r4_1.results + _r4_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i4
                    }

                    // AND shortcut 3
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 3
                        continue
                    }

                    // CALLORVAR expression
                    var _r9: _KotlinParser_Item? = null
                    _r9 = _MemoCall(_memo, "expression", _index.element, ::expression, null)
                    if (_r9 != null) _index.element = _r9.nextIndex

                    // BIND expr
                    expr = _memo.results.peek()

                    _label = 3
                }
                // AND 3
                3 -> {
                    val _r3_2 = _memo.results.pop()
                    val _r3_1 = _memo.results.pop()

                    if (_r3_1 != null && _r3_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i3, _index.element, _memo.input, (_r3_1.results + _r3_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i3
                    }

                    // AND shortcut 2
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 2
                        continue
                    }

                    // STAR 10
                    _start_i10 = _index.element
                    _label = 10
                }
                // STAR 10
                10 -> {
                    // CALLORVAR NL
                    var _r11: _KotlinParser_Item? = null
                    _r11 = _MemoCall(_memo, "NL", _index.element, ::NL, null)
                    if (_r11 != null) _index.element = _r11.nextIndex

                    // STAR 10
                    val _r10 = _memo.results.pop()
                    if (_r10 != null) {
                        _res10 += _r10.results
                        _label = 10
                        continue
                    } else {
                        _memo.results.push(_KotlinParser_Item(_start_i10, _index.element, _memo.input, _res10.filterNotNull(), true))
                    }

                    _label = 2
                }
                // AND 2
                2 -> {
                    val _r2_2 = _memo.results.pop()
                    val _r2_1 = _memo.results.pop()

                    if (_r2_1 != null && _r2_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i2, _index.element, _memo.input, (_r2_1.results + _r2_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i2
                    }

                    // AND shortcut 1
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 1
                        continue
                    }

                    // CALLORVAR RPAREN
                    var _r12: _KotlinParser_Item? = null
                    _r12 = _MemoCall(_memo, "RPAREN", _index.element, ::RPAREN, null)
                    if (_r12 != null) _index.element = _r12.nextIndex

                    _label = 1
                }
                // AND 1
                1 -> {
                    val _r1_2 = _memo.results.pop()
                    val _r1_1 = _memo.results.pop()

                    if (_r1_1 != null && _r1_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i1, _index.element, _memo.input, (_r1_1.results + _r1_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i1
                    }

                    // ACT 0
                    val _r0 = _memo.results.peek()
                    if (_r0 != null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_r0.startIndex, _r0.nextIndex, _memo.input, _Thunk({ expr.r }, _r0), true))
                    }

                    break
                }
            }
        }
    }


    open fun collectionLiteral(_memo: _KotlinParser_Memo, __index: Int, _args: _KotlinParser_Args?) {
        val _index = Ref.IntRef()
        _index.element = __index

        val _arg_index = Ref.IntRef()
        val _arg_input_index = Ref.IntRef()

        // AND 1
        var _start_i1 = _index.element

        // AND 2
        var _start_i2 = _index.element

        // AND 3
        var _start_i3 = _index.element

        // STAR 5
        var _start_i5 = _index.element
        val _inp5 = arrayListOf<Token?>()
        val _res5 = arrayListOf<AST.AstNode?>()

        // AND 8
        var _start_i8 = _index.element

        // AND 9
        var _start_i9 = _index.element

        // AND 10
        var _start_i10 = _index.element

        // STAR 12
        var _start_i12 = _index.element
        val _inp12 = arrayListOf<Token?>()
        val _res12 = arrayListOf<AST.AstNode?>()

        // AND 13
        var _start_i13 = _index.element

        // AND 14
        var _start_i14 = _index.element

        // AND 15
        var _start_i15 = _index.element

        // STAR 16
        var _start_i16 = _index.element
        val _inp16 = arrayListOf<Token?>()
        val _res16 = arrayListOf<AST.AstNode?>()

        // STAR 19
        var _start_i19 = _index.element
        val _inp19 = arrayListOf<Token?>()
        val _res19 = arrayListOf<AST.AstNode?>()

        // AND 23
        var _start_i23 = _index.element

        // STAR 24
        var _start_i24 = _index.element
        val _inp24 = arrayListOf<Token?>()
        val _res24 = arrayListOf<AST.AstNode?>()

        // STAR 27
        var _start_i27 = _index.element
        val _inp27 = arrayListOf<Token?>()
        val _res27 = arrayListOf<AST.AstNode?>()

        var _label = -1
        while(true) {
            when(_label) {
                -1 -> {
                    // AND 1
                    _start_i1 = _index.element

                    // AND 2
                    _start_i2 = _index.element

                    // AND 3
                    _start_i3 = _index.element

                    // CALLORVAR LSQUARE
                    var _r4: _KotlinParser_Item? = null
                    _r4 = _MemoCall(_memo, "LSQUARE", _index.element, ::LSQUARE, null)
                    if (_r4 != null) _index.element = _r4.nextIndex

                    // AND shortcut 3
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 3
                        continue
                    }

                    // STAR 5
                    _start_i5 = _index.element
                    _label = 5
                }
                // STAR 5
                5 -> {
                    // CALLORVAR NL
                    var _r6: _KotlinParser_Item? = null
                    _r6 = _MemoCall(_memo, "NL", _index.element, ::NL, null)
                    if (_r6 != null) _index.element = _r6.nextIndex

                    // STAR 5
                    val _r5 = _memo.results.pop()
                    if (_r5 != null) {
                        _res5 += _r5.results
                        _label = 5
                        continue
                    } else {
                        _memo.results.push(_KotlinParser_Item(_start_i5, _index.element, _memo.input, _res5.filterNotNull(), true))
                    }

                    _label = 3
                }
                // AND 3
                3 -> {
                    val _r3_2 = _memo.results.pop()
                    val _r3_1 = _memo.results.pop()

                    if (_r3_1 != null && _r3_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i3, _index.element, _memo.input, (_r3_1.results + _r3_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i3
                    }

                    // AND shortcut 2
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 2
                        continue
                    }

                    // AND 8
                    _start_i8 = _index.element

                    // AND 9
                    _start_i9 = _index.element

                    // AND 10
                    _start_i10 = _index.element

                    // CALLORVAR expression
                    var _r11: _KotlinParser_Item? = null
                    _r11 = _MemoCall(_memo, "expression", _index.element, ::expression, null)
                    if (_r11 != null) _index.element = _r11.nextIndex

                    // AND shortcut 10
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 10
                        continue
                    }

                    // STAR 12
                    _start_i12 = _index.element
                    _label = 12
                }
                // STAR 12
                12 -> {
                    // AND 13
                    _start_i13 = _index.element

                    // AND 14
                    _start_i14 = _index.element

                    // AND 15
                    _start_i15 = _index.element

                    // STAR 16
                    _start_i16 = _index.element
                    _label = 16
                }
                // STAR 16
                16 -> {
                    // CALLORVAR NL
                    var _r17: _KotlinParser_Item? = null
                    _r17 = _MemoCall(_memo, "NL", _index.element, ::NL, null)
                    if (_r17 != null) _index.element = _r17.nextIndex

                    // STAR 16
                    val _r16 = _memo.results.pop()
                    if (_r16 != null) {
                        _res16 += _r16.results
                        _label = 16
                        continue
                    } else {
                        _memo.results.push(_KotlinParser_Item(_start_i16, _index.element, _memo.input, _res16.filterNotNull(), true))
                    }

                    // AND shortcut 15
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 15
                        continue
                    }

                    // CALLORVAR COMMA
                    var _r18: _KotlinParser_Item? = null
                    _r18 = _MemoCall(_memo, "COMMA", _index.element, ::COMMA, null)
                    if (_r18 != null) _index.element = _r18.nextIndex

                    _label = 15
                }
                // AND 15
                15 -> {
                    val _r15_2 = _memo.results.pop()
                    val _r15_1 = _memo.results.pop()

                    if (_r15_1 != null && _r15_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i15, _index.element, _memo.input, (_r15_1.results + _r15_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i15
                    }

                    // AND shortcut 14
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 14
                        continue
                    }

                    // STAR 19
                    _start_i19 = _index.element
                    _label = 19
                }
                // STAR 19
                19 -> {
                    // CALLORVAR NL
                    var _r20: _KotlinParser_Item? = null
                    _r20 = _MemoCall(_memo, "NL", _index.element, ::NL, null)
                    if (_r20 != null) _index.element = _r20.nextIndex

                    // STAR 19
                    val _r19 = _memo.results.pop()
                    if (_r19 != null) {
                        _res19 += _r19.results
                        _label = 19
                        continue
                    } else {
                        _memo.results.push(_KotlinParser_Item(_start_i19, _index.element, _memo.input, _res19.filterNotNull(), true))
                    }

                    _label = 14
                }
                // AND 14
                14 -> {
                    val _r14_2 = _memo.results.pop()
                    val _r14_1 = _memo.results.pop()

                    if (_r14_1 != null && _r14_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i14, _index.element, _memo.input, (_r14_1.results + _r14_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i14
                    }

                    // AND shortcut 13
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 13
                        continue
                    }

                    // CALLORVAR expression
                    var _r21: _KotlinParser_Item? = null
                    _r21 = _MemoCall(_memo, "expression", _index.element, ::expression, null)
                    if (_r21 != null) _index.element = _r21.nextIndex

                    _label = 13
                }
                // AND 13
                13 -> {
                    val _r13_2 = _memo.results.pop()
                    val _r13_1 = _memo.results.pop()

                    if (_r13_1 != null && _r13_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i13, _index.element, _memo.input, (_r13_1.results + _r13_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i13
                    }

                    // STAR 12
                    val _r12 = _memo.results.pop()
                    if (_r12 != null) {
                        _res12 += _r12.results
                        _label = 12
                        continue
                    } else {
                        _memo.results.push(_KotlinParser_Item(_start_i12, _index.element, _memo.input, _res12.filterNotNull(), true))
                    }

                    _label = 10
                }
                // AND 10
                10 -> {
                    val _r10_2 = _memo.results.pop()
                    val _r10_1 = _memo.results.pop()

                    if (_r10_1 != null && _r10_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i10, _index.element, _memo.input, (_r10_1.results + _r10_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i10
                    }

                    // AND shortcut 9
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 9
                        continue
                    }

                    // AND 23
                    _start_i23 = _index.element

                    // STAR 24
                    _start_i24 = _index.element
                    _label = 24
                }
                // STAR 24
                24 -> {
                    // CALLORVAR NL
                    var _r25: _KotlinParser_Item? = null
                    _r25 = _MemoCall(_memo, "NL", _index.element, ::NL, null)
                    if (_r25 != null) _index.element = _r25.nextIndex

                    // STAR 24
                    val _r24 = _memo.results.pop()
                    if (_r24 != null) {
                        _res24 += _r24.results
                        _label = 24
                        continue
                    } else {
                        _memo.results.push(_KotlinParser_Item(_start_i24, _index.element, _memo.input, _res24.filterNotNull(), true))
                    }

                    // AND shortcut 23
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 23
                        continue
                    }

                    // CALLORVAR COMMA
                    var _r26: _KotlinParser_Item? = null
                    _r26 = _MemoCall(_memo, "COMMA", _index.element, ::COMMA, null)
                    if (_r26 != null) _index.element = _r26.nextIndex

                    _label = 23
                }
                // AND 23
                23 -> {
                    val _r23_2 = _memo.results.pop()
                    val _r23_1 = _memo.results.pop()

                    if (_r23_1 != null && _r23_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i23, _index.element, _memo.input, (_r23_1.results + _r23_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i23
                    }

                    // QUES 22
                    if (_memo.results.peek() == null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_index.element, _memo.input))
                    }
                    _label = 9
                }
                // AND 9
                9 -> {
                    val _r9_2 = _memo.results.pop()
                    val _r9_1 = _memo.results.pop()

                    if (_r9_1 != null && _r9_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i9, _index.element, _memo.input, (_r9_1.results + _r9_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i9
                    }

                    // AND shortcut 8
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 8
                        continue
                    }

                    // STAR 27
                    _start_i27 = _index.element
                    _label = 27
                }
                // STAR 27
                27 -> {
                    // CALLORVAR NL
                    var _r28: _KotlinParser_Item? = null
                    _r28 = _MemoCall(_memo, "NL", _index.element, ::NL, null)
                    if (_r28 != null) _index.element = _r28.nextIndex

                    // STAR 27
                    val _r27 = _memo.results.pop()
                    if (_r27 != null) {
                        _res27 += _r27.results
                        _label = 27
                        continue
                    } else {
                        _memo.results.push(_KotlinParser_Item(_start_i27, _index.element, _memo.input, _res27.filterNotNull(), true))
                    }

                    _label = 8
                }
                // AND 8
                8 -> {
                    val _r8_2 = _memo.results.pop()
                    val _r8_1 = _memo.results.pop()

                    if (_r8_1 != null && _r8_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i8, _index.element, _memo.input, (_r8_1.results + _r8_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i8
                    }

                    // QUES 7
                    if (_memo.results.peek() == null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_index.element, _memo.input))
                    }
                    _label = 2
                }
                // AND 2
                2 -> {
                    val _r2_2 = _memo.results.pop()
                    val _r2_1 = _memo.results.pop()

                    if (_r2_1 != null && _r2_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i2, _index.element, _memo.input, (_r2_1.results + _r2_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i2
                    }

                    // AND shortcut 1
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 1
                        continue
                    }

                    // CALLORVAR RSQUARE
                    var _r29: _KotlinParser_Item? = null
                    _r29 = _MemoCall(_memo, "RSQUARE", _index.element, ::RSQUARE, null)
                    if (_r29 != null) _index.element = _r29.nextIndex

                    _label = 1
                }
                // AND 1
                1 -> {
                    val _r1_2 = _memo.results.pop()
                    val _r1_1 = _memo.results.pop()

                    if (_r1_1 != null && _r1_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i1, _index.element, _memo.input, (_r1_1.results + _r1_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i1
                    }

                    // ACT 0
                    val _r0 = _memo.results.peek()
                    if (_r0 != null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_r0.startIndex, _r0.nextIndex, _memo.input, _Thunk({ AST.CollectionLiteral(it.l) }, _r0), true))
                    }

                    break
                }
            }
        }
    }


    open fun literalConstant(_memo: _KotlinParser_Memo, __index: Int, _args: _KotlinParser_Args?) {
        val _index = Ref.IntRef()
        _index.element = __index

        val _arg_index = Ref.IntRef()
        val _arg_input_index = Ref.IntRef()

        // OR 0
        var _start_i0 = _index.element

        // OR 1
        var _start_i1 = _index.element

        // OR 2
        var _start_i2 = _index.element

        // OR 3
        var _start_i3 = _index.element

        // OR 4
        var _start_i4 = _index.element

        // OR 5
        var _start_i5 = _index.element

        var _label = -1
        while(true) {
            when(_label) {
                -1 -> {
                    // OR 0
                    _start_i0 = _index.element

                    // OR 1
                    _start_i1 = _index.element

                    // OR 2
                    _start_i2 = _index.element

                    // OR 3
                    _start_i3 = _index.element

                    // OR 4
                    _start_i4 = _index.element

                    // OR 5
                    _start_i5 = _index.element

                    // CALLORVAR BooleanLiteral
                    var _r6: _KotlinParser_Item? = null
                    _r6 = _MemoCall(_memo, "BooleanLiteral", _index.element, ::BooleanLiteral, null)
                    if (_r6 != null) _index.element = _r6.nextIndex

                    // OR shortcut 5
                    if (_memo.results.peek() == null) {
                        _memo.results.pop()
                        _index.element = _start_i5
                    } else {
                        _label = 5
                        continue
                    }

                    // CALLORVAR IntegerLiteral
                    var _r7: _KotlinParser_Item? = null
                    _r7 = _MemoCall(_memo, "IntegerLiteral", _index.element, ::IntegerLiteral, null)
                    if (_r7 != null) _index.element = _r7.nextIndex

                    _label = 5
                }
                // OR 5
                5 -> {
                    // OR shortcut 4
                    if (_memo.results.peek() == null) {
                        _memo.results.pop()
                        _index.element = _start_i4
                    } else {
                        _label = 4
                        continue
                    }

                    // CALLORVAR CharacterLiteral
                    var _r8: _KotlinParser_Item? = null
                    _r8 = _MemoCall(_memo, "CharacterLiteral", _index.element, ::CharacterLiteral, null)
                    if (_r8 != null) _index.element = _r8.nextIndex

                    _label = 4
                }
                // OR 4
                4 -> {
                    // OR shortcut 3
                    if (_memo.results.peek() == null) {
                        _memo.results.pop()
                        _index.element = _start_i3
                    } else {
                        _label = 3
                        continue
                    }

                    // CALLORVAR RealLiteral
                    var _r9: _KotlinParser_Item? = null
                    _r9 = _MemoCall(_memo, "RealLiteral", _index.element, ::RealLiteral, null)
                    if (_r9 != null) _index.element = _r9.nextIndex

                    _label = 3
                }
                // OR 3
                3 -> {
                    // OR shortcut 2
                    if (_memo.results.peek() == null) {
                        _memo.results.pop()
                        _index.element = _start_i2
                    } else {
                        _label = 2
                        continue
                    }

                    // CALLORVAR NullLiteral
                    var _r10: _KotlinParser_Item? = null
                    _r10 = _MemoCall(_memo, "NullLiteral", _index.element, ::NullLiteral, null)
                    if (_r10 != null) _index.element = _r10.nextIndex

                    _label = 2
                }
                // OR 2
                2 -> {
                    // OR shortcut 1
                    if (_memo.results.peek() == null) {
                        _memo.results.pop()
                        _index.element = _start_i1
                    } else {
                        _label = 1
                        continue
                    }

                    // CALLORVAR LongLiteral
                    var _r11: _KotlinParser_Item? = null
                    _r11 = _MemoCall(_memo, "LongLiteral", _index.element, ::LongLiteral, null)
                    if (_r11 != null) _index.element = _r11.nextIndex

                    _label = 1
                }
                // OR 1
                1 -> {
                    // OR shortcut 0
                    if (_memo.results.peek() == null) {
                        _memo.results.pop()
                        _index.element = _start_i0
                    } else {
                        _label = 0
                        continue
                    }

                    // CALLORVAR UnsignedLiteral
                    var _r12: _KotlinParser_Item? = null
                    _r12 = _MemoCall(_memo, "UnsignedLiteral", _index.element, ::UnsignedLiteral, null)
                    if (_r12 != null) _index.element = _r12.nextIndex

                    _label = 0
                }
                // OR 0
                0 -> {
                    break
                }
            }
        }
    }


    open fun lambdaLiteral(_memo: _KotlinParser_Memo, __index: Int, _args: _KotlinParser_Args?) {
        val _index = Ref.IntRef()
        _index.element = __index

        val _arg_index = Ref.IntRef()
        val _arg_input_index = Ref.IntRef()

        var params: _KotlinParser_Item? = null
        var stmts: _KotlinParser_Item? = null

        // AND 1
        var _start_i1 = _index.element

        // AND 2
        var _start_i2 = _index.element

        // AND 3
        var _start_i3 = _index.element

        // AND 4
        var _start_i4 = _index.element

        // AND 5
        var _start_i5 = _index.element

        // STAR 7
        var _start_i7 = _index.element
        val _inp7 = arrayListOf<Token?>()
        val _res7 = arrayListOf<AST.AstNode?>()

        // AND 11
        var _start_i11 = _index.element

        // AND 12
        var _start_i12 = _index.element

        // AND 13
        var _start_i13 = _index.element

        // STAR 16
        var _start_i16 = _index.element
        val _inp16 = arrayListOf<Token?>()
        val _res16 = arrayListOf<AST.AstNode?>()

        // STAR 19
        var _start_i19 = _index.element
        val _inp19 = arrayListOf<Token?>()
        val _res19 = arrayListOf<AST.AstNode?>()

        // STAR 23
        var _start_i23 = _index.element
        val _inp23 = arrayListOf<Token?>()
        val _res23 = arrayListOf<AST.AstNode?>()

        var _label = -1
        while(true) {
            when(_label) {
                -1 -> {
                    // AND 1
                    _start_i1 = _index.element

                    // AND 2
                    _start_i2 = _index.element

                    // AND 3
                    _start_i3 = _index.element

                    // AND 4
                    _start_i4 = _index.element

                    // AND 5
                    _start_i5 = _index.element

                    // CALLORVAR LCURL
                    var _r6: _KotlinParser_Item? = null
                    _r6 = _MemoCall(_memo, "LCURL", _index.element, ::LCURL, null)
                    if (_r6 != null) _index.element = _r6.nextIndex

                    // AND shortcut 5
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 5
                        continue
                    }

                    // STAR 7
                    _start_i7 = _index.element
                    _label = 7
                }
                // STAR 7
                7 -> {
                    // CALLORVAR NL
                    var _r8: _KotlinParser_Item? = null
                    _r8 = _MemoCall(_memo, "NL", _index.element, ::NL, null)
                    if (_r8 != null) _index.element = _r8.nextIndex

                    // STAR 7
                    val _r7 = _memo.results.pop()
                    if (_r7 != null) {
                        _res7 += _r7.results
                        _label = 7
                        continue
                    } else {
                        _memo.results.push(_KotlinParser_Item(_start_i7, _index.element, _memo.input, _res7.filterNotNull(), true))
                    }

                    _label = 5
                }
                // AND 5
                5 -> {
                    val _r5_2 = _memo.results.pop()
                    val _r5_1 = _memo.results.pop()

                    if (_r5_1 != null && _r5_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i5, _index.element, _memo.input, (_r5_1.results + _r5_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i5
                    }

                    // AND shortcut 4
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 4
                        continue
                    }

                    // AND 11
                    _start_i11 = _index.element

                    // AND 12
                    _start_i12 = _index.element

                    // AND 13
                    _start_i13 = _index.element

                    // CALLORVAR lambdaParameters
                    var _r15: _KotlinParser_Item? = null
                    _r15 = _MemoCall(_memo, "lambdaParameters", _index.element, ::lambdaParameters, null)
                    if (_r15 != null) _index.element = _r15.nextIndex

                    // QUES 14
                    if (_memo.results.peek() == null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_index.element, _memo.input))
                    }
                    // AND shortcut 13
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 13
                        continue
                    }

                    // STAR 16
                    _start_i16 = _index.element
                    _label = 16
                }
                // STAR 16
                16 -> {
                    // CALLORVAR NL
                    var _r17: _KotlinParser_Item? = null
                    _r17 = _MemoCall(_memo, "NL", _index.element, ::NL, null)
                    if (_r17 != null) _index.element = _r17.nextIndex

                    // STAR 16
                    val _r16 = _memo.results.pop()
                    if (_r16 != null) {
                        _res16 += _r16.results
                        _label = 16
                        continue
                    } else {
                        _memo.results.push(_KotlinParser_Item(_start_i16, _index.element, _memo.input, _res16.filterNotNull(), true))
                    }

                    _label = 13
                }
                // AND 13
                13 -> {
                    val _r13_2 = _memo.results.pop()
                    val _r13_1 = _memo.results.pop()

                    if (_r13_1 != null && _r13_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i13, _index.element, _memo.input, (_r13_1.results + _r13_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i13
                    }

                    // AND shortcut 12
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 12
                        continue
                    }

                    // CALLORVAR ARROW
                    var _r18: _KotlinParser_Item? = null
                    _r18 = _MemoCall(_memo, "ARROW", _index.element, ::ARROW, null)
                    if (_r18 != null) _index.element = _r18.nextIndex

                    _label = 12
                }
                // AND 12
                12 -> {
                    val _r12_2 = _memo.results.pop()
                    val _r12_1 = _memo.results.pop()

                    if (_r12_1 != null && _r12_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i12, _index.element, _memo.input, (_r12_1.results + _r12_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i12
                    }

                    // AND shortcut 11
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 11
                        continue
                    }

                    // STAR 19
                    _start_i19 = _index.element
                    _label = 19
                }
                // STAR 19
                19 -> {
                    // CALLORVAR NL
                    var _r20: _KotlinParser_Item? = null
                    _r20 = _MemoCall(_memo, "NL", _index.element, ::NL, null)
                    if (_r20 != null) _index.element = _r20.nextIndex

                    // STAR 19
                    val _r19 = _memo.results.pop()
                    if (_r19 != null) {
                        _res19 += _r19.results
                        _label = 19
                        continue
                    } else {
                        _memo.results.push(_KotlinParser_Item(_start_i19, _index.element, _memo.input, _res19.filterNotNull(), true))
                    }

                    _label = 11
                }
                // AND 11
                11 -> {
                    val _r11_2 = _memo.results.pop()
                    val _r11_1 = _memo.results.pop()

                    if (_r11_1 != null && _r11_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i11, _index.element, _memo.input, (_r11_1.results + _r11_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i11
                    }

                    // QUES 10
                    if (_memo.results.peek() == null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_index.element, _memo.input))
                    }
                    // BIND params
                    params = _memo.results.peek()

                    _label = 4
                }
                // AND 4
                4 -> {
                    val _r4_2 = _memo.results.pop()
                    val _r4_1 = _memo.results.pop()

                    if (_r4_1 != null && _r4_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i4, _index.element, _memo.input, (_r4_1.results + _r4_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i4
                    }

                    // AND shortcut 3
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 3
                        continue
                    }

                    // CALLORVAR statements
                    var _r22: _KotlinParser_Item? = null
                    _r22 = _MemoCall(_memo, "statements", _index.element, ::statements, null)
                    if (_r22 != null) _index.element = _r22.nextIndex

                    // BIND stmts
                    stmts = _memo.results.peek()

                    _label = 3
                }
                // AND 3
                3 -> {
                    val _r3_2 = _memo.results.pop()
                    val _r3_1 = _memo.results.pop()

                    if (_r3_1 != null && _r3_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i3, _index.element, _memo.input, (_r3_1.results + _r3_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i3
                    }

                    // AND shortcut 2
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 2
                        continue
                    }

                    // STAR 23
                    _start_i23 = _index.element
                    _label = 23
                }
                // STAR 23
                23 -> {
                    // CALLORVAR NL
                    var _r24: _KotlinParser_Item? = null
                    _r24 = _MemoCall(_memo, "NL", _index.element, ::NL, null)
                    if (_r24 != null) _index.element = _r24.nextIndex

                    // STAR 23
                    val _r23 = _memo.results.pop()
                    if (_r23 != null) {
                        _res23 += _r23.results
                        _label = 23
                        continue
                    } else {
                        _memo.results.push(_KotlinParser_Item(_start_i23, _index.element, _memo.input, _res23.filterNotNull(), true))
                    }

                    _label = 2
                }
                // AND 2
                2 -> {
                    val _r2_2 = _memo.results.pop()
                    val _r2_1 = _memo.results.pop()

                    if (_r2_1 != null && _r2_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i2, _index.element, _memo.input, (_r2_1.results + _r2_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i2
                    }

                    // AND shortcut 1
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 1
                        continue
                    }

                    // CALLORVAR RCURL
                    var _r25: _KotlinParser_Item? = null
                    _r25 = _MemoCall(_memo, "RCURL", _index.element, ::RCURL, null)
                    if (_r25 != null) _index.element = _r25.nextIndex

                    _label = 1
                }
                // AND 1
                1 -> {
                    val _r1_2 = _memo.results.pop()
                    val _r1_1 = _memo.results.pop()

                    if (_r1_1 != null && _r1_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i1, _index.element, _memo.input, (_r1_1.results + _r1_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i1
                    }

                    // ACT 0
                    val _r0 = _memo.results.peek()
                    if (_r0 != null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_r0.startIndex, _r0.nextIndex, _memo.input, _Thunk({ AST.LambdaLiteral(params.l, stmts.l) }, _r0), true))
                    }

                    break
                }
            }
        }
    }


    open fun lambdaParameters(_memo: _KotlinParser_Memo, __index: Int, _args: _KotlinParser_Args?) {
        val _index = Ref.IntRef()
        _index.element = __index

        val _arg_index = Ref.IntRef()
        val _arg_input_index = Ref.IntRef()

        // AND 1
        var _start_i1 = _index.element

        // AND 2
        var _start_i2 = _index.element

        // STAR 4
        var _start_i4 = _index.element
        val _inp4 = arrayListOf<Token?>()
        val _res4 = arrayListOf<AST.AstNode?>()

        // AND 5
        var _start_i5 = _index.element

        // AND 6
        var _start_i6 = _index.element

        // AND 7
        var _start_i7 = _index.element

        // STAR 8
        var _start_i8 = _index.element
        val _inp8 = arrayListOf<Token?>()
        val _res8 = arrayListOf<AST.AstNode?>()

        // STAR 11
        var _start_i11 = _index.element
        val _inp11 = arrayListOf<Token?>()
        val _res11 = arrayListOf<AST.AstNode?>()

        // AND 15
        var _start_i15 = _index.element

        // STAR 16
        var _start_i16 = _index.element
        val _inp16 = arrayListOf<Token?>()
        val _res16 = arrayListOf<AST.AstNode?>()

        var _label = -1
        while(true) {
            when(_label) {
                -1 -> {
                    // AND 1
                    _start_i1 = _index.element

                    // AND 2
                    _start_i2 = _index.element

                    // CALLORVAR lambdaParameter
                    var _r3: _KotlinParser_Item? = null
                    _r3 = _MemoCall(_memo, "lambdaParameter", _index.element, ::lambdaParameter, null)
                    if (_r3 != null) _index.element = _r3.nextIndex

                    // AND shortcut 2
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 2
                        continue
                    }

                    // STAR 4
                    _start_i4 = _index.element
                    _label = 4
                }
                // STAR 4
                4 -> {
                    // AND 5
                    _start_i5 = _index.element

                    // AND 6
                    _start_i6 = _index.element

                    // AND 7
                    _start_i7 = _index.element

                    // STAR 8
                    _start_i8 = _index.element
                    _label = 8
                }
                // STAR 8
                8 -> {
                    // CALLORVAR NL
                    var _r9: _KotlinParser_Item? = null
                    _r9 = _MemoCall(_memo, "NL", _index.element, ::NL, null)
                    if (_r9 != null) _index.element = _r9.nextIndex

                    // STAR 8
                    val _r8 = _memo.results.pop()
                    if (_r8 != null) {
                        _res8 += _r8.results
                        _label = 8
                        continue
                    } else {
                        _memo.results.push(_KotlinParser_Item(_start_i8, _index.element, _memo.input, _res8.filterNotNull(), true))
                    }

                    // AND shortcut 7
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 7
                        continue
                    }

                    // CALLORVAR COMMA
                    var _r10: _KotlinParser_Item? = null
                    _r10 = _MemoCall(_memo, "COMMA", _index.element, ::COMMA, null)
                    if (_r10 != null) _index.element = _r10.nextIndex

                    _label = 7
                }
                // AND 7
                7 -> {
                    val _r7_2 = _memo.results.pop()
                    val _r7_1 = _memo.results.pop()

                    if (_r7_1 != null && _r7_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i7, _index.element, _memo.input, (_r7_1.results + _r7_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i7
                    }

                    // AND shortcut 6
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 6
                        continue
                    }

                    // STAR 11
                    _start_i11 = _index.element
                    _label = 11
                }
                // STAR 11
                11 -> {
                    // CALLORVAR NL
                    var _r12: _KotlinParser_Item? = null
                    _r12 = _MemoCall(_memo, "NL", _index.element, ::NL, null)
                    if (_r12 != null) _index.element = _r12.nextIndex

                    // STAR 11
                    val _r11 = _memo.results.pop()
                    if (_r11 != null) {
                        _res11 += _r11.results
                        _label = 11
                        continue
                    } else {
                        _memo.results.push(_KotlinParser_Item(_start_i11, _index.element, _memo.input, _res11.filterNotNull(), true))
                    }

                    _label = 6
                }
                // AND 6
                6 -> {
                    val _r6_2 = _memo.results.pop()
                    val _r6_1 = _memo.results.pop()

                    if (_r6_1 != null && _r6_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i6, _index.element, _memo.input, (_r6_1.results + _r6_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i6
                    }

                    // AND shortcut 5
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 5
                        continue
                    }

                    // CALLORVAR lambdaParameter
                    var _r13: _KotlinParser_Item? = null
                    _r13 = _MemoCall(_memo, "lambdaParameter", _index.element, ::lambdaParameter, null)
                    if (_r13 != null) _index.element = _r13.nextIndex

                    _label = 5
                }
                // AND 5
                5 -> {
                    val _r5_2 = _memo.results.pop()
                    val _r5_1 = _memo.results.pop()

                    if (_r5_1 != null && _r5_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i5, _index.element, _memo.input, (_r5_1.results + _r5_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i5
                    }

                    // STAR 4
                    val _r4 = _memo.results.pop()
                    if (_r4 != null) {
                        _res4 += _r4.results
                        _label = 4
                        continue
                    } else {
                        _memo.results.push(_KotlinParser_Item(_start_i4, _index.element, _memo.input, _res4.filterNotNull(), true))
                    }

                    _label = 2
                }
                // AND 2
                2 -> {
                    val _r2_2 = _memo.results.pop()
                    val _r2_1 = _memo.results.pop()

                    if (_r2_1 != null && _r2_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i2, _index.element, _memo.input, (_r2_1.results + _r2_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i2
                    }

                    // AND shortcut 1
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 1
                        continue
                    }

                    // AND 15
                    _start_i15 = _index.element

                    // STAR 16
                    _start_i16 = _index.element
                    _label = 16
                }
                // STAR 16
                16 -> {
                    // CALLORVAR NL
                    var _r17: _KotlinParser_Item? = null
                    _r17 = _MemoCall(_memo, "NL", _index.element, ::NL, null)
                    if (_r17 != null) _index.element = _r17.nextIndex

                    // STAR 16
                    val _r16 = _memo.results.pop()
                    if (_r16 != null) {
                        _res16 += _r16.results
                        _label = 16
                        continue
                    } else {
                        _memo.results.push(_KotlinParser_Item(_start_i16, _index.element, _memo.input, _res16.filterNotNull(), true))
                    }

                    // AND shortcut 15
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 15
                        continue
                    }

                    // CALLORVAR COMMA
                    var _r18: _KotlinParser_Item? = null
                    _r18 = _MemoCall(_memo, "COMMA", _index.element, ::COMMA, null)
                    if (_r18 != null) _index.element = _r18.nextIndex

                    _label = 15
                }
                // AND 15
                15 -> {
                    val _r15_2 = _memo.results.pop()
                    val _r15_1 = _memo.results.pop()

                    if (_r15_1 != null && _r15_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i15, _index.element, _memo.input, (_r15_1.results + _r15_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i15
                    }

                    // QUES 14
                    if (_memo.results.peek() == null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_index.element, _memo.input))
                    }
                    _label = 1
                }
                // AND 1
                1 -> {
                    val _r1_2 = _memo.results.pop()
                    val _r1_1 = _memo.results.pop()

                    if (_r1_1 != null && _r1_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i1, _index.element, _memo.input, (_r1_1.results + _r1_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i1
                    }

                    // ACT 0
                    val _r0 = _memo.results.peek()
                    if (_r0 != null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_r0.startIndex, _r0.nextIndex, _memo.input, _Thunk({ it.l }, _r0), true))
                    }

                    break
                }
            }
        }
    }


    open fun lambdaParameter(_memo: _KotlinParser_Memo, __index: Int, _args: _KotlinParser_Args?) {
        val _index = Ref.IntRef()
        _index.element = __index

        val _arg_index = Ref.IntRef()
        val _arg_input_index = Ref.IntRef()

        var mvd: _KotlinParser_Item? = null
        var t: _KotlinParser_Item? = null

        // AND 1
        var _start_i1 = _index.element

        // AND 5
        var _start_i5 = _index.element

        // AND 6
        var _start_i6 = _index.element

        // AND 7
        var _start_i7 = _index.element

        // STAR 8
        var _start_i8 = _index.element
        val _inp8 = arrayListOf<Token?>()
        val _res8 = arrayListOf<AST.AstNode?>()

        // STAR 11
        var _start_i11 = _index.element
        val _inp11 = arrayListOf<Token?>()
        val _res11 = arrayListOf<AST.AstNode?>()

        var _label = -1
        while(true) {
            when(_label) {
                -1 -> {
                    // AND 1
                    _start_i1 = _index.element

                    // CALLORVAR varDecls
                    var _r3: _KotlinParser_Item? = null
                    _r3 = _MemoCall(_memo, "varDecls", _index.element, ::varDecls, null)
                    if (_r3 != null) _index.element = _r3.nextIndex

                    // BIND mvd
                    mvd = _memo.results.peek()

                    // AND shortcut 1
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 1
                        continue
                    }

                    // AND 5
                    _start_i5 = _index.element

                    // AND 6
                    _start_i6 = _index.element

                    // AND 7
                    _start_i7 = _index.element

                    // STAR 8
                    _start_i8 = _index.element
                    _label = 8
                }
                // STAR 8
                8 -> {
                    // CALLORVAR NL
                    var _r9: _KotlinParser_Item? = null
                    _r9 = _MemoCall(_memo, "NL", _index.element, ::NL, null)
                    if (_r9 != null) _index.element = _r9.nextIndex

                    // STAR 8
                    val _r8 = _memo.results.pop()
                    if (_r8 != null) {
                        _res8 += _r8.results
                        _label = 8
                        continue
                    } else {
                        _memo.results.push(_KotlinParser_Item(_start_i8, _index.element, _memo.input, _res8.filterNotNull(), true))
                    }

                    // AND shortcut 7
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 7
                        continue
                    }

                    // CALLORVAR COLON
                    var _r10: _KotlinParser_Item? = null
                    _r10 = _MemoCall(_memo, "COLON", _index.element, ::COLON, null)
                    if (_r10 != null) _index.element = _r10.nextIndex

                    _label = 7
                }
                // AND 7
                7 -> {
                    val _r7_2 = _memo.results.pop()
                    val _r7_1 = _memo.results.pop()

                    if (_r7_1 != null && _r7_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i7, _index.element, _memo.input, (_r7_1.results + _r7_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i7
                    }

                    // AND shortcut 6
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 6
                        continue
                    }

                    // STAR 11
                    _start_i11 = _index.element
                    _label = 11
                }
                // STAR 11
                11 -> {
                    // CALLORVAR NL
                    var _r12: _KotlinParser_Item? = null
                    _r12 = _MemoCall(_memo, "NL", _index.element, ::NL, null)
                    if (_r12 != null) _index.element = _r12.nextIndex

                    // STAR 11
                    val _r11 = _memo.results.pop()
                    if (_r11 != null) {
                        _res11 += _r11.results
                        _label = 11
                        continue
                    } else {
                        _memo.results.push(_KotlinParser_Item(_start_i11, _index.element, _memo.input, _res11.filterNotNull(), true))
                    }

                    _label = 6
                }
                // AND 6
                6 -> {
                    val _r6_2 = _memo.results.pop()
                    val _r6_1 = _memo.results.pop()

                    if (_r6_1 != null && _r6_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i6, _index.element, _memo.input, (_r6_1.results + _r6_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i6
                    }

                    // AND shortcut 5
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 5
                        continue
                    }

                    // CALLORVAR type
                    var _r14: _KotlinParser_Item? = null
                    _r14 = _MemoCall(_memo, "type", _index.element, ::type, null)
                    if (_r14 != null) _index.element = _r14.nextIndex

                    // BIND t
                    t = _memo.results.peek()

                    _label = 5
                }
                // AND 5
                5 -> {
                    val _r5_2 = _memo.results.pop()
                    val _r5_1 = _memo.results.pop()

                    if (_r5_1 != null && _r5_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i5, _index.element, _memo.input, (_r5_1.results + _r5_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i5
                    }

                    // QUES 4
                    if (_memo.results.peek() == null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_index.element, _memo.input))
                    }
                    _label = 1
                }
                // AND 1
                1 -> {
                    val _r1_2 = _memo.results.pop()
                    val _r1_1 = _memo.results.pop()

                    if (_r1_1 != null && _r1_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i1, _index.element, _memo.input, (_r1_1.results + _r1_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i1
                    }

                    // ACT 0
                    val _r0 = _memo.results.peek()
                    if (_r0 != null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_r0.startIndex, _r0.nextIndex, _memo.input, _Thunk({ AST.LambdaParameter(mvd.r, t.nr) }, _r0), true))
                    }

                    break
                }
            }
        }
    }


    open fun anonymousFunction(_memo: _KotlinParser_Memo, __index: Int, _args: _KotlinParser_Args?) {
        val _index = Ref.IntRef()
        _index.element = __index

        val _arg_index = Ref.IntRef()
        val _arg_input_index = Ref.IntRef()

        var t1: _KotlinParser_Item? = null
        var valueParams: _KotlinParser_Item? = null
        var t2: _KotlinParser_Item? = null
        var tcs: _KotlinParser_Item? = null
        var b: _KotlinParser_Item? = null

        // AND 1
        var _start_i1 = _index.element

        // AND 2
        var _start_i2 = _index.element

        // AND 3
        var _start_i3 = _index.element

        // AND 4
        var _start_i4 = _index.element

        // AND 5
        var _start_i5 = _index.element

        // AND 6
        var _start_i6 = _index.element

        // AND 9
        var _start_i9 = _index.element

        // AND 10
        var _start_i10 = _index.element

        // AND 11
        var _start_i11 = _index.element

        // STAR 12
        var _start_i12 = _index.element
        val _inp12 = arrayListOf<Token?>()
        val _res12 = arrayListOf<AST.AstNode?>()

        // STAR 16
        var _start_i16 = _index.element
        val _inp16 = arrayListOf<Token?>()
        val _res16 = arrayListOf<AST.AstNode?>()

        // STAR 19
        var _start_i19 = _index.element
        val _inp19 = arrayListOf<Token?>()
        val _res19 = arrayListOf<AST.AstNode?>()

        // AND 24
        var _start_i24 = _index.element

        // AND 25
        var _start_i25 = _index.element

        // AND 26
        var _start_i26 = _index.element

        // STAR 27
        var _start_i27 = _index.element
        val _inp27 = arrayListOf<Token?>()
        val _res27 = arrayListOf<AST.AstNode?>()

        // STAR 30
        var _start_i30 = _index.element
        val _inp30 = arrayListOf<Token?>()
        val _res30 = arrayListOf<AST.AstNode?>()

        // AND 35
        var _start_i35 = _index.element

        // STAR 36
        var _start_i36 = _index.element
        val _inp36 = arrayListOf<Token?>()
        val _res36 = arrayListOf<AST.AstNode?>()

        // AND 41
        var _start_i41 = _index.element

        // STAR 42
        var _start_i42 = _index.element
        val _inp42 = arrayListOf<Token?>()
        val _res42 = arrayListOf<AST.AstNode?>()

        var _label = -1
        while(true) {
            when(_label) {
                -1 -> {
                    // AND 1
                    _start_i1 = _index.element

                    // AND 2
                    _start_i2 = _index.element

                    // AND 3
                    _start_i3 = _index.element

                    // AND 4
                    _start_i4 = _index.element

                    // AND 5
                    _start_i5 = _index.element

                    // AND 6
                    _start_i6 = _index.element

                    // CALLORVAR FUN
                    var _r7: _KotlinParser_Item? = null
                    _r7 = _MemoCall(_memo, "FUN", _index.element, ::FUN, null)
                    if (_r7 != null) _index.element = _r7.nextIndex

                    // AND shortcut 6
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 6
                        continue
                    }

                    // AND 9
                    _start_i9 = _index.element

                    // AND 10
                    _start_i10 = _index.element

                    // AND 11
                    _start_i11 = _index.element

                    // STAR 12
                    _start_i12 = _index.element
                    _label = 12
                }
                // STAR 12
                12 -> {
                    // CALLORVAR NL
                    var _r13: _KotlinParser_Item? = null
                    _r13 = _MemoCall(_memo, "NL", _index.element, ::NL, null)
                    if (_r13 != null) _index.element = _r13.nextIndex

                    // STAR 12
                    val _r12 = _memo.results.pop()
                    if (_r12 != null) {
                        _res12 += _r12.results
                        _label = 12
                        continue
                    } else {
                        _memo.results.push(_KotlinParser_Item(_start_i12, _index.element, _memo.input, _res12.filterNotNull(), true))
                    }

                    // AND shortcut 11
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 11
                        continue
                    }

                    // CALLORVAR type
                    var _r15: _KotlinParser_Item? = null
                    _r15 = _MemoCall(_memo, "type", _index.element, ::type, null)
                    if (_r15 != null) _index.element = _r15.nextIndex

                    // BIND t1
                    t1 = _memo.results.peek()

                    _label = 11
                }
                // AND 11
                11 -> {
                    val _r11_2 = _memo.results.pop()
                    val _r11_1 = _memo.results.pop()

                    if (_r11_1 != null && _r11_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i11, _index.element, _memo.input, (_r11_1.results + _r11_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i11
                    }

                    // AND shortcut 10
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 10
                        continue
                    }

                    // STAR 16
                    _start_i16 = _index.element
                    _label = 16
                }
                // STAR 16
                16 -> {
                    // CALLORVAR NL
                    var _r17: _KotlinParser_Item? = null
                    _r17 = _MemoCall(_memo, "NL", _index.element, ::NL, null)
                    if (_r17 != null) _index.element = _r17.nextIndex

                    // STAR 16
                    val _r16 = _memo.results.pop()
                    if (_r16 != null) {
                        _res16 += _r16.results
                        _label = 16
                        continue
                    } else {
                        _memo.results.push(_KotlinParser_Item(_start_i16, _index.element, _memo.input, _res16.filterNotNull(), true))
                    }

                    _label = 10
                }
                // AND 10
                10 -> {
                    val _r10_2 = _memo.results.pop()
                    val _r10_1 = _memo.results.pop()

                    if (_r10_1 != null && _r10_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i10, _index.element, _memo.input, (_r10_1.results + _r10_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i10
                    }

                    // AND shortcut 9
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 9
                        continue
                    }

                    // CALLORVAR DOT
                    var _r18: _KotlinParser_Item? = null
                    _r18 = _MemoCall(_memo, "DOT", _index.element, ::DOT, null)
                    if (_r18 != null) _index.element = _r18.nextIndex

                    _label = 9
                }
                // AND 9
                9 -> {
                    val _r9_2 = _memo.results.pop()
                    val _r9_1 = _memo.results.pop()

                    if (_r9_1 != null && _r9_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i9, _index.element, _memo.input, (_r9_1.results + _r9_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i9
                    }

                    // QUES 8
                    if (_memo.results.peek() == null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_index.element, _memo.input))
                    }
                    _label = 6
                }
                // AND 6
                6 -> {
                    val _r6_2 = _memo.results.pop()
                    val _r6_1 = _memo.results.pop()

                    if (_r6_1 != null && _r6_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i6, _index.element, _memo.input, (_r6_1.results + _r6_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i6
                    }

                    // AND shortcut 5
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 5
                        continue
                    }

                    // STAR 19
                    _start_i19 = _index.element
                    _label = 19
                }
                // STAR 19
                19 -> {
                    // CALLORVAR NL
                    var _r20: _KotlinParser_Item? = null
                    _r20 = _MemoCall(_memo, "NL", _index.element, ::NL, null)
                    if (_r20 != null) _index.element = _r20.nextIndex

                    // STAR 19
                    val _r19 = _memo.results.pop()
                    if (_r19 != null) {
                        _res19 += _r19.results
                        _label = 19
                        continue
                    } else {
                        _memo.results.push(_KotlinParser_Item(_start_i19, _index.element, _memo.input, _res19.filterNotNull(), true))
                    }

                    _label = 5
                }
                // AND 5
                5 -> {
                    val _r5_2 = _memo.results.pop()
                    val _r5_1 = _memo.results.pop()

                    if (_r5_1 != null && _r5_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i5, _index.element, _memo.input, (_r5_1.results + _r5_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i5
                    }

                    // AND shortcut 4
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 4
                        continue
                    }

                    // CALLORVAR parametersWithOptionalType
                    var _r22: _KotlinParser_Item? = null
                    _r22 = _MemoCall(_memo, "parametersWithOptionalType", _index.element, ::parametersWithOptionalType, null)
                    if (_r22 != null) _index.element = _r22.nextIndex

                    // BIND valueParams
                    valueParams = _memo.results.peek()

                    _label = 4
                }
                // AND 4
                4 -> {
                    val _r4_2 = _memo.results.pop()
                    val _r4_1 = _memo.results.pop()

                    if (_r4_1 != null && _r4_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i4, _index.element, _memo.input, (_r4_1.results + _r4_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i4
                    }

                    // AND shortcut 3
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 3
                        continue
                    }

                    // AND 24
                    _start_i24 = _index.element

                    // AND 25
                    _start_i25 = _index.element

                    // AND 26
                    _start_i26 = _index.element

                    // STAR 27
                    _start_i27 = _index.element
                    _label = 27
                }
                // STAR 27
                27 -> {
                    // CALLORVAR NL
                    var _r28: _KotlinParser_Item? = null
                    _r28 = _MemoCall(_memo, "NL", _index.element, ::NL, null)
                    if (_r28 != null) _index.element = _r28.nextIndex

                    // STAR 27
                    val _r27 = _memo.results.pop()
                    if (_r27 != null) {
                        _res27 += _r27.results
                        _label = 27
                        continue
                    } else {
                        _memo.results.push(_KotlinParser_Item(_start_i27, _index.element, _memo.input, _res27.filterNotNull(), true))
                    }

                    // AND shortcut 26
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 26
                        continue
                    }

                    // CALLORVAR COLON
                    var _r29: _KotlinParser_Item? = null
                    _r29 = _MemoCall(_memo, "COLON", _index.element, ::COLON, null)
                    if (_r29 != null) _index.element = _r29.nextIndex

                    _label = 26
                }
                // AND 26
                26 -> {
                    val _r26_2 = _memo.results.pop()
                    val _r26_1 = _memo.results.pop()

                    if (_r26_1 != null && _r26_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i26, _index.element, _memo.input, (_r26_1.results + _r26_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i26
                    }

                    // AND shortcut 25
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 25
                        continue
                    }

                    // STAR 30
                    _start_i30 = _index.element
                    _label = 30
                }
                // STAR 30
                30 -> {
                    // CALLORVAR NL
                    var _r31: _KotlinParser_Item? = null
                    _r31 = _MemoCall(_memo, "NL", _index.element, ::NL, null)
                    if (_r31 != null) _index.element = _r31.nextIndex

                    // STAR 30
                    val _r30 = _memo.results.pop()
                    if (_r30 != null) {
                        _res30 += _r30.results
                        _label = 30
                        continue
                    } else {
                        _memo.results.push(_KotlinParser_Item(_start_i30, _index.element, _memo.input, _res30.filterNotNull(), true))
                    }

                    _label = 25
                }
                // AND 25
                25 -> {
                    val _r25_2 = _memo.results.pop()
                    val _r25_1 = _memo.results.pop()

                    if (_r25_1 != null && _r25_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i25, _index.element, _memo.input, (_r25_1.results + _r25_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i25
                    }

                    // AND shortcut 24
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 24
                        continue
                    }

                    // CALLORVAR type
                    var _r33: _KotlinParser_Item? = null
                    _r33 = _MemoCall(_memo, "type", _index.element, ::type, null)
                    if (_r33 != null) _index.element = _r33.nextIndex

                    // BIND t2
                    t2 = _memo.results.peek()

                    _label = 24
                }
                // AND 24
                24 -> {
                    val _r24_2 = _memo.results.pop()
                    val _r24_1 = _memo.results.pop()

                    if (_r24_1 != null && _r24_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i24, _index.element, _memo.input, (_r24_1.results + _r24_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i24
                    }

                    // QUES 23
                    if (_memo.results.peek() == null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_index.element, _memo.input))
                    }
                    _label = 3
                }
                // AND 3
                3 -> {
                    val _r3_2 = _memo.results.pop()
                    val _r3_1 = _memo.results.pop()

                    if (_r3_1 != null && _r3_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i3, _index.element, _memo.input, (_r3_1.results + _r3_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i3
                    }

                    // AND shortcut 2
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 2
                        continue
                    }

                    // AND 35
                    _start_i35 = _index.element

                    // STAR 36
                    _start_i36 = _index.element
                    _label = 36
                }
                // STAR 36
                36 -> {
                    // CALLORVAR NL
                    var _r37: _KotlinParser_Item? = null
                    _r37 = _MemoCall(_memo, "NL", _index.element, ::NL, null)
                    if (_r37 != null) _index.element = _r37.nextIndex

                    // STAR 36
                    val _r36 = _memo.results.pop()
                    if (_r36 != null) {
                        _res36 += _r36.results
                        _label = 36
                        continue
                    } else {
                        _memo.results.push(_KotlinParser_Item(_start_i36, _index.element, _memo.input, _res36.filterNotNull(), true))
                    }

                    // AND shortcut 35
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 35
                        continue
                    }

                    // CALLORVAR typeConstraints
                    var _r39: _KotlinParser_Item? = null
                    _r39 = _MemoCall(_memo, "typeConstraints", _index.element, ::typeConstraints, null)
                    if (_r39 != null) _index.element = _r39.nextIndex

                    // BIND tcs
                    tcs = _memo.results.peek()

                    _label = 35
                }
                // AND 35
                35 -> {
                    val _r35_2 = _memo.results.pop()
                    val _r35_1 = _memo.results.pop()

                    if (_r35_1 != null && _r35_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i35, _index.element, _memo.input, (_r35_1.results + _r35_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i35
                    }

                    // QUES 34
                    if (_memo.results.peek() == null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_index.element, _memo.input))
                    }
                    _label = 2
                }
                // AND 2
                2 -> {
                    val _r2_2 = _memo.results.pop()
                    val _r2_1 = _memo.results.pop()

                    if (_r2_1 != null && _r2_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i2, _index.element, _memo.input, (_r2_1.results + _r2_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i2
                    }

                    // AND shortcut 1
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 1
                        continue
                    }

                    // AND 41
                    _start_i41 = _index.element

                    // STAR 42
                    _start_i42 = _index.element
                    _label = 42
                }
                // STAR 42
                42 -> {
                    // CALLORVAR NL
                    var _r43: _KotlinParser_Item? = null
                    _r43 = _MemoCall(_memo, "NL", _index.element, ::NL, null)
                    if (_r43 != null) _index.element = _r43.nextIndex

                    // STAR 42
                    val _r42 = _memo.results.pop()
                    if (_r42 != null) {
                        _res42 += _r42.results
                        _label = 42
                        continue
                    } else {
                        _memo.results.push(_KotlinParser_Item(_start_i42, _index.element, _memo.input, _res42.filterNotNull(), true))
                    }

                    // AND shortcut 41
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 41
                        continue
                    }

                    // CALLORVAR functionBody
                    var _r45: _KotlinParser_Item? = null
                    _r45 = _MemoCall(_memo, "functionBody", _index.element, ::functionBody, null)
                    if (_r45 != null) _index.element = _r45.nextIndex

                    // BIND b
                    b = _memo.results.peek()

                    _label = 41
                }
                // AND 41
                41 -> {
                    val _r41_2 = _memo.results.pop()
                    val _r41_1 = _memo.results.pop()

                    if (_r41_1 != null && _r41_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i41, _index.element, _memo.input, (_r41_1.results + _r41_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i41
                    }

                    // QUES 40
                    if (_memo.results.peek() == null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_index.element, _memo.input))
                    }
                    _label = 1
                }
                // AND 1
                1 -> {
                    val _r1_2 = _memo.results.pop()
                    val _r1_1 = _memo.results.pop()

                    if (_r1_1 != null && _r1_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i1, _index.element, _memo.input, (_r1_1.results + _r1_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i1
                    }

                    // ACT 0
                    val _r0 = _memo.results.peek()
                    if (_r0 != null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_r0.startIndex, _r0.nextIndex, _memo.input, _Thunk({ AST.AnonymousFunction(t1.nr, valueParams.l, t2.nr, tcs.l, b.nr) }, _r0), true))
                    }

                    break
                }
            }
        }
    }


    open fun functionLiteral(_memo: _KotlinParser_Memo, __index: Int, _args: _KotlinParser_Args?) {
        val _index = Ref.IntRef()
        _index.element = __index

        val _arg_index = Ref.IntRef()
        val _arg_input_index = Ref.IntRef()

        // OR 0
        var _start_i0 = _index.element

        var _label = -1
        while(true) {
            when(_label) {
                -1 -> {
                    // OR 0
                    _start_i0 = _index.element

                    // CALLORVAR lambdaLiteral
                    var _r1: _KotlinParser_Item? = null
                    _r1 = _MemoCall(_memo, "lambdaLiteral", _index.element, ::lambdaLiteral, null)
                    if (_r1 != null) _index.element = _r1.nextIndex

                    // OR shortcut 0
                    if (_memo.results.peek() == null) {
                        _memo.results.pop()
                        _index.element = _start_i0
                    } else {
                        _label = 0
                        continue
                    }

                    // CALLORVAR anonymousFunction
                    var _r2: _KotlinParser_Item? = null
                    _r2 = _MemoCall(_memo, "anonymousFunction", _index.element, ::anonymousFunction, null)
                    if (_r2 != null) _index.element = _r2.nextIndex

                    _label = 0
                }
                // OR 0
                0 -> {
                    break
                }
            }
        }
    }


    open fun objectLiteral(_memo: _KotlinParser_Memo, __index: Int, _args: _KotlinParser_Args?) {
        val _index = Ref.IntRef()
        _index.element = __index

        val _arg_index = Ref.IntRef()
        val _arg_input_index = Ref.IntRef()

        var dss: _KotlinParser_Item? = null
        var b: _KotlinParser_Item? = null

        // AND 1
        var _start_i1 = _index.element

        // AND 2
        var _start_i2 = _index.element

        // AND 5
        var _start_i5 = _index.element

        // AND 6
        var _start_i6 = _index.element

        // AND 7
        var _start_i7 = _index.element

        // AND 8
        var _start_i8 = _index.element

        // STAR 9
        var _start_i9 = _index.element
        val _inp9 = arrayListOf<Token?>()
        val _res9 = arrayListOf<AST.AstNode?>()

        // STAR 12
        var _start_i12 = _index.element
        val _inp12 = arrayListOf<Token?>()
        val _res12 = arrayListOf<AST.AstNode?>()

        // STAR 16
        var _start_i16 = _index.element
        val _inp16 = arrayListOf<Token?>()
        val _res16 = arrayListOf<AST.AstNode?>()

        // AND 19
        var _start_i19 = _index.element

        // STAR 20
        var _start_i20 = _index.element
        val _inp20 = arrayListOf<Token?>()
        val _res20 = arrayListOf<AST.AstNode?>()

        var _label = -1
        while(true) {
            when(_label) {
                -1 -> {
                    // AND 1
                    _start_i1 = _index.element

                    // AND 2
                    _start_i2 = _index.element

                    // CALLORVAR OBJECT
                    var _r3: _KotlinParser_Item? = null
                    _r3 = _MemoCall(_memo, "OBJECT", _index.element, ::OBJECT, null)
                    if (_r3 != null) _index.element = _r3.nextIndex

                    // AND shortcut 2
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 2
                        continue
                    }

                    // AND 5
                    _start_i5 = _index.element

                    // AND 6
                    _start_i6 = _index.element

                    // AND 7
                    _start_i7 = _index.element

                    // AND 8
                    _start_i8 = _index.element

                    // STAR 9
                    _start_i9 = _index.element
                    _label = 9
                }
                // STAR 9
                9 -> {
                    // CALLORVAR NL
                    var _r10: _KotlinParser_Item? = null
                    _r10 = _MemoCall(_memo, "NL", _index.element, ::NL, null)
                    if (_r10 != null) _index.element = _r10.nextIndex

                    // STAR 9
                    val _r9 = _memo.results.pop()
                    if (_r9 != null) {
                        _res9 += _r9.results
                        _label = 9
                        continue
                    } else {
                        _memo.results.push(_KotlinParser_Item(_start_i9, _index.element, _memo.input, _res9.filterNotNull(), true))
                    }

                    // AND shortcut 8
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 8
                        continue
                    }

                    // CALLORVAR COLON
                    var _r11: _KotlinParser_Item? = null
                    _r11 = _MemoCall(_memo, "COLON", _index.element, ::COLON, null)
                    if (_r11 != null) _index.element = _r11.nextIndex

                    _label = 8
                }
                // AND 8
                8 -> {
                    val _r8_2 = _memo.results.pop()
                    val _r8_1 = _memo.results.pop()

                    if (_r8_1 != null && _r8_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i8, _index.element, _memo.input, (_r8_1.results + _r8_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i8
                    }

                    // AND shortcut 7
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 7
                        continue
                    }

                    // STAR 12
                    _start_i12 = _index.element
                    _label = 12
                }
                // STAR 12
                12 -> {
                    // CALLORVAR NL
                    var _r13: _KotlinParser_Item? = null
                    _r13 = _MemoCall(_memo, "NL", _index.element, ::NL, null)
                    if (_r13 != null) _index.element = _r13.nextIndex

                    // STAR 12
                    val _r12 = _memo.results.pop()
                    if (_r12 != null) {
                        _res12 += _r12.results
                        _label = 12
                        continue
                    } else {
                        _memo.results.push(_KotlinParser_Item(_start_i12, _index.element, _memo.input, _res12.filterNotNull(), true))
                    }

                    _label = 7
                }
                // AND 7
                7 -> {
                    val _r7_2 = _memo.results.pop()
                    val _r7_1 = _memo.results.pop()

                    if (_r7_1 != null && _r7_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i7, _index.element, _memo.input, (_r7_1.results + _r7_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i7
                    }

                    // AND shortcut 6
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 6
                        continue
                    }

                    // CALLORVAR annotatedDelegationSpecifiers
                    var _r15: _KotlinParser_Item? = null
                    _r15 = _MemoCall(_memo, "annotatedDelegationSpecifiers", _index.element, ::annotatedDelegationSpecifiers, null)
                    if (_r15 != null) _index.element = _r15.nextIndex

                    // BIND dss
                    dss = _memo.results.peek()

                    _label = 6
                }
                // AND 6
                6 -> {
                    val _r6_2 = _memo.results.pop()
                    val _r6_1 = _memo.results.pop()

                    if (_r6_1 != null && _r6_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i6, _index.element, _memo.input, (_r6_1.results + _r6_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i6
                    }

                    // AND shortcut 5
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 5
                        continue
                    }

                    // STAR 16
                    _start_i16 = _index.element
                    _label = 16
                }
                // STAR 16
                16 -> {
                    // CALLORVAR NL
                    var _r17: _KotlinParser_Item? = null
                    _r17 = _MemoCall(_memo, "NL", _index.element, ::NL, null)
                    if (_r17 != null) _index.element = _r17.nextIndex

                    // STAR 16
                    val _r16 = _memo.results.pop()
                    if (_r16 != null) {
                        _res16 += _r16.results
                        _label = 16
                        continue
                    } else {
                        _memo.results.push(_KotlinParser_Item(_start_i16, _index.element, _memo.input, _res16.filterNotNull(), true))
                    }

                    _label = 5
                }
                // AND 5
                5 -> {
                    val _r5_2 = _memo.results.pop()
                    val _r5_1 = _memo.results.pop()

                    if (_r5_1 != null && _r5_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i5, _index.element, _memo.input, (_r5_1.results + _r5_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i5
                    }

                    // QUES 4
                    if (_memo.results.peek() == null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_index.element, _memo.input))
                    }
                    _label = 2
                }
                // AND 2
                2 -> {
                    val _r2_2 = _memo.results.pop()
                    val _r2_1 = _memo.results.pop()

                    if (_r2_1 != null && _r2_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i2, _index.element, _memo.input, (_r2_1.results + _r2_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i2
                    }

                    // AND shortcut 1
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 1
                        continue
                    }

                    // AND 19
                    _start_i19 = _index.element

                    // STAR 20
                    _start_i20 = _index.element
                    _label = 20
                }
                // STAR 20
                20 -> {
                    // CALLORVAR NL
                    var _r21: _KotlinParser_Item? = null
                    _r21 = _MemoCall(_memo, "NL", _index.element, ::NL, null)
                    if (_r21 != null) _index.element = _r21.nextIndex

                    // STAR 20
                    val _r20 = _memo.results.pop()
                    if (_r20 != null) {
                        _res20 += _r20.results
                        _label = 20
                        continue
                    } else {
                        _memo.results.push(_KotlinParser_Item(_start_i20, _index.element, _memo.input, _res20.filterNotNull(), true))
                    }

                    // AND shortcut 19
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 19
                        continue
                    }

                    // CALLORVAR classBody
                    var _r23: _KotlinParser_Item? = null
                    _r23 = _MemoCall(_memo, "classBody", _index.element, ::classBody, null)
                    if (_r23 != null) _index.element = _r23.nextIndex

                    // BIND b
                    b = _memo.results.peek()

                    _label = 19
                }
                // AND 19
                19 -> {
                    val _r19_2 = _memo.results.pop()
                    val _r19_1 = _memo.results.pop()

                    if (_r19_1 != null && _r19_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i19, _index.element, _memo.input, (_r19_1.results + _r19_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i19
                    }

                    // QUES 18
                    if (_memo.results.peek() == null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_index.element, _memo.input))
                    }
                    _label = 1
                }
                // AND 1
                1 -> {
                    val _r1_2 = _memo.results.pop()
                    val _r1_1 = _memo.results.pop()

                    if (_r1_1 != null && _r1_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i1, _index.element, _memo.input, (_r1_1.results + _r1_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i1
                    }

                    // ACT 0
                    val _r0 = _memo.results.peek()
                    if (_r0 != null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_r0.startIndex, _r0.nextIndex, _memo.input, _Thunk({ AST.ObjectLiteral(dss.l, b.nr) }, _r0), true))
                    }

                    break
                }
            }
        }
    }


    open fun thisExpression(_memo: _KotlinParser_Memo, __index: Int, _args: _KotlinParser_Args?) {
        val _index = Ref.IntRef()
        _index.element = __index

        val _arg_index = Ref.IntRef()
        val _arg_input_index = Ref.IntRef()

        var label: _KotlinParser_Item? = null

        // OR 0
        var _start_i0 = _index.element

        var _label = -1
        while(true) {
            when(_label) {
                -1 -> {
                    // OR 0
                    _start_i0 = _index.element

                    // CALLORVAR THIS
                    var _r2: _KotlinParser_Item? = null
                    _r2 = _MemoCall(_memo, "THIS", _index.element, ::THIS, null)
                    if (_r2 != null) _index.element = _r2.nextIndex

                    // ACT 1
                    val _r1 = _memo.results.peek()
                    if (_r1 != null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_r1.startIndex, _r1.nextIndex, _memo.input, _Thunk({ AST.THIS }, _r1), true))
                    }

                    // OR shortcut 0
                    if (_memo.results.peek() == null) {
                        _memo.results.pop()
                        _index.element = _start_i0
                    } else {
                        _label = 0
                        continue
                    }

                    // CALLORVAR ThisAt
                    var _r5: _KotlinParser_Item? = null
                    _r5 = _MemoCall(_memo, "ThisAt", _index.element, ::ThisAt, null)
                    if (_r5 != null) _index.element = _r5.nextIndex

                    // BIND label
                    label = _memo.results.peek()

                    // ACT 3
                    val _r3 = _memo.results.peek()
                    if (_r3 != null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_r3.startIndex, _r3.nextIndex, _memo.input, _Thunk({ AST.ThisAt(label.s) }, _r3), true))
                    }

                    _label = 0
                }
                // OR 0
                0 -> {
                    break
                }
            }
        }
    }


    open fun superExpression(_memo: _KotlinParser_Memo, __index: Int, _args: _KotlinParser_Args?) {
        val _index = Ref.IntRef()
        _index.element = __index

        val _arg_index = Ref.IntRef()
        val _arg_input_index = Ref.IntRef()

        var t: _KotlinParser_Item? = null
        var name: _KotlinParser_Item? = null

        // AND 1
        var _start_i1 = _index.element

        // AND 2
        var _start_i2 = _index.element

        // AND 5
        var _start_i5 = _index.element

        // AND 6
        var _start_i6 = _index.element

        // AND 7
        var _start_i7 = _index.element

        // AND 8
        var _start_i8 = _index.element

        // STAR 10
        var _start_i10 = _index.element
        val _inp10 = arrayListOf<Token?>()
        val _res10 = arrayListOf<AST.AstNode?>()

        // STAR 14
        var _start_i14 = _index.element
        val _inp14 = arrayListOf<Token?>()
        val _res14 = arrayListOf<AST.AstNode?>()

        // AND 18
        var _start_i18 = _index.element

        var _label = -1
        while(true) {
            when(_label) {
                -1 -> {
                    // AND 1
                    _start_i1 = _index.element

                    // AND 2
                    _start_i2 = _index.element

                    // CALLORVAR SUPER
                    var _r3: _KotlinParser_Item? = null
                    _r3 = _MemoCall(_memo, "SUPER", _index.element, ::SUPER, null)
                    if (_r3 != null) _index.element = _r3.nextIndex

                    // AND shortcut 2
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 2
                        continue
                    }

                    // AND 5
                    _start_i5 = _index.element

                    // AND 6
                    _start_i6 = _index.element

                    // AND 7
                    _start_i7 = _index.element

                    // AND 8
                    _start_i8 = _index.element

                    // CALLORVAR LANGLE
                    var _r9: _KotlinParser_Item? = null
                    _r9 = _MemoCall(_memo, "LANGLE", _index.element, ::LANGLE, null)
                    if (_r9 != null) _index.element = _r9.nextIndex

                    // AND shortcut 8
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 8
                        continue
                    }

                    // STAR 10
                    _start_i10 = _index.element
                    _label = 10
                }
                // STAR 10
                10 -> {
                    // CALLORVAR NL
                    var _r11: _KotlinParser_Item? = null
                    _r11 = _MemoCall(_memo, "NL", _index.element, ::NL, null)
                    if (_r11 != null) _index.element = _r11.nextIndex

                    // STAR 10
                    val _r10 = _memo.results.pop()
                    if (_r10 != null) {
                        _res10 += _r10.results
                        _label = 10
                        continue
                    } else {
                        _memo.results.push(_KotlinParser_Item(_start_i10, _index.element, _memo.input, _res10.filterNotNull(), true))
                    }

                    _label = 8
                }
                // AND 8
                8 -> {
                    val _r8_2 = _memo.results.pop()
                    val _r8_1 = _memo.results.pop()

                    if (_r8_1 != null && _r8_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i8, _index.element, _memo.input, (_r8_1.results + _r8_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i8
                    }

                    // AND shortcut 7
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 7
                        continue
                    }

                    // CALLORVAR type
                    var _r13: _KotlinParser_Item? = null
                    _r13 = _MemoCall(_memo, "type", _index.element, ::type, null)
                    if (_r13 != null) _index.element = _r13.nextIndex

                    // BIND t
                    t = _memo.results.peek()

                    _label = 7
                }
                // AND 7
                7 -> {
                    val _r7_2 = _memo.results.pop()
                    val _r7_1 = _memo.results.pop()

                    if (_r7_1 != null && _r7_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i7, _index.element, _memo.input, (_r7_1.results + _r7_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i7
                    }

                    // AND shortcut 6
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 6
                        continue
                    }

                    // STAR 14
                    _start_i14 = _index.element
                    _label = 14
                }
                // STAR 14
                14 -> {
                    // CALLORVAR NL
                    var _r15: _KotlinParser_Item? = null
                    _r15 = _MemoCall(_memo, "NL", _index.element, ::NL, null)
                    if (_r15 != null) _index.element = _r15.nextIndex

                    // STAR 14
                    val _r14 = _memo.results.pop()
                    if (_r14 != null) {
                        _res14 += _r14.results
                        _label = 14
                        continue
                    } else {
                        _memo.results.push(_KotlinParser_Item(_start_i14, _index.element, _memo.input, _res14.filterNotNull(), true))
                    }

                    _label = 6
                }
                // AND 6
                6 -> {
                    val _r6_2 = _memo.results.pop()
                    val _r6_1 = _memo.results.pop()

                    if (_r6_1 != null && _r6_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i6, _index.element, _memo.input, (_r6_1.results + _r6_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i6
                    }

                    // AND shortcut 5
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 5
                        continue
                    }

                    // CALLORVAR RANGLE
                    var _r16: _KotlinParser_Item? = null
                    _r16 = _MemoCall(_memo, "RANGLE", _index.element, ::RANGLE, null)
                    if (_r16 != null) _index.element = _r16.nextIndex

                    _label = 5
                }
                // AND 5
                5 -> {
                    val _r5_2 = _memo.results.pop()
                    val _r5_1 = _memo.results.pop()

                    if (_r5_1 != null && _r5_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i5, _index.element, _memo.input, (_r5_1.results + _r5_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i5
                    }

                    // QUES 4
                    if (_memo.results.peek() == null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_index.element, _memo.input))
                    }
                    _label = 2
                }
                // AND 2
                2 -> {
                    val _r2_2 = _memo.results.pop()
                    val _r2_1 = _memo.results.pop()

                    if (_r2_1 != null && _r2_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i2, _index.element, _memo.input, (_r2_1.results + _r2_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i2
                    }

                    // AND shortcut 1
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 1
                        continue
                    }

                    // AND 18
                    _start_i18 = _index.element

                    // CALLORVAR AT
                    var _r19: _KotlinParser_Item? = null
                    _r19 = _MemoCall(_memo, "AT", _index.element, ::AT, null)
                    if (_r19 != null) _index.element = _r19.nextIndex

                    // AND shortcut 18
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 18
                        continue
                    }

                    // CALLORVAR simpleIdentifier
                    var _r21: _KotlinParser_Item? = null
                    _r21 = _MemoCall(_memo, "simpleIdentifier", _index.element, ::simpleIdentifier, null)
                    if (_r21 != null) _index.element = _r21.nextIndex

                    // BIND name
                    name = _memo.results.peek()

                    _label = 18
                }
                // AND 18
                18 -> {
                    val _r18_2 = _memo.results.pop()
                    val _r18_1 = _memo.results.pop()

                    if (_r18_1 != null && _r18_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i18, _index.element, _memo.input, (_r18_1.results + _r18_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i18
                    }

                    // QUES 17
                    if (_memo.results.peek() == null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_index.element, _memo.input))
                    }
                    _label = 1
                }
                // AND 1
                1 -> {
                    val _r1_2 = _memo.results.pop()
                    val _r1_1 = _memo.results.pop()

                    if (_r1_1 != null && _r1_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i1, _index.element, _memo.input, (_r1_1.results + _r1_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i1
                    }

                    // ACT 0
                    val _r0 = _memo.results.peek()
                    if (_r0 != null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_r0.startIndex, _r0.nextIndex, _memo.input, _Thunk({ AST.Super(t.nr, name.ns) }, _r0), true))
                    }

                    break
                }
            }
        }
    }


    open fun ifExpression(_memo: _KotlinParser_Memo, __index: Int, _args: _KotlinParser_Args?) {
        val _index = Ref.IntRef()
        _index.element = __index

        val _arg_index = Ref.IntRef()
        val _arg_input_index = Ref.IntRef()

        var expr: _KotlinParser_Item? = null
        var thenExpr: _KotlinParser_Item? = null
        var elseExpr: _KotlinParser_Item? = null

        // OR 0
        var _start_i0 = _index.element

        // AND 2
        var _start_i2 = _index.element

        // AND 3
        var _start_i3 = _index.element

        // AND 4
        var _start_i4 = _index.element

        // AND 5
        var _start_i5 = _index.element

        // AND 6
        var _start_i6 = _index.element

        // AND 7
        var _start_i7 = _index.element

        // AND 8
        var _start_i8 = _index.element

        // AND 9
        var _start_i9 = _index.element

        // AND 10
        var _start_i10 = _index.element

        // STAR 12
        var _start_i12 = _index.element
        val _inp12 = arrayListOf<Token?>()
        val _res12 = arrayListOf<AST.AstNode?>()

        // STAR 15
        var _start_i15 = _index.element
        val _inp15 = arrayListOf<Token?>()
        val _res15 = arrayListOf<AST.AstNode?>()

        // STAR 19
        var _start_i19 = _index.element
        val _inp19 = arrayListOf<Token?>()
        val _res19 = arrayListOf<AST.AstNode?>()

        // STAR 22
        var _start_i22 = _index.element
        val _inp22 = arrayListOf<Token?>()
        val _res22 = arrayListOf<AST.AstNode?>()

        // AND 28
        var _start_i28 = _index.element

        // AND 29
        var _start_i29 = _index.element

        // AND 30
        var _start_i30 = _index.element

        // AND 31
        var _start_i31 = _index.element

        // AND 32
        var _start_i32 = _index.element

        // AND 33
        var _start_i33 = _index.element

        // STAR 34
        var _start_i34 = _index.element
        val _inp34 = arrayListOf<Token?>()
        val _res34 = arrayListOf<AST.AstNode?>()

        // STAR 38
        var _start_i38 = _index.element
        val _inp38 = arrayListOf<Token?>()
        val _res38 = arrayListOf<AST.AstNode?>()

        // STAR 41
        var _start_i41 = _index.element
        val _inp41 = arrayListOf<Token?>()
        val _res41 = arrayListOf<AST.AstNode?>()

        // AND 47
        var _start_i47 = _index.element

        // AND 48
        var _start_i48 = _index.element

        // AND 49
        var _start_i49 = _index.element

        // AND 50
        var _start_i50 = _index.element

        // AND 51
        var _start_i51 = _index.element

        // AND 52
        var _start_i52 = _index.element

        // AND 53
        var _start_i53 = _index.element

        // AND 54
        var _start_i54 = _index.element

        // AND 55
        var _start_i55 = _index.element

        // AND 56
        var _start_i56 = _index.element

        // AND 57
        var _start_i57 = _index.element

        // AND 58
        var _start_i58 = _index.element

        // AND 59
        var _start_i59 = _index.element

        // AND 60
        var _start_i60 = _index.element

        // AND 61
        var _start_i61 = _index.element

        // STAR 63
        var _start_i63 = _index.element
        val _inp63 = arrayListOf<Token?>()
        val _res63 = arrayListOf<AST.AstNode?>()

        // STAR 66
        var _start_i66 = _index.element
        val _inp66 = arrayListOf<Token?>()
        val _res66 = arrayListOf<AST.AstNode?>()

        // STAR 70
        var _start_i70 = _index.element
        val _inp70 = arrayListOf<Token?>()
        val _res70 = arrayListOf<AST.AstNode?>()

        // STAR 73
        var _start_i73 = _index.element
        val _inp73 = arrayListOf<Token?>()
        val _res73 = arrayListOf<AST.AstNode?>()

        // STAR 78
        var _start_i78 = _index.element
        val _inp78 = arrayListOf<Token?>()
        val _res78 = arrayListOf<AST.AstNode?>()

        // STAR 82
        var _start_i82 = _index.element
        val _inp82 = arrayListOf<Token?>()
        val _res82 = arrayListOf<AST.AstNode?>()

        // STAR 85
        var _start_i85 = _index.element
        val _inp85 = arrayListOf<Token?>()
        val _res85 = arrayListOf<AST.AstNode?>()

        var _label = -1
        while(true) {
            when(_label) {
                -1 -> {
                    // OR 0
                    _start_i0 = _index.element

                    // AND 2
                    _start_i2 = _index.element

                    // AND 3
                    _start_i3 = _index.element

                    // AND 4
                    _start_i4 = _index.element

                    // AND 5
                    _start_i5 = _index.element

                    // AND 6
                    _start_i6 = _index.element

                    // AND 7
                    _start_i7 = _index.element

                    // AND 8
                    _start_i8 = _index.element

                    // AND 9
                    _start_i9 = _index.element

                    // AND 10
                    _start_i10 = _index.element

                    // CALLORVAR IF
                    var _r11: _KotlinParser_Item? = null
                    _r11 = _MemoCall(_memo, "IF", _index.element, ::IF, null)
                    if (_r11 != null) _index.element = _r11.nextIndex

                    // AND shortcut 10
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 10
                        continue
                    }

                    // STAR 12
                    _start_i12 = _index.element
                    _label = 12
                }
                // STAR 12
                12 -> {
                    // CALLORVAR NL
                    var _r13: _KotlinParser_Item? = null
                    _r13 = _MemoCall(_memo, "NL", _index.element, ::NL, null)
                    if (_r13 != null) _index.element = _r13.nextIndex

                    // STAR 12
                    val _r12 = _memo.results.pop()
                    if (_r12 != null) {
                        _res12 += _r12.results
                        _label = 12
                        continue
                    } else {
                        _memo.results.push(_KotlinParser_Item(_start_i12, _index.element, _memo.input, _res12.filterNotNull(), true))
                    }

                    _label = 10
                }
                // AND 10
                10 -> {
                    val _r10_2 = _memo.results.pop()
                    val _r10_1 = _memo.results.pop()

                    if (_r10_1 != null && _r10_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i10, _index.element, _memo.input, (_r10_1.results + _r10_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i10
                    }

                    // AND shortcut 9
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 9
                        continue
                    }

                    // CALLORVAR LPAREN
                    var _r14: _KotlinParser_Item? = null
                    _r14 = _MemoCall(_memo, "LPAREN", _index.element, ::LPAREN, null)
                    if (_r14 != null) _index.element = _r14.nextIndex

                    _label = 9
                }
                // AND 9
                9 -> {
                    val _r9_2 = _memo.results.pop()
                    val _r9_1 = _memo.results.pop()

                    if (_r9_1 != null && _r9_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i9, _index.element, _memo.input, (_r9_1.results + _r9_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i9
                    }

                    // AND shortcut 8
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 8
                        continue
                    }

                    // STAR 15
                    _start_i15 = _index.element
                    _label = 15
                }
                // STAR 15
                15 -> {
                    // CALLORVAR NL
                    var _r16: _KotlinParser_Item? = null
                    _r16 = _MemoCall(_memo, "NL", _index.element, ::NL, null)
                    if (_r16 != null) _index.element = _r16.nextIndex

                    // STAR 15
                    val _r15 = _memo.results.pop()
                    if (_r15 != null) {
                        _res15 += _r15.results
                        _label = 15
                        continue
                    } else {
                        _memo.results.push(_KotlinParser_Item(_start_i15, _index.element, _memo.input, _res15.filterNotNull(), true))
                    }

                    _label = 8
                }
                // AND 8
                8 -> {
                    val _r8_2 = _memo.results.pop()
                    val _r8_1 = _memo.results.pop()

                    if (_r8_1 != null && _r8_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i8, _index.element, _memo.input, (_r8_1.results + _r8_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i8
                    }

                    // AND shortcut 7
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 7
                        continue
                    }

                    // CALLORVAR expression
                    var _r18: _KotlinParser_Item? = null
                    _r18 = _MemoCall(_memo, "expression", _index.element, ::expression, null)
                    if (_r18 != null) _index.element = _r18.nextIndex

                    // BIND expr
                    expr = _memo.results.peek()

                    _label = 7
                }
                // AND 7
                7 -> {
                    val _r7_2 = _memo.results.pop()
                    val _r7_1 = _memo.results.pop()

                    if (_r7_1 != null && _r7_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i7, _index.element, _memo.input, (_r7_1.results + _r7_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i7
                    }

                    // AND shortcut 6
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 6
                        continue
                    }

                    // STAR 19
                    _start_i19 = _index.element
                    _label = 19
                }
                // STAR 19
                19 -> {
                    // CALLORVAR NL
                    var _r20: _KotlinParser_Item? = null
                    _r20 = _MemoCall(_memo, "NL", _index.element, ::NL, null)
                    if (_r20 != null) _index.element = _r20.nextIndex

                    // STAR 19
                    val _r19 = _memo.results.pop()
                    if (_r19 != null) {
                        _res19 += _r19.results
                        _label = 19
                        continue
                    } else {
                        _memo.results.push(_KotlinParser_Item(_start_i19, _index.element, _memo.input, _res19.filterNotNull(), true))
                    }

                    _label = 6
                }
                // AND 6
                6 -> {
                    val _r6_2 = _memo.results.pop()
                    val _r6_1 = _memo.results.pop()

                    if (_r6_1 != null && _r6_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i6, _index.element, _memo.input, (_r6_1.results + _r6_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i6
                    }

                    // AND shortcut 5
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 5
                        continue
                    }

                    // CALLORVAR RPAREN
                    var _r21: _KotlinParser_Item? = null
                    _r21 = _MemoCall(_memo, "RPAREN", _index.element, ::RPAREN, null)
                    if (_r21 != null) _index.element = _r21.nextIndex

                    _label = 5
                }
                // AND 5
                5 -> {
                    val _r5_2 = _memo.results.pop()
                    val _r5_1 = _memo.results.pop()

                    if (_r5_1 != null && _r5_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i5, _index.element, _memo.input, (_r5_1.results + _r5_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i5
                    }

                    // AND shortcut 4
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 4
                        continue
                    }

                    // STAR 22
                    _start_i22 = _index.element
                    _label = 22
                }
                // STAR 22
                22 -> {
                    // CALLORVAR NL
                    var _r23: _KotlinParser_Item? = null
                    _r23 = _MemoCall(_memo, "NL", _index.element, ::NL, null)
                    if (_r23 != null) _index.element = _r23.nextIndex

                    // STAR 22
                    val _r22 = _memo.results.pop()
                    if (_r22 != null) {
                        _res22 += _r22.results
                        _label = 22
                        continue
                    } else {
                        _memo.results.push(_KotlinParser_Item(_start_i22, _index.element, _memo.input, _res22.filterNotNull(), true))
                    }

                    _label = 4
                }
                // AND 4
                4 -> {
                    val _r4_2 = _memo.results.pop()
                    val _r4_1 = _memo.results.pop()

                    if (_r4_1 != null && _r4_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i4, _index.element, _memo.input, (_r4_1.results + _r4_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i4
                    }

                    // AND shortcut 3
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 3
                        continue
                    }

                    // CALLORVAR controlStructureBody
                    var _r25: _KotlinParser_Item? = null
                    _r25 = _MemoCall(_memo, "controlStructureBody", _index.element, ::controlStructureBody, null)
                    if (_r25 != null) _index.element = _r25.nextIndex

                    // BIND thenExpr
                    thenExpr = _memo.results.peek()

                    _label = 3
                }
                // AND 3
                3 -> {
                    val _r3_2 = _memo.results.pop()
                    val _r3_1 = _memo.results.pop()

                    if (_r3_1 != null && _r3_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i3, _index.element, _memo.input, (_r3_1.results + _r3_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i3
                    }

                    // AND shortcut 2
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 2
                        continue
                    }

                    // AND 28
                    _start_i28 = _index.element

                    // AND 29
                    _start_i29 = _index.element

                    // AND 30
                    _start_i30 = _index.element

                    // AND 31
                    _start_i31 = _index.element

                    // AND 32
                    _start_i32 = _index.element

                    // AND 33
                    _start_i33 = _index.element

                    // STAR 34
                    _start_i34 = _index.element
                    _label = 34
                }
                // STAR 34
                34 -> {
                    // CALLORVAR NL
                    var _r35: _KotlinParser_Item? = null
                    _r35 = _MemoCall(_memo, "NL", _index.element, ::NL, null)
                    if (_r35 != null) _index.element = _r35.nextIndex

                    // STAR 34
                    val _r34 = _memo.results.pop()
                    if (_r34 != null) {
                        _res34 += _r34.results
                        _label = 34
                        continue
                    } else {
                        _memo.results.push(_KotlinParser_Item(_start_i34, _index.element, _memo.input, _res34.filterNotNull(), true))
                    }

                    // AND shortcut 33
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 33
                        continue
                    }

                    // CALLORVAR SEMICOLON
                    var _r37: _KotlinParser_Item? = null
                    _r37 = _MemoCall(_memo, "SEMICOLON", _index.element, ::SEMICOLON, null)
                    if (_r37 != null) _index.element = _r37.nextIndex

                    // QUES 36
                    if (_memo.results.peek() == null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_index.element, _memo.input))
                    }
                    _label = 33
                }
                // AND 33
                33 -> {
                    val _r33_2 = _memo.results.pop()
                    val _r33_1 = _memo.results.pop()

                    if (_r33_1 != null && _r33_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i33, _index.element, _memo.input, (_r33_1.results + _r33_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i33
                    }

                    // AND shortcut 32
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 32
                        continue
                    }

                    // STAR 38
                    _start_i38 = _index.element
                    _label = 38
                }
                // STAR 38
                38 -> {
                    // CALLORVAR NL
                    var _r39: _KotlinParser_Item? = null
                    _r39 = _MemoCall(_memo, "NL", _index.element, ::NL, null)
                    if (_r39 != null) _index.element = _r39.nextIndex

                    // STAR 38
                    val _r38 = _memo.results.pop()
                    if (_r38 != null) {
                        _res38 += _r38.results
                        _label = 38
                        continue
                    } else {
                        _memo.results.push(_KotlinParser_Item(_start_i38, _index.element, _memo.input, _res38.filterNotNull(), true))
                    }

                    _label = 32
                }
                // AND 32
                32 -> {
                    val _r32_2 = _memo.results.pop()
                    val _r32_1 = _memo.results.pop()

                    if (_r32_1 != null && _r32_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i32, _index.element, _memo.input, (_r32_1.results + _r32_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i32
                    }

                    // AND shortcut 31
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 31
                        continue
                    }

                    // CALLORVAR ELSE
                    var _r40: _KotlinParser_Item? = null
                    _r40 = _MemoCall(_memo, "ELSE", _index.element, ::ELSE, null)
                    if (_r40 != null) _index.element = _r40.nextIndex

                    _label = 31
                }
                // AND 31
                31 -> {
                    val _r31_2 = _memo.results.pop()
                    val _r31_1 = _memo.results.pop()

                    if (_r31_1 != null && _r31_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i31, _index.element, _memo.input, (_r31_1.results + _r31_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i31
                    }

                    // AND shortcut 30
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 30
                        continue
                    }

                    // STAR 41
                    _start_i41 = _index.element
                    _label = 41
                }
                // STAR 41
                41 -> {
                    // CALLORVAR NL
                    var _r42: _KotlinParser_Item? = null
                    _r42 = _MemoCall(_memo, "NL", _index.element, ::NL, null)
                    if (_r42 != null) _index.element = _r42.nextIndex

                    // STAR 41
                    val _r41 = _memo.results.pop()
                    if (_r41 != null) {
                        _res41 += _r41.results
                        _label = 41
                        continue
                    } else {
                        _memo.results.push(_KotlinParser_Item(_start_i41, _index.element, _memo.input, _res41.filterNotNull(), true))
                    }

                    _label = 30
                }
                // AND 30
                30 -> {
                    val _r30_2 = _memo.results.pop()
                    val _r30_1 = _memo.results.pop()

                    if (_r30_1 != null && _r30_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i30, _index.element, _memo.input, (_r30_1.results + _r30_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i30
                    }

                    // AND shortcut 29
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 29
                        continue
                    }

                    // CALLORVAR SEMICOLON
                    var _r44: _KotlinParser_Item? = null
                    _r44 = _MemoCall(_memo, "SEMICOLON", _index.element, ::SEMICOLON, null)
                    if (_r44 != null) _index.element = _r44.nextIndex

                    // QUES 43
                    if (_memo.results.peek() == null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_index.element, _memo.input))
                    }
                    _label = 29
                }
                // AND 29
                29 -> {
                    val _r29_2 = _memo.results.pop()
                    val _r29_1 = _memo.results.pop()

                    if (_r29_1 != null && _r29_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i29, _index.element, _memo.input, (_r29_1.results + _r29_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i29
                    }

                    // AND shortcut 28
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 28
                        continue
                    }

                    // CALLORVAR controlStructureBody
                    var _r45: _KotlinParser_Item? = null
                    _r45 = _MemoCall(_memo, "controlStructureBody", _index.element, ::controlStructureBody, null)
                    if (_r45 != null) _index.element = _r45.nextIndex

                    _label = 28
                }
                // AND 28
                28 -> {
                    val _r28_2 = _memo.results.pop()
                    val _r28_1 = _memo.results.pop()

                    if (_r28_1 != null && _r28_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i28, _index.element, _memo.input, (_r28_1.results + _r28_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i28
                    }

                    // QUES 27
                    if (_memo.results.peek() == null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_index.element, _memo.input))
                    }
                    // BIND elseExpr
                    elseExpr = _memo.results.peek()

                    _label = 2
                }
                // AND 2
                2 -> {
                    val _r2_2 = _memo.results.pop()
                    val _r2_1 = _memo.results.pop()

                    if (_r2_1 != null && _r2_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i2, _index.element, _memo.input, (_r2_1.results + _r2_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i2
                    }

                    // ACT 1
                    val _r1 = _memo.results.peek()
                    if (_r1 != null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_r1.startIndex, _r1.nextIndex, _memo.input, _Thunk({ AST.IfExpression(expr.r, thenExpr.r, elseExpr.r) }, _r1), true))
                    }

                    // OR shortcut 0
                    if (_memo.results.peek() == null) {
                        _memo.results.pop()
                        _index.element = _start_i0
                    } else {
                        _label = 0
                        continue
                    }

                    // AND 47
                    _start_i47 = _index.element

                    // AND 48
                    _start_i48 = _index.element

                    // AND 49
                    _start_i49 = _index.element

                    // AND 50
                    _start_i50 = _index.element

                    // AND 51
                    _start_i51 = _index.element

                    // AND 52
                    _start_i52 = _index.element

                    // AND 53
                    _start_i53 = _index.element

                    // AND 54
                    _start_i54 = _index.element

                    // AND 55
                    _start_i55 = _index.element

                    // AND 56
                    _start_i56 = _index.element

                    // AND 57
                    _start_i57 = _index.element

                    // AND 58
                    _start_i58 = _index.element

                    // AND 59
                    _start_i59 = _index.element

                    // AND 60
                    _start_i60 = _index.element

                    // AND 61
                    _start_i61 = _index.element

                    // CALLORVAR IF
                    var _r62: _KotlinParser_Item? = null
                    _r62 = _MemoCall(_memo, "IF", _index.element, ::IF, null)
                    if (_r62 != null) _index.element = _r62.nextIndex

                    // AND shortcut 61
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 61
                        continue
                    }

                    // STAR 63
                    _start_i63 = _index.element
                    _label = 63
                }
                // STAR 63
                63 -> {
                    // CALLORVAR NL
                    var _r64: _KotlinParser_Item? = null
                    _r64 = _MemoCall(_memo, "NL", _index.element, ::NL, null)
                    if (_r64 != null) _index.element = _r64.nextIndex

                    // STAR 63
                    val _r63 = _memo.results.pop()
                    if (_r63 != null) {
                        _res63 += _r63.results
                        _label = 63
                        continue
                    } else {
                        _memo.results.push(_KotlinParser_Item(_start_i63, _index.element, _memo.input, _res63.filterNotNull(), true))
                    }

                    _label = 61
                }
                // AND 61
                61 -> {
                    val _r61_2 = _memo.results.pop()
                    val _r61_1 = _memo.results.pop()

                    if (_r61_1 != null && _r61_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i61, _index.element, _memo.input, (_r61_1.results + _r61_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i61
                    }

                    // AND shortcut 60
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 60
                        continue
                    }

                    // CALLORVAR LPAREN
                    var _r65: _KotlinParser_Item? = null
                    _r65 = _MemoCall(_memo, "LPAREN", _index.element, ::LPAREN, null)
                    if (_r65 != null) _index.element = _r65.nextIndex

                    _label = 60
                }
                // AND 60
                60 -> {
                    val _r60_2 = _memo.results.pop()
                    val _r60_1 = _memo.results.pop()

                    if (_r60_1 != null && _r60_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i60, _index.element, _memo.input, (_r60_1.results + _r60_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i60
                    }

                    // AND shortcut 59
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 59
                        continue
                    }

                    // STAR 66
                    _start_i66 = _index.element
                    _label = 66
                }
                // STAR 66
                66 -> {
                    // CALLORVAR NL
                    var _r67: _KotlinParser_Item? = null
                    _r67 = _MemoCall(_memo, "NL", _index.element, ::NL, null)
                    if (_r67 != null) _index.element = _r67.nextIndex

                    // STAR 66
                    val _r66 = _memo.results.pop()
                    if (_r66 != null) {
                        _res66 += _r66.results
                        _label = 66
                        continue
                    } else {
                        _memo.results.push(_KotlinParser_Item(_start_i66, _index.element, _memo.input, _res66.filterNotNull(), true))
                    }

                    _label = 59
                }
                // AND 59
                59 -> {
                    val _r59_2 = _memo.results.pop()
                    val _r59_1 = _memo.results.pop()

                    if (_r59_1 != null && _r59_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i59, _index.element, _memo.input, (_r59_1.results + _r59_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i59
                    }

                    // AND shortcut 58
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 58
                        continue
                    }

                    // CALLORVAR expression
                    var _r69: _KotlinParser_Item? = null
                    _r69 = _MemoCall(_memo, "expression", _index.element, ::expression, null)
                    if (_r69 != null) _index.element = _r69.nextIndex

                    // BIND expr
                    expr = _memo.results.peek()

                    _label = 58
                }
                // AND 58
                58 -> {
                    val _r58_2 = _memo.results.pop()
                    val _r58_1 = _memo.results.pop()

                    if (_r58_1 != null && _r58_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i58, _index.element, _memo.input, (_r58_1.results + _r58_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i58
                    }

                    // AND shortcut 57
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 57
                        continue
                    }

                    // STAR 70
                    _start_i70 = _index.element
                    _label = 70
                }
                // STAR 70
                70 -> {
                    // CALLORVAR NL
                    var _r71: _KotlinParser_Item? = null
                    _r71 = _MemoCall(_memo, "NL", _index.element, ::NL, null)
                    if (_r71 != null) _index.element = _r71.nextIndex

                    // STAR 70
                    val _r70 = _memo.results.pop()
                    if (_r70 != null) {
                        _res70 += _r70.results
                        _label = 70
                        continue
                    } else {
                        _memo.results.push(_KotlinParser_Item(_start_i70, _index.element, _memo.input, _res70.filterNotNull(), true))
                    }

                    _label = 57
                }
                // AND 57
                57 -> {
                    val _r57_2 = _memo.results.pop()
                    val _r57_1 = _memo.results.pop()

                    if (_r57_1 != null && _r57_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i57, _index.element, _memo.input, (_r57_1.results + _r57_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i57
                    }

                    // AND shortcut 56
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 56
                        continue
                    }

                    // CALLORVAR RPAREN
                    var _r72: _KotlinParser_Item? = null
                    _r72 = _MemoCall(_memo, "RPAREN", _index.element, ::RPAREN, null)
                    if (_r72 != null) _index.element = _r72.nextIndex

                    _label = 56
                }
                // AND 56
                56 -> {
                    val _r56_2 = _memo.results.pop()
                    val _r56_1 = _memo.results.pop()

                    if (_r56_1 != null && _r56_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i56, _index.element, _memo.input, (_r56_1.results + _r56_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i56
                    }

                    // AND shortcut 55
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 55
                        continue
                    }

                    // STAR 73
                    _start_i73 = _index.element
                    _label = 73
                }
                // STAR 73
                73 -> {
                    // CALLORVAR NL
                    var _r74: _KotlinParser_Item? = null
                    _r74 = _MemoCall(_memo, "NL", _index.element, ::NL, null)
                    if (_r74 != null) _index.element = _r74.nextIndex

                    // STAR 73
                    val _r73 = _memo.results.pop()
                    if (_r73 != null) {
                        _res73 += _r73.results
                        _label = 73
                        continue
                    } else {
                        _memo.results.push(_KotlinParser_Item(_start_i73, _index.element, _memo.input, _res73.filterNotNull(), true))
                    }

                    _label = 55
                }
                // AND 55
                55 -> {
                    val _r55_2 = _memo.results.pop()
                    val _r55_1 = _memo.results.pop()

                    if (_r55_1 != null && _r55_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i55, _index.element, _memo.input, (_r55_1.results + _r55_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i55
                    }

                    // AND shortcut 54
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 54
                        continue
                    }

                    // CALLORVAR controlStructureBody
                    var _r77: _KotlinParser_Item? = null
                    _r77 = _MemoCall(_memo, "controlStructureBody", _index.element, ::controlStructureBody, null)
                    if (_r77 != null) _index.element = _r77.nextIndex

                    // QUES 76
                    if (_memo.results.peek() == null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_index.element, _memo.input))
                    }
                    // BIND thenExpr
                    thenExpr = _memo.results.peek()

                    _label = 54
                }
                // AND 54
                54 -> {
                    val _r54_2 = _memo.results.pop()
                    val _r54_1 = _memo.results.pop()

                    if (_r54_1 != null && _r54_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i54, _index.element, _memo.input, (_r54_1.results + _r54_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i54
                    }

                    // AND shortcut 53
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 53
                        continue
                    }

                    // STAR 78
                    _start_i78 = _index.element
                    _label = 78
                }
                // STAR 78
                78 -> {
                    // CALLORVAR NL
                    var _r79: _KotlinParser_Item? = null
                    _r79 = _MemoCall(_memo, "NL", _index.element, ::NL, null)
                    if (_r79 != null) _index.element = _r79.nextIndex

                    // STAR 78
                    val _r78 = _memo.results.pop()
                    if (_r78 != null) {
                        _res78 += _r78.results
                        _label = 78
                        continue
                    } else {
                        _memo.results.push(_KotlinParser_Item(_start_i78, _index.element, _memo.input, _res78.filterNotNull(), true))
                    }

                    _label = 53
                }
                // AND 53
                53 -> {
                    val _r53_2 = _memo.results.pop()
                    val _r53_1 = _memo.results.pop()

                    if (_r53_1 != null && _r53_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i53, _index.element, _memo.input, (_r53_1.results + _r53_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i53
                    }

                    // AND shortcut 52
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 52
                        continue
                    }

                    // CALLORVAR SEMICOLON
                    var _r81: _KotlinParser_Item? = null
                    _r81 = _MemoCall(_memo, "SEMICOLON", _index.element, ::SEMICOLON, null)
                    if (_r81 != null) _index.element = _r81.nextIndex

                    // QUES 80
                    if (_memo.results.peek() == null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_index.element, _memo.input))
                    }
                    _label = 52
                }
                // AND 52
                52 -> {
                    val _r52_2 = _memo.results.pop()
                    val _r52_1 = _memo.results.pop()

                    if (_r52_1 != null && _r52_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i52, _index.element, _memo.input, (_r52_1.results + _r52_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i52
                    }

                    // AND shortcut 51
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 51
                        continue
                    }

                    // STAR 82
                    _start_i82 = _index.element
                    _label = 82
                }
                // STAR 82
                82 -> {
                    // CALLORVAR NL
                    var _r83: _KotlinParser_Item? = null
                    _r83 = _MemoCall(_memo, "NL", _index.element, ::NL, null)
                    if (_r83 != null) _index.element = _r83.nextIndex

                    // STAR 82
                    val _r82 = _memo.results.pop()
                    if (_r82 != null) {
                        _res82 += _r82.results
                        _label = 82
                        continue
                    } else {
                        _memo.results.push(_KotlinParser_Item(_start_i82, _index.element, _memo.input, _res82.filterNotNull(), true))
                    }

                    _label = 51
                }
                // AND 51
                51 -> {
                    val _r51_2 = _memo.results.pop()
                    val _r51_1 = _memo.results.pop()

                    if (_r51_1 != null && _r51_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i51, _index.element, _memo.input, (_r51_1.results + _r51_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i51
                    }

                    // AND shortcut 50
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 50
                        continue
                    }

                    // CALLORVAR ELSE
                    var _r84: _KotlinParser_Item? = null
                    _r84 = _MemoCall(_memo, "ELSE", _index.element, ::ELSE, null)
                    if (_r84 != null) _index.element = _r84.nextIndex

                    _label = 50
                }
                // AND 50
                50 -> {
                    val _r50_2 = _memo.results.pop()
                    val _r50_1 = _memo.results.pop()

                    if (_r50_1 != null && _r50_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i50, _index.element, _memo.input, (_r50_1.results + _r50_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i50
                    }

                    // AND shortcut 49
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 49
                        continue
                    }

                    // STAR 85
                    _start_i85 = _index.element
                    _label = 85
                }
                // STAR 85
                85 -> {
                    // CALLORVAR NL
                    var _r86: _KotlinParser_Item? = null
                    _r86 = _MemoCall(_memo, "NL", _index.element, ::NL, null)
                    if (_r86 != null) _index.element = _r86.nextIndex

                    // STAR 85
                    val _r85 = _memo.results.pop()
                    if (_r85 != null) {
                        _res85 += _r85.results
                        _label = 85
                        continue
                    } else {
                        _memo.results.push(_KotlinParser_Item(_start_i85, _index.element, _memo.input, _res85.filterNotNull(), true))
                    }

                    _label = 49
                }
                // AND 49
                49 -> {
                    val _r49_2 = _memo.results.pop()
                    val _r49_1 = _memo.results.pop()

                    if (_r49_1 != null && _r49_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i49, _index.element, _memo.input, (_r49_1.results + _r49_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i49
                    }

                    // AND shortcut 48
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 48
                        continue
                    }

                    // CALLORVAR SEMICOLON
                    var _r88: _KotlinParser_Item? = null
                    _r88 = _MemoCall(_memo, "SEMICOLON", _index.element, ::SEMICOLON, null)
                    if (_r88 != null) _index.element = _r88.nextIndex

                    // QUES 87
                    if (_memo.results.peek() == null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_index.element, _memo.input))
                    }
                    _label = 48
                }
                // AND 48
                48 -> {
                    val _r48_2 = _memo.results.pop()
                    val _r48_1 = _memo.results.pop()

                    if (_r48_1 != null && _r48_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i48, _index.element, _memo.input, (_r48_1.results + _r48_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i48
                    }

                    // AND shortcut 47
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 47
                        continue
                    }

                    // CALLORVAR controlStructureBody
                    var _r90: _KotlinParser_Item? = null
                    _r90 = _MemoCall(_memo, "controlStructureBody", _index.element, ::controlStructureBody, null)
                    if (_r90 != null) _index.element = _r90.nextIndex

                    // BIND elseExpr
                    elseExpr = _memo.results.peek()

                    _label = 47
                }
                // AND 47
                47 -> {
                    val _r47_2 = _memo.results.pop()
                    val _r47_1 = _memo.results.pop()

                    if (_r47_1 != null && _r47_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i47, _index.element, _memo.input, (_r47_1.results + _r47_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i47
                    }

                    // ACT 46
                    val _r46 = _memo.results.peek()
                    if (_r46 != null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_r46.startIndex, _r46.nextIndex, _memo.input, _Thunk({ AST.IfExpression(expr.r, thenExpr.nr, elseExpr.r) }, _r46), true))
                    }

                    _label = 0
                }
                // OR 0
                0 -> {
                    break
                }
            }
        }
    }


    open fun whenSubject(_memo: _KotlinParser_Memo, __index: Int, _args: _KotlinParser_Args?) {
        val _index = Ref.IntRef()
        _index.element = __index

        val _arg_index = Ref.IntRef()
        val _arg_input_index = Ref.IntRef()

        var anns: _KotlinParser_Item? = null
        var varDecl: _KotlinParser_Item? = null
        var expr: _KotlinParser_Item? = null

        // AND 1
        var _start_i1 = _index.element

        // AND 2
        var _start_i2 = _index.element

        // AND 3
        var _start_i3 = _index.element

        // AND 6
        var _start_i6 = _index.element

        // AND 7
        var _start_i7 = _index.element

        // AND 8
        var _start_i8 = _index.element

        // AND 9
        var _start_i9 = _index.element

        // AND 10
        var _start_i10 = _index.element

        // AND 11
        var _start_i11 = _index.element

        // AND 12
        var _start_i12 = _index.element

        // STAR 14
        var _start_i14 = _index.element
        val _inp14 = arrayListOf<Token?>()
        val _res14 = arrayListOf<AST.AstNode?>()

        // STAR 16
        var _start_i16 = _index.element
        val _inp16 = arrayListOf<Token?>()
        val _res16 = arrayListOf<AST.AstNode?>()

        // STAR 19
        var _start_i19 = _index.element
        val _inp19 = arrayListOf<Token?>()
        val _res19 = arrayListOf<AST.AstNode?>()

        // STAR 23
        var _start_i23 = _index.element
        val _inp23 = arrayListOf<Token?>()
        val _res23 = arrayListOf<AST.AstNode?>()

        // STAR 26
        var _start_i26 = _index.element
        val _inp26 = arrayListOf<Token?>()
        val _res26 = arrayListOf<AST.AstNode?>()

        var _label = -1
        while(true) {
            when(_label) {
                -1 -> {
                    // AND 1
                    _start_i1 = _index.element

                    // AND 2
                    _start_i2 = _index.element

                    // AND 3
                    _start_i3 = _index.element

                    // CALLORVAR LPAREN
                    var _r4: _KotlinParser_Item? = null
                    _r4 = _MemoCall(_memo, "LPAREN", _index.element, ::LPAREN, null)
                    if (_r4 != null) _index.element = _r4.nextIndex

                    // AND shortcut 3
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 3
                        continue
                    }

                    // AND 6
                    _start_i6 = _index.element

                    // AND 7
                    _start_i7 = _index.element

                    // AND 8
                    _start_i8 = _index.element

                    // AND 9
                    _start_i9 = _index.element

                    // AND 10
                    _start_i10 = _index.element

                    // AND 11
                    _start_i11 = _index.element

                    // AND 12
                    _start_i12 = _index.element

                    // STAR 14
                    _start_i14 = _index.element
                    _label = 14
                }
                // STAR 14
                14 -> {
                    // CALLORVAR annotation
                    var _r15: _KotlinParser_Item? = null
                    _r15 = _MemoCall(_memo, "annotation", _index.element, ::annotation, null)
                    if (_r15 != null) _index.element = _r15.nextIndex

                    // STAR 14
                    val _r14 = _memo.results.pop()
                    if (_r14 != null) {
                        _res14 += _r14.results
                        _label = 14
                        continue
                    } else {
                        _memo.results.push(_KotlinParser_Item(_start_i14, _index.element, _memo.input, _res14.filterNotNull(), true))
                    }

                    // BIND anns
                    anns = _memo.results.peek()

                    // AND shortcut 12
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 12
                        continue
                    }

                    // STAR 16
                    _start_i16 = _index.element
                    _label = 16
                }
                // STAR 16
                16 -> {
                    // CALLORVAR NL
                    var _r17: _KotlinParser_Item? = null
                    _r17 = _MemoCall(_memo, "NL", _index.element, ::NL, null)
                    if (_r17 != null) _index.element = _r17.nextIndex

                    // STAR 16
                    val _r16 = _memo.results.pop()
                    if (_r16 != null) {
                        _res16 += _r16.results
                        _label = 16
                        continue
                    } else {
                        _memo.results.push(_KotlinParser_Item(_start_i16, _index.element, _memo.input, _res16.filterNotNull(), true))
                    }

                    _label = 12
                }
                // AND 12
                12 -> {
                    val _r12_2 = _memo.results.pop()
                    val _r12_1 = _memo.results.pop()

                    if (_r12_1 != null && _r12_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i12, _index.element, _memo.input, (_r12_1.results + _r12_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i12
                    }

                    // AND shortcut 11
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 11
                        continue
                    }

                    // CALLORVAR VAL
                    var _r18: _KotlinParser_Item? = null
                    _r18 = _MemoCall(_memo, "VAL", _index.element, ::VAL, null)
                    if (_r18 != null) _index.element = _r18.nextIndex

                    _label = 11
                }
                // AND 11
                11 -> {
                    val _r11_2 = _memo.results.pop()
                    val _r11_1 = _memo.results.pop()

                    if (_r11_1 != null && _r11_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i11, _index.element, _memo.input, (_r11_1.results + _r11_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i11
                    }

                    // AND shortcut 10
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 10
                        continue
                    }

                    // STAR 19
                    _start_i19 = _index.element
                    _label = 19
                }
                // STAR 19
                19 -> {
                    // CALLORVAR NL
                    var _r20: _KotlinParser_Item? = null
                    _r20 = _MemoCall(_memo, "NL", _index.element, ::NL, null)
                    if (_r20 != null) _index.element = _r20.nextIndex

                    // STAR 19
                    val _r19 = _memo.results.pop()
                    if (_r19 != null) {
                        _res19 += _r19.results
                        _label = 19
                        continue
                    } else {
                        _memo.results.push(_KotlinParser_Item(_start_i19, _index.element, _memo.input, _res19.filterNotNull(), true))
                    }

                    _label = 10
                }
                // AND 10
                10 -> {
                    val _r10_2 = _memo.results.pop()
                    val _r10_1 = _memo.results.pop()

                    if (_r10_1 != null && _r10_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i10, _index.element, _memo.input, (_r10_1.results + _r10_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i10
                    }

                    // AND shortcut 9
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 9
                        continue
                    }

                    // CALLORVAR variableDeclaration
                    var _r22: _KotlinParser_Item? = null
                    _r22 = _MemoCall(_memo, "variableDeclaration", _index.element, ::variableDeclaration, null)
                    if (_r22 != null) _index.element = _r22.nextIndex

                    // BIND varDecl
                    varDecl = _memo.results.peek()

                    _label = 9
                }
                // AND 9
                9 -> {
                    val _r9_2 = _memo.results.pop()
                    val _r9_1 = _memo.results.pop()

                    if (_r9_1 != null && _r9_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i9, _index.element, _memo.input, (_r9_1.results + _r9_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i9
                    }

                    // AND shortcut 8
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 8
                        continue
                    }

                    // STAR 23
                    _start_i23 = _index.element
                    _label = 23
                }
                // STAR 23
                23 -> {
                    // CALLORVAR NL
                    var _r24: _KotlinParser_Item? = null
                    _r24 = _MemoCall(_memo, "NL", _index.element, ::NL, null)
                    if (_r24 != null) _index.element = _r24.nextIndex

                    // STAR 23
                    val _r23 = _memo.results.pop()
                    if (_r23 != null) {
                        _res23 += _r23.results
                        _label = 23
                        continue
                    } else {
                        _memo.results.push(_KotlinParser_Item(_start_i23, _index.element, _memo.input, _res23.filterNotNull(), true))
                    }

                    _label = 8
                }
                // AND 8
                8 -> {
                    val _r8_2 = _memo.results.pop()
                    val _r8_1 = _memo.results.pop()

                    if (_r8_1 != null && _r8_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i8, _index.element, _memo.input, (_r8_1.results + _r8_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i8
                    }

                    // AND shortcut 7
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 7
                        continue
                    }

                    // CALLORVAR ASSIGNMENT
                    var _r25: _KotlinParser_Item? = null
                    _r25 = _MemoCall(_memo, "ASSIGNMENT", _index.element, ::ASSIGNMENT, null)
                    if (_r25 != null) _index.element = _r25.nextIndex

                    _label = 7
                }
                // AND 7
                7 -> {
                    val _r7_2 = _memo.results.pop()
                    val _r7_1 = _memo.results.pop()

                    if (_r7_1 != null && _r7_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i7, _index.element, _memo.input, (_r7_1.results + _r7_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i7
                    }

                    // AND shortcut 6
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 6
                        continue
                    }

                    // STAR 26
                    _start_i26 = _index.element
                    _label = 26
                }
                // STAR 26
                26 -> {
                    // CALLORVAR NL
                    var _r27: _KotlinParser_Item? = null
                    _r27 = _MemoCall(_memo, "NL", _index.element, ::NL, null)
                    if (_r27 != null) _index.element = _r27.nextIndex

                    // STAR 26
                    val _r26 = _memo.results.pop()
                    if (_r26 != null) {
                        _res26 += _r26.results
                        _label = 26
                        continue
                    } else {
                        _memo.results.push(_KotlinParser_Item(_start_i26, _index.element, _memo.input, _res26.filterNotNull(), true))
                    }

                    _label = 6
                }
                // AND 6
                6 -> {
                    val _r6_2 = _memo.results.pop()
                    val _r6_1 = _memo.results.pop()

                    if (_r6_1 != null && _r6_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i6, _index.element, _memo.input, (_r6_1.results + _r6_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i6
                    }

                    // QUES 5
                    if (_memo.results.peek() == null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_index.element, _memo.input))
                    }
                    _label = 3
                }
                // AND 3
                3 -> {
                    val _r3_2 = _memo.results.pop()
                    val _r3_1 = _memo.results.pop()

                    if (_r3_1 != null && _r3_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i3, _index.element, _memo.input, (_r3_1.results + _r3_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i3
                    }

                    // AND shortcut 2
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 2
                        continue
                    }

                    // CALLORVAR expression
                    var _r29: _KotlinParser_Item? = null
                    _r29 = _MemoCall(_memo, "expression", _index.element, ::expression, null)
                    if (_r29 != null) _index.element = _r29.nextIndex

                    // BIND expr
                    expr = _memo.results.peek()

                    _label = 2
                }
                // AND 2
                2 -> {
                    val _r2_2 = _memo.results.pop()
                    val _r2_1 = _memo.results.pop()

                    if (_r2_1 != null && _r2_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i2, _index.element, _memo.input, (_r2_1.results + _r2_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i2
                    }

                    // AND shortcut 1
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 1
                        continue
                    }

                    // CALLORVAR RPAREN
                    var _r30: _KotlinParser_Item? = null
                    _r30 = _MemoCall(_memo, "RPAREN", _index.element, ::RPAREN, null)
                    if (_r30 != null) _index.element = _r30.nextIndex

                    _label = 1
                }
                // AND 1
                1 -> {
                    val _r1_2 = _memo.results.pop()
                    val _r1_1 = _memo.results.pop()

                    if (_r1_1 != null && _r1_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i1, _index.element, _memo.input, (_r1_1.results + _r1_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i1
                    }

                    // ACT 0
                    val _r0 = _memo.results.peek()
                    if (_r0 != null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_r0.startIndex, _r0.nextIndex, _memo.input, _Thunk({ AST.WhenSubject(anns.l, varDecl.nr, expr.r) }, _r0), true))
                    }

                    break
                }
            }
        }
    }


    open fun whenExpression(_memo: _KotlinParser_Memo, __index: Int, _args: _KotlinParser_Args?) {
        val _index = Ref.IntRef()
        _index.element = __index

        val _arg_index = Ref.IntRef()
        val _arg_input_index = Ref.IntRef()

        var subj: _KotlinParser_Item? = null
        var entries: _KotlinParser_Item? = null

        // AND 1
        var _start_i1 = _index.element

        // AND 2
        var _start_i2 = _index.element

        // AND 3
        var _start_i3 = _index.element

        // AND 4
        var _start_i4 = _index.element

        // AND 5
        var _start_i5 = _index.element

        // AND 6
        var _start_i6 = _index.element

        // AND 7
        var _start_i7 = _index.element

        // AND 8
        var _start_i8 = _index.element

        // STAR 10
        var _start_i10 = _index.element
        val _inp10 = arrayListOf<Token?>()
        val _res10 = arrayListOf<AST.AstNode?>()

        // STAR 15
        var _start_i15 = _index.element
        val _inp15 = arrayListOf<Token?>()
        val _res15 = arrayListOf<AST.AstNode?>()

        // STAR 18
        var _start_i18 = _index.element
        val _inp18 = arrayListOf<Token?>()
        val _res18 = arrayListOf<AST.AstNode?>()

        // STAR 21
        var _start_i21 = _index.element
        val _inp21 = arrayListOf<Token?>()
        val _res21 = arrayListOf<AST.AstNode?>()

        // AND 22
        var _start_i22 = _index.element

        // STAR 24
        var _start_i24 = _index.element
        val _inp24 = arrayListOf<Token?>()
        val _res24 = arrayListOf<AST.AstNode?>()

        // STAR 26
        var _start_i26 = _index.element
        val _inp26 = arrayListOf<Token?>()
        val _res26 = arrayListOf<AST.AstNode?>()

        var _label = -1
        while(true) {
            when(_label) {
                -1 -> {
                    // AND 1
                    _start_i1 = _index.element

                    // AND 2
                    _start_i2 = _index.element

                    // AND 3
                    _start_i3 = _index.element

                    // AND 4
                    _start_i4 = _index.element

                    // AND 5
                    _start_i5 = _index.element

                    // AND 6
                    _start_i6 = _index.element

                    // AND 7
                    _start_i7 = _index.element

                    // AND 8
                    _start_i8 = _index.element

                    // CALLORVAR WHEN
                    var _r9: _KotlinParser_Item? = null
                    _r9 = _MemoCall(_memo, "WHEN", _index.element, ::WHEN, null)
                    if (_r9 != null) _index.element = _r9.nextIndex

                    // AND shortcut 8
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 8
                        continue
                    }

                    // STAR 10
                    _start_i10 = _index.element
                    _label = 10
                }
                // STAR 10
                10 -> {
                    // CALLORVAR NL
                    var _r11: _KotlinParser_Item? = null
                    _r11 = _MemoCall(_memo, "NL", _index.element, ::NL, null)
                    if (_r11 != null) _index.element = _r11.nextIndex

                    // STAR 10
                    val _r10 = _memo.results.pop()
                    if (_r10 != null) {
                        _res10 += _r10.results
                        _label = 10
                        continue
                    } else {
                        _memo.results.push(_KotlinParser_Item(_start_i10, _index.element, _memo.input, _res10.filterNotNull(), true))
                    }

                    _label = 8
                }
                // AND 8
                8 -> {
                    val _r8_2 = _memo.results.pop()
                    val _r8_1 = _memo.results.pop()

                    if (_r8_1 != null && _r8_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i8, _index.element, _memo.input, (_r8_1.results + _r8_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i8
                    }

                    // AND shortcut 7
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 7
                        continue
                    }

                    // CALLORVAR whenSubject
                    var _r14: _KotlinParser_Item? = null
                    _r14 = _MemoCall(_memo, "whenSubject", _index.element, ::whenSubject, null)
                    if (_r14 != null) _index.element = _r14.nextIndex

                    // QUES 13
                    if (_memo.results.peek() == null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_index.element, _memo.input))
                    }
                    // BIND subj
                    subj = _memo.results.peek()

                    _label = 7
                }
                // AND 7
                7 -> {
                    val _r7_2 = _memo.results.pop()
                    val _r7_1 = _memo.results.pop()

                    if (_r7_1 != null && _r7_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i7, _index.element, _memo.input, (_r7_1.results + _r7_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i7
                    }

                    // AND shortcut 6
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 6
                        continue
                    }

                    // STAR 15
                    _start_i15 = _index.element
                    _label = 15
                }
                // STAR 15
                15 -> {
                    // CALLORVAR NL
                    var _r16: _KotlinParser_Item? = null
                    _r16 = _MemoCall(_memo, "NL", _index.element, ::NL, null)
                    if (_r16 != null) _index.element = _r16.nextIndex

                    // STAR 15
                    val _r15 = _memo.results.pop()
                    if (_r15 != null) {
                        _res15 += _r15.results
                        _label = 15
                        continue
                    } else {
                        _memo.results.push(_KotlinParser_Item(_start_i15, _index.element, _memo.input, _res15.filterNotNull(), true))
                    }

                    _label = 6
                }
                // AND 6
                6 -> {
                    val _r6_2 = _memo.results.pop()
                    val _r6_1 = _memo.results.pop()

                    if (_r6_1 != null && _r6_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i6, _index.element, _memo.input, (_r6_1.results + _r6_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i6
                    }

                    // AND shortcut 5
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 5
                        continue
                    }

                    // CALLORVAR LCURL
                    var _r17: _KotlinParser_Item? = null
                    _r17 = _MemoCall(_memo, "LCURL", _index.element, ::LCURL, null)
                    if (_r17 != null) _index.element = _r17.nextIndex

                    _label = 5
                }
                // AND 5
                5 -> {
                    val _r5_2 = _memo.results.pop()
                    val _r5_1 = _memo.results.pop()

                    if (_r5_1 != null && _r5_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i5, _index.element, _memo.input, (_r5_1.results + _r5_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i5
                    }

                    // AND shortcut 4
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 4
                        continue
                    }

                    // STAR 18
                    _start_i18 = _index.element
                    _label = 18
                }
                // STAR 18
                18 -> {
                    // CALLORVAR NL
                    var _r19: _KotlinParser_Item? = null
                    _r19 = _MemoCall(_memo, "NL", _index.element, ::NL, null)
                    if (_r19 != null) _index.element = _r19.nextIndex

                    // STAR 18
                    val _r18 = _memo.results.pop()
                    if (_r18 != null) {
                        _res18 += _r18.results
                        _label = 18
                        continue
                    } else {
                        _memo.results.push(_KotlinParser_Item(_start_i18, _index.element, _memo.input, _res18.filterNotNull(), true))
                    }

                    _label = 4
                }
                // AND 4
                4 -> {
                    val _r4_2 = _memo.results.pop()
                    val _r4_1 = _memo.results.pop()

                    if (_r4_1 != null && _r4_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i4, _index.element, _memo.input, (_r4_1.results + _r4_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i4
                    }

                    // AND shortcut 3
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 3
                        continue
                    }

                    // STAR 21
                    _start_i21 = _index.element
                    _label = 21
                }
                // STAR 21
                21 -> {
                    // AND 22
                    _start_i22 = _index.element

                    // CALLORVAR whenEntry
                    var _r23: _KotlinParser_Item? = null
                    _r23 = _MemoCall(_memo, "whenEntry", _index.element, ::whenEntry, null)
                    if (_r23 != null) _index.element = _r23.nextIndex

                    // AND shortcut 22
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 22
                        continue
                    }

                    // STAR 24
                    _start_i24 = _index.element
                    _label = 24
                }
                // STAR 24
                24 -> {
                    // CALLORVAR NL
                    var _r25: _KotlinParser_Item? = null
                    _r25 = _MemoCall(_memo, "NL", _index.element, ::NL, null)
                    if (_r25 != null) _index.element = _r25.nextIndex

                    // STAR 24
                    val _r24 = _memo.results.pop()
                    if (_r24 != null) {
                        _res24 += _r24.results
                        _label = 24
                        continue
                    } else {
                        _memo.results.push(_KotlinParser_Item(_start_i24, _index.element, _memo.input, _res24.filterNotNull(), true))
                    }

                    _label = 22
                }
                // AND 22
                22 -> {
                    val _r22_2 = _memo.results.pop()
                    val _r22_1 = _memo.results.pop()

                    if (_r22_1 != null && _r22_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i22, _index.element, _memo.input, (_r22_1.results + _r22_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i22
                    }

                    // STAR 21
                    val _r21 = _memo.results.pop()
                    if (_r21 != null) {
                        _res21 += _r21.results
                        _label = 21
                        continue
                    } else {
                        _memo.results.push(_KotlinParser_Item(_start_i21, _index.element, _memo.input, _res21.filterNotNull(), true))
                    }

                    // BIND entries
                    entries = _memo.results.peek()

                    _label = 3
                }
                // AND 3
                3 -> {
                    val _r3_2 = _memo.results.pop()
                    val _r3_1 = _memo.results.pop()

                    if (_r3_1 != null && _r3_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i3, _index.element, _memo.input, (_r3_1.results + _r3_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i3
                    }

                    // AND shortcut 2
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 2
                        continue
                    }

                    // STAR 26
                    _start_i26 = _index.element
                    _label = 26
                }
                // STAR 26
                26 -> {
                    // CALLORVAR NL
                    var _r27: _KotlinParser_Item? = null
                    _r27 = _MemoCall(_memo, "NL", _index.element, ::NL, null)
                    if (_r27 != null) _index.element = _r27.nextIndex

                    // STAR 26
                    val _r26 = _memo.results.pop()
                    if (_r26 != null) {
                        _res26 += _r26.results
                        _label = 26
                        continue
                    } else {
                        _memo.results.push(_KotlinParser_Item(_start_i26, _index.element, _memo.input, _res26.filterNotNull(), true))
                    }

                    _label = 2
                }
                // AND 2
                2 -> {
                    val _r2_2 = _memo.results.pop()
                    val _r2_1 = _memo.results.pop()

                    if (_r2_1 != null && _r2_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i2, _index.element, _memo.input, (_r2_1.results + _r2_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i2
                    }

                    // AND shortcut 1
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 1
                        continue
                    }

                    // CALLORVAR RCURL
                    var _r28: _KotlinParser_Item? = null
                    _r28 = _MemoCall(_memo, "RCURL", _index.element, ::RCURL, null)
                    if (_r28 != null) _index.element = _r28.nextIndex

                    _label = 1
                }
                // AND 1
                1 -> {
                    val _r1_2 = _memo.results.pop()
                    val _r1_1 = _memo.results.pop()

                    if (_r1_1 != null && _r1_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i1, _index.element, _memo.input, (_r1_1.results + _r1_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i1
                    }

                    // ACT 0
                    val _r0 = _memo.results.peek()
                    if (_r0 != null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_r0.startIndex, _r0.nextIndex, _memo.input, _Thunk({ AST.WhenExpression(subj.nr, entries.l) }, _r0), true))
                    }

                    break
                }
            }
        }
    }


    open fun whenEntry(_memo: _KotlinParser_Memo, __index: Int, _args: _KotlinParser_Args?) {
        val _index = Ref.IntRef()
        _index.element = __index

        val _arg_index = Ref.IntRef()
        val _arg_input_index = Ref.IntRef()

        var conds: _KotlinParser_Item? = null
        var b: _KotlinParser_Item? = null

        // OR 0
        var _start_i0 = _index.element

        // AND 2
        var _start_i2 = _index.element

        // AND 3
        var _start_i3 = _index.element

        // AND 4
        var _start_i4 = _index.element

        // AND 5
        var _start_i5 = _index.element

        // AND 6
        var _start_i6 = _index.element

        // AND 7
        var _start_i7 = _index.element

        // AND 9
        var _start_i9 = _index.element

        // STAR 11
        var _start_i11 = _index.element
        val _inp11 = arrayListOf<Token?>()
        val _res11 = arrayListOf<AST.AstNode?>()

        // AND 12
        var _start_i12 = _index.element

        // AND 13
        var _start_i13 = _index.element

        // AND 14
        var _start_i14 = _index.element

        // STAR 15
        var _start_i15 = _index.element
        val _inp15 = arrayListOf<Token?>()
        val _res15 = arrayListOf<AST.AstNode?>()

        // STAR 18
        var _start_i18 = _index.element
        val _inp18 = arrayListOf<Token?>()
        val _res18 = arrayListOf<AST.AstNode?>()

        // AND 22
        var _start_i22 = _index.element

        // STAR 23
        var _start_i23 = _index.element
        val _inp23 = arrayListOf<Token?>()
        val _res23 = arrayListOf<AST.AstNode?>()

        // STAR 26
        var _start_i26 = _index.element
        val _inp26 = arrayListOf<Token?>()
        val _res26 = arrayListOf<AST.AstNode?>()

        // STAR 29
        var _start_i29 = _index.element
        val _inp29 = arrayListOf<Token?>()
        val _res29 = arrayListOf<AST.AstNode?>()

        // AND 36
        var _start_i36 = _index.element

        // AND 37
        var _start_i37 = _index.element

        // AND 38
        var _start_i38 = _index.element

        // AND 39
        var _start_i39 = _index.element

        // AND 40
        var _start_i40 = _index.element

        // STAR 42
        var _start_i42 = _index.element
        val _inp42 = arrayListOf<Token?>()
        val _res42 = arrayListOf<AST.AstNode?>()

        // STAR 45
        var _start_i45 = _index.element
        val _inp45 = arrayListOf<Token?>()
        val _res45 = arrayListOf<AST.AstNode?>()

        var _label = -1
        while(true) {
            when(_label) {
                -1 -> {
                    // OR 0
                    _start_i0 = _index.element

                    // AND 2
                    _start_i2 = _index.element

                    // AND 3
                    _start_i3 = _index.element

                    // AND 4
                    _start_i4 = _index.element

                    // AND 5
                    _start_i5 = _index.element

                    // AND 6
                    _start_i6 = _index.element

                    // AND 7
                    _start_i7 = _index.element

                    // AND 9
                    _start_i9 = _index.element

                    // CALLORVAR whenCondition
                    var _r10: _KotlinParser_Item? = null
                    _r10 = _MemoCall(_memo, "whenCondition", _index.element, ::whenCondition, null)
                    if (_r10 != null) _index.element = _r10.nextIndex

                    // AND shortcut 9
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 9
                        continue
                    }

                    // STAR 11
                    _start_i11 = _index.element
                    _label = 11
                }
                // STAR 11
                11 -> {
                    // AND 12
                    _start_i12 = _index.element

                    // AND 13
                    _start_i13 = _index.element

                    // AND 14
                    _start_i14 = _index.element

                    // STAR 15
                    _start_i15 = _index.element
                    _label = 15
                }
                // STAR 15
                15 -> {
                    // CALLORVAR NL
                    var _r16: _KotlinParser_Item? = null
                    _r16 = _MemoCall(_memo, "NL", _index.element, ::NL, null)
                    if (_r16 != null) _index.element = _r16.nextIndex

                    // STAR 15
                    val _r15 = _memo.results.pop()
                    if (_r15 != null) {
                        _res15 += _r15.results
                        _label = 15
                        continue
                    } else {
                        _memo.results.push(_KotlinParser_Item(_start_i15, _index.element, _memo.input, _res15.filterNotNull(), true))
                    }

                    // AND shortcut 14
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 14
                        continue
                    }

                    // CALLORVAR COMMA
                    var _r17: _KotlinParser_Item? = null
                    _r17 = _MemoCall(_memo, "COMMA", _index.element, ::COMMA, null)
                    if (_r17 != null) _index.element = _r17.nextIndex

                    _label = 14
                }
                // AND 14
                14 -> {
                    val _r14_2 = _memo.results.pop()
                    val _r14_1 = _memo.results.pop()

                    if (_r14_1 != null && _r14_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i14, _index.element, _memo.input, (_r14_1.results + _r14_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i14
                    }

                    // AND shortcut 13
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 13
                        continue
                    }

                    // STAR 18
                    _start_i18 = _index.element
                    _label = 18
                }
                // STAR 18
                18 -> {
                    // CALLORVAR NL
                    var _r19: _KotlinParser_Item? = null
                    _r19 = _MemoCall(_memo, "NL", _index.element, ::NL, null)
                    if (_r19 != null) _index.element = _r19.nextIndex

                    // STAR 18
                    val _r18 = _memo.results.pop()
                    if (_r18 != null) {
                        _res18 += _r18.results
                        _label = 18
                        continue
                    } else {
                        _memo.results.push(_KotlinParser_Item(_start_i18, _index.element, _memo.input, _res18.filterNotNull(), true))
                    }

                    _label = 13
                }
                // AND 13
                13 -> {
                    val _r13_2 = _memo.results.pop()
                    val _r13_1 = _memo.results.pop()

                    if (_r13_1 != null && _r13_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i13, _index.element, _memo.input, (_r13_1.results + _r13_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i13
                    }

                    // AND shortcut 12
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 12
                        continue
                    }

                    // CALLORVAR whenCondition
                    var _r20: _KotlinParser_Item? = null
                    _r20 = _MemoCall(_memo, "whenCondition", _index.element, ::whenCondition, null)
                    if (_r20 != null) _index.element = _r20.nextIndex

                    _label = 12
                }
                // AND 12
                12 -> {
                    val _r12_2 = _memo.results.pop()
                    val _r12_1 = _memo.results.pop()

                    if (_r12_1 != null && _r12_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i12, _index.element, _memo.input, (_r12_1.results + _r12_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i12
                    }

                    // STAR 11
                    val _r11 = _memo.results.pop()
                    if (_r11 != null) {
                        _res11 += _r11.results
                        _label = 11
                        continue
                    } else {
                        _memo.results.push(_KotlinParser_Item(_start_i11, _index.element, _memo.input, _res11.filterNotNull(), true))
                    }

                    _label = 9
                }
                // AND 9
                9 -> {
                    val _r9_2 = _memo.results.pop()
                    val _r9_1 = _memo.results.pop()

                    if (_r9_1 != null && _r9_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i9, _index.element, _memo.input, (_r9_1.results + _r9_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i9
                    }

                    // BIND conds
                    conds = _memo.results.peek()

                    // AND shortcut 7
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 7
                        continue
                    }

                    // AND 22
                    _start_i22 = _index.element

                    // STAR 23
                    _start_i23 = _index.element
                    _label = 23
                }
                // STAR 23
                23 -> {
                    // CALLORVAR NL
                    var _r24: _KotlinParser_Item? = null
                    _r24 = _MemoCall(_memo, "NL", _index.element, ::NL, null)
                    if (_r24 != null) _index.element = _r24.nextIndex

                    // STAR 23
                    val _r23 = _memo.results.pop()
                    if (_r23 != null) {
                        _res23 += _r23.results
                        _label = 23
                        continue
                    } else {
                        _memo.results.push(_KotlinParser_Item(_start_i23, _index.element, _memo.input, _res23.filterNotNull(), true))
                    }

                    // AND shortcut 22
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 22
                        continue
                    }

                    // CALLORVAR COMMA
                    var _r25: _KotlinParser_Item? = null
                    _r25 = _MemoCall(_memo, "COMMA", _index.element, ::COMMA, null)
                    if (_r25 != null) _index.element = _r25.nextIndex

                    _label = 22
                }
                // AND 22
                22 -> {
                    val _r22_2 = _memo.results.pop()
                    val _r22_1 = _memo.results.pop()

                    if (_r22_1 != null && _r22_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i22, _index.element, _memo.input, (_r22_1.results + _r22_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i22
                    }

                    // QUES 21
                    if (_memo.results.peek() == null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_index.element, _memo.input))
                    }
                    _label = 7
                }
                // AND 7
                7 -> {
                    val _r7_2 = _memo.results.pop()
                    val _r7_1 = _memo.results.pop()

                    if (_r7_1 != null && _r7_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i7, _index.element, _memo.input, (_r7_1.results + _r7_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i7
                    }

                    // AND shortcut 6
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 6
                        continue
                    }

                    // STAR 26
                    _start_i26 = _index.element
                    _label = 26
                }
                // STAR 26
                26 -> {
                    // CALLORVAR NL
                    var _r27: _KotlinParser_Item? = null
                    _r27 = _MemoCall(_memo, "NL", _index.element, ::NL, null)
                    if (_r27 != null) _index.element = _r27.nextIndex

                    // STAR 26
                    val _r26 = _memo.results.pop()
                    if (_r26 != null) {
                        _res26 += _r26.results
                        _label = 26
                        continue
                    } else {
                        _memo.results.push(_KotlinParser_Item(_start_i26, _index.element, _memo.input, _res26.filterNotNull(), true))
                    }

                    _label = 6
                }
                // AND 6
                6 -> {
                    val _r6_2 = _memo.results.pop()
                    val _r6_1 = _memo.results.pop()

                    if (_r6_1 != null && _r6_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i6, _index.element, _memo.input, (_r6_1.results + _r6_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i6
                    }

                    // AND shortcut 5
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 5
                        continue
                    }

                    // CALLORVAR ARROW
                    var _r28: _KotlinParser_Item? = null
                    _r28 = _MemoCall(_memo, "ARROW", _index.element, ::ARROW, null)
                    if (_r28 != null) _index.element = _r28.nextIndex

                    _label = 5
                }
                // AND 5
                5 -> {
                    val _r5_2 = _memo.results.pop()
                    val _r5_1 = _memo.results.pop()

                    if (_r5_1 != null && _r5_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i5, _index.element, _memo.input, (_r5_1.results + _r5_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i5
                    }

                    // AND shortcut 4
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 4
                        continue
                    }

                    // STAR 29
                    _start_i29 = _index.element
                    _label = 29
                }
                // STAR 29
                29 -> {
                    // CALLORVAR NL
                    var _r30: _KotlinParser_Item? = null
                    _r30 = _MemoCall(_memo, "NL", _index.element, ::NL, null)
                    if (_r30 != null) _index.element = _r30.nextIndex

                    // STAR 29
                    val _r29 = _memo.results.pop()
                    if (_r29 != null) {
                        _res29 += _r29.results
                        _label = 29
                        continue
                    } else {
                        _memo.results.push(_KotlinParser_Item(_start_i29, _index.element, _memo.input, _res29.filterNotNull(), true))
                    }

                    _label = 4
                }
                // AND 4
                4 -> {
                    val _r4_2 = _memo.results.pop()
                    val _r4_1 = _memo.results.pop()

                    if (_r4_1 != null && _r4_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i4, _index.element, _memo.input, (_r4_1.results + _r4_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i4
                    }

                    // AND shortcut 3
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 3
                        continue
                    }

                    // CALLORVAR controlStructureBody
                    var _r32: _KotlinParser_Item? = null
                    _r32 = _MemoCall(_memo, "controlStructureBody", _index.element, ::controlStructureBody, null)
                    if (_r32 != null) _index.element = _r32.nextIndex

                    // BIND b
                    b = _memo.results.peek()

                    _label = 3
                }
                // AND 3
                3 -> {
                    val _r3_2 = _memo.results.pop()
                    val _r3_1 = _memo.results.pop()

                    if (_r3_1 != null && _r3_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i3, _index.element, _memo.input, (_r3_1.results + _r3_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i3
                    }

                    // AND shortcut 2
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 2
                        continue
                    }

                    // CALLORVAR semi
                    var _r34: _KotlinParser_Item? = null
                    _r34 = _MemoCall(_memo, "semi", _index.element, ::semi, null)
                    if (_r34 != null) _index.element = _r34.nextIndex

                    // QUES 33
                    if (_memo.results.peek() == null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_index.element, _memo.input))
                    }
                    _label = 2
                }
                // AND 2
                2 -> {
                    val _r2_2 = _memo.results.pop()
                    val _r2_1 = _memo.results.pop()

                    if (_r2_1 != null && _r2_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i2, _index.element, _memo.input, (_r2_1.results + _r2_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i2
                    }

                    // ACT 1
                    val _r1 = _memo.results.peek()
                    if (_r1 != null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_r1.startIndex, _r1.nextIndex, _memo.input, _Thunk({ AST.WhenEntry(conds.l, b.r) }, _r1), true))
                    }

                    // OR shortcut 0
                    if (_memo.results.peek() == null) {
                        _memo.results.pop()
                        _index.element = _start_i0
                    } else {
                        _label = 0
                        continue
                    }

                    // AND 36
                    _start_i36 = _index.element

                    // AND 37
                    _start_i37 = _index.element

                    // AND 38
                    _start_i38 = _index.element

                    // AND 39
                    _start_i39 = _index.element

                    // AND 40
                    _start_i40 = _index.element

                    // CALLORVAR ELSE
                    var _r41: _KotlinParser_Item? = null
                    _r41 = _MemoCall(_memo, "ELSE", _index.element, ::ELSE, null)
                    if (_r41 != null) _index.element = _r41.nextIndex

                    // AND shortcut 40
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 40
                        continue
                    }

                    // STAR 42
                    _start_i42 = _index.element
                    _label = 42
                }
                // STAR 42
                42 -> {
                    // CALLORVAR NL
                    var _r43: _KotlinParser_Item? = null
                    _r43 = _MemoCall(_memo, "NL", _index.element, ::NL, null)
                    if (_r43 != null) _index.element = _r43.nextIndex

                    // STAR 42
                    val _r42 = _memo.results.pop()
                    if (_r42 != null) {
                        _res42 += _r42.results
                        _label = 42
                        continue
                    } else {
                        _memo.results.push(_KotlinParser_Item(_start_i42, _index.element, _memo.input, _res42.filterNotNull(), true))
                    }

                    _label = 40
                }
                // AND 40
                40 -> {
                    val _r40_2 = _memo.results.pop()
                    val _r40_1 = _memo.results.pop()

                    if (_r40_1 != null && _r40_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i40, _index.element, _memo.input, (_r40_1.results + _r40_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i40
                    }

                    // AND shortcut 39
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 39
                        continue
                    }

                    // CALLORVAR ARROW
                    var _r44: _KotlinParser_Item? = null
                    _r44 = _MemoCall(_memo, "ARROW", _index.element, ::ARROW, null)
                    if (_r44 != null) _index.element = _r44.nextIndex

                    _label = 39
                }
                // AND 39
                39 -> {
                    val _r39_2 = _memo.results.pop()
                    val _r39_1 = _memo.results.pop()

                    if (_r39_1 != null && _r39_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i39, _index.element, _memo.input, (_r39_1.results + _r39_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i39
                    }

                    // AND shortcut 38
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 38
                        continue
                    }

                    // STAR 45
                    _start_i45 = _index.element
                    _label = 45
                }
                // STAR 45
                45 -> {
                    // CALLORVAR NL
                    var _r46: _KotlinParser_Item? = null
                    _r46 = _MemoCall(_memo, "NL", _index.element, ::NL, null)
                    if (_r46 != null) _index.element = _r46.nextIndex

                    // STAR 45
                    val _r45 = _memo.results.pop()
                    if (_r45 != null) {
                        _res45 += _r45.results
                        _label = 45
                        continue
                    } else {
                        _memo.results.push(_KotlinParser_Item(_start_i45, _index.element, _memo.input, _res45.filterNotNull(), true))
                    }

                    _label = 38
                }
                // AND 38
                38 -> {
                    val _r38_2 = _memo.results.pop()
                    val _r38_1 = _memo.results.pop()

                    if (_r38_1 != null && _r38_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i38, _index.element, _memo.input, (_r38_1.results + _r38_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i38
                    }

                    // AND shortcut 37
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 37
                        continue
                    }

                    // CALLORVAR controlStructureBody
                    var _r48: _KotlinParser_Item? = null
                    _r48 = _MemoCall(_memo, "controlStructureBody", _index.element, ::controlStructureBody, null)
                    if (_r48 != null) _index.element = _r48.nextIndex

                    // BIND b
                    b = _memo.results.peek()

                    _label = 37
                }
                // AND 37
                37 -> {
                    val _r37_2 = _memo.results.pop()
                    val _r37_1 = _memo.results.pop()

                    if (_r37_1 != null && _r37_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i37, _index.element, _memo.input, (_r37_1.results + _r37_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i37
                    }

                    // AND shortcut 36
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 36
                        continue
                    }

                    // CALLORVAR semi
                    var _r50: _KotlinParser_Item? = null
                    _r50 = _MemoCall(_memo, "semi", _index.element, ::semi, null)
                    if (_r50 != null) _index.element = _r50.nextIndex

                    // QUES 49
                    if (_memo.results.peek() == null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_index.element, _memo.input))
                    }
                    _label = 36
                }
                // AND 36
                36 -> {
                    val _r36_2 = _memo.results.pop()
                    val _r36_1 = _memo.results.pop()

                    if (_r36_1 != null && _r36_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i36, _index.element, _memo.input, (_r36_1.results + _r36_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i36
                    }

                    // ACT 35
                    val _r35 = _memo.results.peek()
                    if (_r35 != null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_r35.startIndex, _r35.nextIndex, _memo.input, _Thunk({ AST.WhenEntry(null, b.r) }, _r35), true))
                    }

                    _label = 0
                }
                // OR 0
                0 -> {
                    break
                }
            }
        }
    }


    open fun whenCondition(_memo: _KotlinParser_Memo, __index: Int, _args: _KotlinParser_Args?) {
        val _index = Ref.IntRef()
        _index.element = __index

        val _arg_index = Ref.IntRef()
        val _arg_input_index = Ref.IntRef()

        // OR 0
        var _start_i0 = _index.element

        // OR 1
        var _start_i1 = _index.element

        var _label = -1
        while(true) {
            when(_label) {
                -1 -> {
                    // OR 0
                    _start_i0 = _index.element

                    // OR 1
                    _start_i1 = _index.element

                    // CALLORVAR expression
                    var _r2: _KotlinParser_Item? = null
                    _r2 = _MemoCall(_memo, "expression", _index.element, ::expression, null)
                    if (_r2 != null) _index.element = _r2.nextIndex

                    // OR shortcut 1
                    if (_memo.results.peek() == null) {
                        _memo.results.pop()
                        _index.element = _start_i1
                    } else {
                        _label = 1
                        continue
                    }

                    // CALLORVAR isCheck
                    var _r3: _KotlinParser_Item? = null
                    _r3 = _MemoCall(_memo, "isCheck", _index.element, ::isCheck, null)
                    if (_r3 != null) _index.element = _r3.nextIndex

                    _label = 1
                }
                // OR 1
                1 -> {
                    // OR shortcut 0
                    if (_memo.results.peek() == null) {
                        _memo.results.pop()
                        _index.element = _start_i0
                    } else {
                        _label = 0
                        continue
                    }

                    // CALLORVAR inCheck
                    var _r4: _KotlinParser_Item? = null
                    _r4 = _MemoCall(_memo, "inCheck", _index.element, ::inCheck, null)
                    if (_r4 != null) _index.element = _r4.nextIndex

                    _label = 0
                }
                // OR 0
                0 -> {
                    break
                }
            }
        }
    }


    open fun tryExpression(_memo: _KotlinParser_Memo, __index: Int, _args: _KotlinParser_Args?) {
        val _index = Ref.IntRef()
        _index.element = __index

        val _arg_index = Ref.IntRef()
        val _arg_input_index = Ref.IntRef()

        var b: _KotlinParser_Item? = null
        var cs: _KotlinParser_Item? = null
        var fb: _KotlinParser_Item? = null

        // OR 0
        var _start_i0 = _index.element

        // AND 2
        var _start_i2 = _index.element

        // AND 3
        var _start_i3 = _index.element

        // AND 4
        var _start_i4 = _index.element

        // AND 5
        var _start_i5 = _index.element

        // STAR 7
        var _start_i7 = _index.element
        val _inp7 = arrayListOf<Token?>()
        val _res7 = arrayListOf<AST.AstNode?>()

        // PLUS 12
        var _start_i12 = _index.element
        val _inp12 = arrayListOf<Token?>()
        val _res12 = arrayListOf<AST.AstNode?>()

        // AND 13
        var _start_i13 = _index.element

        // STAR 14
        var _start_i14 = _index.element
        val _inp14 = arrayListOf<Token?>()
        val _res14 = arrayListOf<AST.AstNode?>()

        // AND 18
        var _start_i18 = _index.element

        // STAR 19
        var _start_i19 = _index.element
        val _inp19 = arrayListOf<Token?>()
        val _res19 = arrayListOf<AST.AstNode?>()

        // AND 24
        var _start_i24 = _index.element

        // AND 25
        var _start_i25 = _index.element

        // AND 26
        var _start_i26 = _index.element

        // AND 27
        var _start_i27 = _index.element

        // STAR 29
        var _start_i29 = _index.element
        val _inp29 = arrayListOf<Token?>()
        val _res29 = arrayListOf<AST.AstNode?>()

        // STAR 33
        var _start_i33 = _index.element
        val _inp33 = arrayListOf<Token?>()
        val _res33 = arrayListOf<AST.AstNode?>()

        var _label = -1
        while(true) {
            when(_label) {
                -1 -> {
                    // OR 0
                    _start_i0 = _index.element

                    // AND 2
                    _start_i2 = _index.element

                    // AND 3
                    _start_i3 = _index.element

                    // AND 4
                    _start_i4 = _index.element

                    // AND 5
                    _start_i5 = _index.element

                    // CALLORVAR TRY
                    var _r6: _KotlinParser_Item? = null
                    _r6 = _MemoCall(_memo, "TRY", _index.element, ::TRY, null)
                    if (_r6 != null) _index.element = _r6.nextIndex

                    // AND shortcut 5
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 5
                        continue
                    }

                    // STAR 7
                    _start_i7 = _index.element
                    _label = 7
                }
                // STAR 7
                7 -> {
                    // CALLORVAR NL
                    var _r8: _KotlinParser_Item? = null
                    _r8 = _MemoCall(_memo, "NL", _index.element, ::NL, null)
                    if (_r8 != null) _index.element = _r8.nextIndex

                    // STAR 7
                    val _r7 = _memo.results.pop()
                    if (_r7 != null) {
                        _res7 += _r7.results
                        _label = 7
                        continue
                    } else {
                        _memo.results.push(_KotlinParser_Item(_start_i7, _index.element, _memo.input, _res7.filterNotNull(), true))
                    }

                    _label = 5
                }
                // AND 5
                5 -> {
                    val _r5_2 = _memo.results.pop()
                    val _r5_1 = _memo.results.pop()

                    if (_r5_1 != null && _r5_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i5, _index.element, _memo.input, (_r5_1.results + _r5_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i5
                    }

                    // AND shortcut 4
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 4
                        continue
                    }

                    // CALLORVAR block
                    var _r10: _KotlinParser_Item? = null
                    _r10 = _MemoCall(_memo, "block", _index.element, ::block, null)
                    if (_r10 != null) _index.element = _r10.nextIndex

                    // BIND b
                    b = _memo.results.peek()

                    _label = 4
                }
                // AND 4
                4 -> {
                    val _r4_2 = _memo.results.pop()
                    val _r4_1 = _memo.results.pop()

                    if (_r4_1 != null && _r4_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i4, _index.element, _memo.input, (_r4_1.results + _r4_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i4
                    }

                    // AND shortcut 3
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 3
                        continue
                    }

                    // PLUS 12
                    _start_i12 = _index.element
                    _label = 12
                }
                // PLUS 12
                12 -> {
                    // AND 13
                    _start_i13 = _index.element

                    // STAR 14
                    _start_i14 = _index.element
                    _label = 14
                }
                // STAR 14
                14 -> {
                    // CALLORVAR NL
                    var _r15: _KotlinParser_Item? = null
                    _r15 = _MemoCall(_memo, "NL", _index.element, ::NL, null)
                    if (_r15 != null) _index.element = _r15.nextIndex

                    // STAR 14
                    val _r14 = _memo.results.pop()
                    if (_r14 != null) {
                        _res14 += _r14.results
                        _label = 14
                        continue
                    } else {
                        _memo.results.push(_KotlinParser_Item(_start_i14, _index.element, _memo.input, _res14.filterNotNull(), true))
                    }

                    // AND shortcut 13
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 13
                        continue
                    }

                    // CALLORVAR catchBlock
                    var _r16: _KotlinParser_Item? = null
                    _r16 = _MemoCall(_memo, "catchBlock", _index.element, ::catchBlock, null)
                    if (_r16 != null) _index.element = _r16.nextIndex

                    _label = 13
                }
                // AND 13
                13 -> {
                    val _r13_2 = _memo.results.pop()
                    val _r13_1 = _memo.results.pop()

                    if (_r13_1 != null && _r13_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i13, _index.element, _memo.input, (_r13_1.results + _r13_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i13
                    }

                    // PLUS 12
                    val _r12 = _memo.results.pop()
                    if (_r12 != null) {
                        _res12 += _r12.results
                        _label = 12
                        continue
                    } else {
                        if (_index.element > _start_i12) {
                            _memo.results.push(_KotlinParser_Item(_start_i12, _index.element, _memo.input, _res12.filterNotNull(), true))
                        } else {
                            _memo.results.push(null)
                        }
                    }

                    // BIND cs
                    cs = _memo.results.peek()

                    _label = 3
                }
                // AND 3
                3 -> {
                    val _r3_2 = _memo.results.pop()
                    val _r3_1 = _memo.results.pop()

                    if (_r3_1 != null && _r3_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i3, _index.element, _memo.input, (_r3_1.results + _r3_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i3
                    }

                    // AND shortcut 2
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 2
                        continue
                    }

                    // AND 18
                    _start_i18 = _index.element

                    // STAR 19
                    _start_i19 = _index.element
                    _label = 19
                }
                // STAR 19
                19 -> {
                    // CALLORVAR NL
                    var _r20: _KotlinParser_Item? = null
                    _r20 = _MemoCall(_memo, "NL", _index.element, ::NL, null)
                    if (_r20 != null) _index.element = _r20.nextIndex

                    // STAR 19
                    val _r19 = _memo.results.pop()
                    if (_r19 != null) {
                        _res19 += _r19.results
                        _label = 19
                        continue
                    } else {
                        _memo.results.push(_KotlinParser_Item(_start_i19, _index.element, _memo.input, _res19.filterNotNull(), true))
                    }

                    // AND shortcut 18
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 18
                        continue
                    }

                    // CALLORVAR finallyBlock
                    var _r22: _KotlinParser_Item? = null
                    _r22 = _MemoCall(_memo, "finallyBlock", _index.element, ::finallyBlock, null)
                    if (_r22 != null) _index.element = _r22.nextIndex

                    // BIND fb
                    fb = _memo.results.peek()

                    _label = 18
                }
                // AND 18
                18 -> {
                    val _r18_2 = _memo.results.pop()
                    val _r18_1 = _memo.results.pop()

                    if (_r18_1 != null && _r18_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i18, _index.element, _memo.input, (_r18_1.results + _r18_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i18
                    }

                    // QUES 17
                    if (_memo.results.peek() == null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_index.element, _memo.input))
                    }
                    _label = 2
                }
                // AND 2
                2 -> {
                    val _r2_2 = _memo.results.pop()
                    val _r2_1 = _memo.results.pop()

                    if (_r2_1 != null && _r2_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i2, _index.element, _memo.input, (_r2_1.results + _r2_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i2
                    }

                    // ACT 1
                    val _r1 = _memo.results.peek()
                    if (_r1 != null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_r1.startIndex, _r1.nextIndex, _memo.input, _Thunk({ AST.TryExpression(b.r, cs.l, fb.nr) }, _r1), true))
                    }

                    // OR shortcut 0
                    if (_memo.results.peek() == null) {
                        _memo.results.pop()
                        _index.element = _start_i0
                    } else {
                        _label = 0
                        continue
                    }

                    // AND 24
                    _start_i24 = _index.element

                    // AND 25
                    _start_i25 = _index.element

                    // AND 26
                    _start_i26 = _index.element

                    // AND 27
                    _start_i27 = _index.element

                    // CALLORVAR TRY
                    var _r28: _KotlinParser_Item? = null
                    _r28 = _MemoCall(_memo, "TRY", _index.element, ::TRY, null)
                    if (_r28 != null) _index.element = _r28.nextIndex

                    // AND shortcut 27
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 27
                        continue
                    }

                    // STAR 29
                    _start_i29 = _index.element
                    _label = 29
                }
                // STAR 29
                29 -> {
                    // CALLORVAR NL
                    var _r30: _KotlinParser_Item? = null
                    _r30 = _MemoCall(_memo, "NL", _index.element, ::NL, null)
                    if (_r30 != null) _index.element = _r30.nextIndex

                    // STAR 29
                    val _r29 = _memo.results.pop()
                    if (_r29 != null) {
                        _res29 += _r29.results
                        _label = 29
                        continue
                    } else {
                        _memo.results.push(_KotlinParser_Item(_start_i29, _index.element, _memo.input, _res29.filterNotNull(), true))
                    }

                    _label = 27
                }
                // AND 27
                27 -> {
                    val _r27_2 = _memo.results.pop()
                    val _r27_1 = _memo.results.pop()

                    if (_r27_1 != null && _r27_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i27, _index.element, _memo.input, (_r27_1.results + _r27_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i27
                    }

                    // AND shortcut 26
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 26
                        continue
                    }

                    // CALLORVAR block
                    var _r32: _KotlinParser_Item? = null
                    _r32 = _MemoCall(_memo, "block", _index.element, ::block, null)
                    if (_r32 != null) _index.element = _r32.nextIndex

                    // BIND b
                    b = _memo.results.peek()

                    _label = 26
                }
                // AND 26
                26 -> {
                    val _r26_2 = _memo.results.pop()
                    val _r26_1 = _memo.results.pop()

                    if (_r26_1 != null && _r26_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i26, _index.element, _memo.input, (_r26_1.results + _r26_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i26
                    }

                    // AND shortcut 25
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 25
                        continue
                    }

                    // STAR 33
                    _start_i33 = _index.element
                    _label = 33
                }
                // STAR 33
                33 -> {
                    // CALLORVAR NL
                    var _r34: _KotlinParser_Item? = null
                    _r34 = _MemoCall(_memo, "NL", _index.element, ::NL, null)
                    if (_r34 != null) _index.element = _r34.nextIndex

                    // STAR 33
                    val _r33 = _memo.results.pop()
                    if (_r33 != null) {
                        _res33 += _r33.results
                        _label = 33
                        continue
                    } else {
                        _memo.results.push(_KotlinParser_Item(_start_i33, _index.element, _memo.input, _res33.filterNotNull(), true))
                    }

                    _label = 25
                }
                // AND 25
                25 -> {
                    val _r25_2 = _memo.results.pop()
                    val _r25_1 = _memo.results.pop()

                    if (_r25_1 != null && _r25_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i25, _index.element, _memo.input, (_r25_1.results + _r25_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i25
                    }

                    // AND shortcut 24
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 24
                        continue
                    }

                    // CALLORVAR finallyBlock
                    var _r36: _KotlinParser_Item? = null
                    _r36 = _MemoCall(_memo, "finallyBlock", _index.element, ::finallyBlock, null)
                    if (_r36 != null) _index.element = _r36.nextIndex

                    // BIND fb
                    fb = _memo.results.peek()

                    _label = 24
                }
                // AND 24
                24 -> {
                    val _r24_2 = _memo.results.pop()
                    val _r24_1 = _memo.results.pop()

                    if (_r24_1 != null && _r24_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i24, _index.element, _memo.input, (_r24_1.results + _r24_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i24
                    }

                    // ACT 23
                    val _r23 = _memo.results.peek()
                    if (_r23 != null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_r23.startIndex, _r23.nextIndex, _memo.input, _Thunk({ AST.TryExpression(b.r, emptyList(), fb.r) }, _r23), true))
                    }

                    _label = 0
                }
                // OR 0
                0 -> {
                    break
                }
            }
        }
    }


    open fun catchBlock(_memo: _KotlinParser_Memo, __index: Int, _args: _KotlinParser_Args?) {
        val _index = Ref.IntRef()
        _index.element = __index

        val _arg_index = Ref.IntRef()
        val _arg_input_index = Ref.IntRef()

        var anns: _KotlinParser_Item? = null
        var name: _KotlinParser_Item? = null
        var t: _KotlinParser_Item? = null
        var b: _KotlinParser_Item? = null

        // AND 1
        var _start_i1 = _index.element

        // AND 2
        var _start_i2 = _index.element

        // AND 3
        var _start_i3 = _index.element

        // AND 4
        var _start_i4 = _index.element

        // AND 5
        var _start_i5 = _index.element

        // AND 6
        var _start_i6 = _index.element

        // AND 7
        var _start_i7 = _index.element

        // AND 8
        var _start_i8 = _index.element

        // AND 9
        var _start_i9 = _index.element

        // AND 10
        var _start_i10 = _index.element

        // STAR 12
        var _start_i12 = _index.element
        val _inp12 = arrayListOf<Token?>()
        val _res12 = arrayListOf<AST.AstNode?>()

        // STAR 16
        var _start_i16 = _index.element
        val _inp16 = arrayListOf<Token?>()
        val _res16 = arrayListOf<AST.AstNode?>()

        // AND 24
        var _start_i24 = _index.element

        // STAR 25
        var _start_i25 = _index.element
        val _inp25 = arrayListOf<Token?>()
        val _res25 = arrayListOf<AST.AstNode?>()

        // STAR 29
        var _start_i29 = _index.element
        val _inp29 = arrayListOf<Token?>()
        val _res29 = arrayListOf<AST.AstNode?>()

        var _label = -1
        while(true) {
            when(_label) {
                -1 -> {
                    // AND 1
                    _start_i1 = _index.element

                    // AND 2
                    _start_i2 = _index.element

                    // AND 3
                    _start_i3 = _index.element

                    // AND 4
                    _start_i4 = _index.element

                    // AND 5
                    _start_i5 = _index.element

                    // AND 6
                    _start_i6 = _index.element

                    // AND 7
                    _start_i7 = _index.element

                    // AND 8
                    _start_i8 = _index.element

                    // AND 9
                    _start_i9 = _index.element

                    // AND 10
                    _start_i10 = _index.element

                    // CALLORVAR CATCH
                    var _r11: _KotlinParser_Item? = null
                    _r11 = _MemoCall(_memo, "CATCH", _index.element, ::CATCH, null)
                    if (_r11 != null) _index.element = _r11.nextIndex

                    // AND shortcut 10
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 10
                        continue
                    }

                    // STAR 12
                    _start_i12 = _index.element
                    _label = 12
                }
                // STAR 12
                12 -> {
                    // CALLORVAR NL
                    var _r13: _KotlinParser_Item? = null
                    _r13 = _MemoCall(_memo, "NL", _index.element, ::NL, null)
                    if (_r13 != null) _index.element = _r13.nextIndex

                    // STAR 12
                    val _r12 = _memo.results.pop()
                    if (_r12 != null) {
                        _res12 += _r12.results
                        _label = 12
                        continue
                    } else {
                        _memo.results.push(_KotlinParser_Item(_start_i12, _index.element, _memo.input, _res12.filterNotNull(), true))
                    }

                    _label = 10
                }
                // AND 10
                10 -> {
                    val _r10_2 = _memo.results.pop()
                    val _r10_1 = _memo.results.pop()

                    if (_r10_1 != null && _r10_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i10, _index.element, _memo.input, (_r10_1.results + _r10_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i10
                    }

                    // AND shortcut 9
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 9
                        continue
                    }

                    // CALLORVAR LPAREN
                    var _r14: _KotlinParser_Item? = null
                    _r14 = _MemoCall(_memo, "LPAREN", _index.element, ::LPAREN, null)
                    if (_r14 != null) _index.element = _r14.nextIndex

                    _label = 9
                }
                // AND 9
                9 -> {
                    val _r9_2 = _memo.results.pop()
                    val _r9_1 = _memo.results.pop()

                    if (_r9_1 != null && _r9_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i9, _index.element, _memo.input, (_r9_1.results + _r9_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i9
                    }

                    // AND shortcut 8
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 8
                        continue
                    }

                    // STAR 16
                    _start_i16 = _index.element
                    _label = 16
                }
                // STAR 16
                16 -> {
                    // CALLORVAR annotation
                    var _r17: _KotlinParser_Item? = null
                    _r17 = _MemoCall(_memo, "annotation", _index.element, ::annotation, null)
                    if (_r17 != null) _index.element = _r17.nextIndex

                    // STAR 16
                    val _r16 = _memo.results.pop()
                    if (_r16 != null) {
                        _res16 += _r16.results
                        _label = 16
                        continue
                    } else {
                        _memo.results.push(_KotlinParser_Item(_start_i16, _index.element, _memo.input, _res16.filterNotNull(), true))
                    }

                    // BIND anns
                    anns = _memo.results.peek()

                    _label = 8
                }
                // AND 8
                8 -> {
                    val _r8_2 = _memo.results.pop()
                    val _r8_1 = _memo.results.pop()

                    if (_r8_1 != null && _r8_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i8, _index.element, _memo.input, (_r8_1.results + _r8_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i8
                    }

                    // AND shortcut 7
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 7
                        continue
                    }

                    // CALLORVAR simpleIdentifier
                    var _r19: _KotlinParser_Item? = null
                    _r19 = _MemoCall(_memo, "simpleIdentifier", _index.element, ::simpleIdentifier, null)
                    if (_r19 != null) _index.element = _r19.nextIndex

                    // BIND name
                    name = _memo.results.peek()

                    _label = 7
                }
                // AND 7
                7 -> {
                    val _r7_2 = _memo.results.pop()
                    val _r7_1 = _memo.results.pop()

                    if (_r7_1 != null && _r7_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i7, _index.element, _memo.input, (_r7_1.results + _r7_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i7
                    }

                    // AND shortcut 6
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 6
                        continue
                    }

                    // CALLORVAR COLON
                    var _r20: _KotlinParser_Item? = null
                    _r20 = _MemoCall(_memo, "COLON", _index.element, ::COLON, null)
                    if (_r20 != null) _index.element = _r20.nextIndex

                    _label = 6
                }
                // AND 6
                6 -> {
                    val _r6_2 = _memo.results.pop()
                    val _r6_1 = _memo.results.pop()

                    if (_r6_1 != null && _r6_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i6, _index.element, _memo.input, (_r6_1.results + _r6_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i6
                    }

                    // AND shortcut 5
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 5
                        continue
                    }

                    // CALLORVAR type
                    var _r22: _KotlinParser_Item? = null
                    _r22 = _MemoCall(_memo, "type", _index.element, ::type, null)
                    if (_r22 != null) _index.element = _r22.nextIndex

                    // BIND t
                    t = _memo.results.peek()

                    _label = 5
                }
                // AND 5
                5 -> {
                    val _r5_2 = _memo.results.pop()
                    val _r5_1 = _memo.results.pop()

                    if (_r5_1 != null && _r5_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i5, _index.element, _memo.input, (_r5_1.results + _r5_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i5
                    }

                    // AND shortcut 4
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 4
                        continue
                    }

                    // AND 24
                    _start_i24 = _index.element

                    // STAR 25
                    _start_i25 = _index.element
                    _label = 25
                }
                // STAR 25
                25 -> {
                    // CALLORVAR NL
                    var _r26: _KotlinParser_Item? = null
                    _r26 = _MemoCall(_memo, "NL", _index.element, ::NL, null)
                    if (_r26 != null) _index.element = _r26.nextIndex

                    // STAR 25
                    val _r25 = _memo.results.pop()
                    if (_r25 != null) {
                        _res25 += _r25.results
                        _label = 25
                        continue
                    } else {
                        _memo.results.push(_KotlinParser_Item(_start_i25, _index.element, _memo.input, _res25.filterNotNull(), true))
                    }

                    // AND shortcut 24
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 24
                        continue
                    }

                    // CALLORVAR COMMA
                    var _r27: _KotlinParser_Item? = null
                    _r27 = _MemoCall(_memo, "COMMA", _index.element, ::COMMA, null)
                    if (_r27 != null) _index.element = _r27.nextIndex

                    _label = 24
                }
                // AND 24
                24 -> {
                    val _r24_2 = _memo.results.pop()
                    val _r24_1 = _memo.results.pop()

                    if (_r24_1 != null && _r24_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i24, _index.element, _memo.input, (_r24_1.results + _r24_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i24
                    }

                    // QUES 23
                    if (_memo.results.peek() == null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_index.element, _memo.input))
                    }
                    _label = 4
                }
                // AND 4
                4 -> {
                    val _r4_2 = _memo.results.pop()
                    val _r4_1 = _memo.results.pop()

                    if (_r4_1 != null && _r4_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i4, _index.element, _memo.input, (_r4_1.results + _r4_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i4
                    }

                    // AND shortcut 3
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 3
                        continue
                    }

                    // CALLORVAR RPAREN
                    var _r28: _KotlinParser_Item? = null
                    _r28 = _MemoCall(_memo, "RPAREN", _index.element, ::RPAREN, null)
                    if (_r28 != null) _index.element = _r28.nextIndex

                    _label = 3
                }
                // AND 3
                3 -> {
                    val _r3_2 = _memo.results.pop()
                    val _r3_1 = _memo.results.pop()

                    if (_r3_1 != null && _r3_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i3, _index.element, _memo.input, (_r3_1.results + _r3_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i3
                    }

                    // AND shortcut 2
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 2
                        continue
                    }

                    // STAR 29
                    _start_i29 = _index.element
                    _label = 29
                }
                // STAR 29
                29 -> {
                    // CALLORVAR NL
                    var _r30: _KotlinParser_Item? = null
                    _r30 = _MemoCall(_memo, "NL", _index.element, ::NL, null)
                    if (_r30 != null) _index.element = _r30.nextIndex

                    // STAR 29
                    val _r29 = _memo.results.pop()
                    if (_r29 != null) {
                        _res29 += _r29.results
                        _label = 29
                        continue
                    } else {
                        _memo.results.push(_KotlinParser_Item(_start_i29, _index.element, _memo.input, _res29.filterNotNull(), true))
                    }

                    _label = 2
                }
                // AND 2
                2 -> {
                    val _r2_2 = _memo.results.pop()
                    val _r2_1 = _memo.results.pop()

                    if (_r2_1 != null && _r2_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i2, _index.element, _memo.input, (_r2_1.results + _r2_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i2
                    }

                    // AND shortcut 1
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 1
                        continue
                    }

                    // CALLORVAR block
                    var _r32: _KotlinParser_Item? = null
                    _r32 = _MemoCall(_memo, "block", _index.element, ::block, null)
                    if (_r32 != null) _index.element = _r32.nextIndex

                    // BIND b
                    b = _memo.results.peek()

                    _label = 1
                }
                // AND 1
                1 -> {
                    val _r1_2 = _memo.results.pop()
                    val _r1_1 = _memo.results.pop()

                    if (_r1_1 != null && _r1_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i1, _index.element, _memo.input, (_r1_1.results + _r1_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i1
                    }

                    // ACT 0
                    val _r0 = _memo.results.peek()
                    if (_r0 != null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_r0.startIndex, _r0.nextIndex, _memo.input, _Thunk({ AST.CatchBlock(anns.l, name.s, t.r, b.r) }, _r0), true))
                    }

                    break
                }
            }
        }
    }


    open fun finallyBlock(_memo: _KotlinParser_Memo, __index: Int, _args: _KotlinParser_Args?) {
        val _index = Ref.IntRef()
        _index.element = __index

        val _arg_index = Ref.IntRef()
        val _arg_input_index = Ref.IntRef()

        var b: _KotlinParser_Item? = null

        // AND 1
        var _start_i1 = _index.element

        // AND 2
        var _start_i2 = _index.element

        // STAR 4
        var _start_i4 = _index.element
        val _inp4 = arrayListOf<Token?>()
        val _res4 = arrayListOf<AST.AstNode?>()

        var _label = -1
        while(true) {
            when(_label) {
                -1 -> {
                    // AND 1
                    _start_i1 = _index.element

                    // AND 2
                    _start_i2 = _index.element

                    // CALLORVAR FINALLY
                    var _r3: _KotlinParser_Item? = null
                    _r3 = _MemoCall(_memo, "FINALLY", _index.element, ::FINALLY, null)
                    if (_r3 != null) _index.element = _r3.nextIndex

                    // AND shortcut 2
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 2
                        continue
                    }

                    // STAR 4
                    _start_i4 = _index.element
                    _label = 4
                }
                // STAR 4
                4 -> {
                    // CALLORVAR NL
                    var _r5: _KotlinParser_Item? = null
                    _r5 = _MemoCall(_memo, "NL", _index.element, ::NL, null)
                    if (_r5 != null) _index.element = _r5.nextIndex

                    // STAR 4
                    val _r4 = _memo.results.pop()
                    if (_r4 != null) {
                        _res4 += _r4.results
                        _label = 4
                        continue
                    } else {
                        _memo.results.push(_KotlinParser_Item(_start_i4, _index.element, _memo.input, _res4.filterNotNull(), true))
                    }

                    _label = 2
                }
                // AND 2
                2 -> {
                    val _r2_2 = _memo.results.pop()
                    val _r2_1 = _memo.results.pop()

                    if (_r2_1 != null && _r2_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i2, _index.element, _memo.input, (_r2_1.results + _r2_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i2
                    }

                    // AND shortcut 1
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 1
                        continue
                    }

                    // CALLORVAR block
                    var _r7: _KotlinParser_Item? = null
                    _r7 = _MemoCall(_memo, "block", _index.element, ::block, null)
                    if (_r7 != null) _index.element = _r7.nextIndex

                    // BIND b
                    b = _memo.results.peek()

                    _label = 1
                }
                // AND 1
                1 -> {
                    val _r1_2 = _memo.results.pop()
                    val _r1_1 = _memo.results.pop()

                    if (_r1_1 != null && _r1_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i1, _index.element, _memo.input, (_r1_1.results + _r1_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i1
                    }

                    // ACT 0
                    val _r0 = _memo.results.peek()
                    if (_r0 != null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_r0.startIndex, _r0.nextIndex, _memo.input, _Thunk({ b.r }, _r0), true))
                    }

                    break
                }
            }
        }
    }


    open fun jumpExpression(_memo: _KotlinParser_Memo, __index: Int, _args: _KotlinParser_Args?) {
        val _index = Ref.IntRef()
        _index.element = __index

        val _arg_index = Ref.IntRef()
        val _arg_input_index = Ref.IntRef()

        var expr: _KotlinParser_Item? = null
        var label: _KotlinParser_Item? = null

        // OR 0
        var _start_i0 = _index.element

        // OR 1
        var _start_i1 = _index.element

        // OR 2
        var _start_i2 = _index.element

        // OR 3
        var _start_i3 = _index.element

        // OR 4
        var _start_i4 = _index.element

        // OR 5
        var _start_i5 = _index.element

        // AND 7
        var _start_i7 = _index.element

        // AND 8
        var _start_i8 = _index.element

        // STAR 10
        var _start_i10 = _index.element
        val _inp10 = arrayListOf<Token?>()
        val _res10 = arrayListOf<AST.AstNode?>()

        // AND 15
        var _start_i15 = _index.element

        // AND 21
        var _start_i21 = _index.element

        var _label = -1
        while(true) {
            when(_label) {
                -1 -> {
                    // OR 0
                    _start_i0 = _index.element

                    // OR 1
                    _start_i1 = _index.element

                    // OR 2
                    _start_i2 = _index.element

                    // OR 3
                    _start_i3 = _index.element

                    // OR 4
                    _start_i4 = _index.element

                    // OR 5
                    _start_i5 = _index.element

                    // AND 7
                    _start_i7 = _index.element

                    // AND 8
                    _start_i8 = _index.element

                    // CALLORVAR THROW
                    var _r9: _KotlinParser_Item? = null
                    _r9 = _MemoCall(_memo, "THROW", _index.element, ::THROW, null)
                    if (_r9 != null) _index.element = _r9.nextIndex

                    // AND shortcut 8
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 8
                        continue
                    }

                    // STAR 10
                    _start_i10 = _index.element
                    _label = 10
                }
                // STAR 10
                10 -> {
                    // CALLORVAR NL
                    var _r11: _KotlinParser_Item? = null
                    _r11 = _MemoCall(_memo, "NL", _index.element, ::NL, null)
                    if (_r11 != null) _index.element = _r11.nextIndex

                    // STAR 10
                    val _r10 = _memo.results.pop()
                    if (_r10 != null) {
                        _res10 += _r10.results
                        _label = 10
                        continue
                    } else {
                        _memo.results.push(_KotlinParser_Item(_start_i10, _index.element, _memo.input, _res10.filterNotNull(), true))
                    }

                    _label = 8
                }
                // AND 8
                8 -> {
                    val _r8_2 = _memo.results.pop()
                    val _r8_1 = _memo.results.pop()

                    if (_r8_1 != null && _r8_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i8, _index.element, _memo.input, (_r8_1.results + _r8_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i8
                    }

                    // AND shortcut 7
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 7
                        continue
                    }

                    // CALLORVAR expression
                    var _r13: _KotlinParser_Item? = null
                    _r13 = _MemoCall(_memo, "expression", _index.element, ::expression, null)
                    if (_r13 != null) _index.element = _r13.nextIndex

                    // BIND expr
                    expr = _memo.results.peek()

                    _label = 7
                }
                // AND 7
                7 -> {
                    val _r7_2 = _memo.results.pop()
                    val _r7_1 = _memo.results.pop()

                    if (_r7_1 != null && _r7_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i7, _index.element, _memo.input, (_r7_1.results + _r7_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i7
                    }

                    // ACT 6
                    val _r6 = _memo.results.peek()
                    if (_r6 != null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_r6.startIndex, _r6.nextIndex, _memo.input, _Thunk({ AST.Throw(expr.r) }, _r6), true))
                    }

                    // OR shortcut 5
                    if (_memo.results.peek() == null) {
                        _memo.results.pop()
                        _index.element = _start_i5
                    } else {
                        _label = 5
                        continue
                    }

                    // AND 15
                    _start_i15 = _index.element

                    // CALLORVAR RETURN
                    var _r16: _KotlinParser_Item? = null
                    _r16 = _MemoCall(_memo, "RETURN", _index.element, ::RETURN, null)
                    if (_r16 != null) _index.element = _r16.nextIndex

                    // AND shortcut 15
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 15
                        continue
                    }

                    // CALLORVAR expression
                    var _r19: _KotlinParser_Item? = null
                    _r19 = _MemoCall(_memo, "expression", _index.element, ::expression, null)
                    if (_r19 != null) _index.element = _r19.nextIndex

                    // QUES 18
                    if (_memo.results.peek() == null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_index.element, _memo.input))
                    }
                    // BIND expr
                    expr = _memo.results.peek()

                    _label = 15
                }
                // AND 15
                15 -> {
                    val _r15_2 = _memo.results.pop()
                    val _r15_1 = _memo.results.pop()

                    if (_r15_1 != null && _r15_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i15, _index.element, _memo.input, (_r15_1.results + _r15_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i15
                    }

                    // ACT 14
                    val _r14 = _memo.results.peek()
                    if (_r14 != null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_r14.startIndex, _r14.nextIndex, _memo.input, _Thunk({ AST.Return(expr.nr) }, _r14), true))
                    }

                    _label = 5
                }
                // OR 5
                5 -> {
                    // OR shortcut 4
                    if (_memo.results.peek() == null) {
                        _memo.results.pop()
                        _index.element = _start_i4
                    } else {
                        _label = 4
                        continue
                    }

                    // AND 21
                    _start_i21 = _index.element

                    // CALLORVAR ReturnAt
                    var _r23: _KotlinParser_Item? = null
                    _r23 = _MemoCall(_memo, "ReturnAt", _index.element, ::ReturnAt, null)
                    if (_r23 != null) _index.element = _r23.nextIndex

                    // BIND label
                    label = _memo.results.peek()

                    // AND shortcut 21
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 21
                        continue
                    }

                    // CALLORVAR expression
                    var _r26: _KotlinParser_Item? = null
                    _r26 = _MemoCall(_memo, "expression", _index.element, ::expression, null)
                    if (_r26 != null) _index.element = _r26.nextIndex

                    // QUES 25
                    if (_memo.results.peek() == null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_index.element, _memo.input))
                    }
                    // BIND expr
                    expr = _memo.results.peek()

                    _label = 21
                }
                // AND 21
                21 -> {
                    val _r21_2 = _memo.results.pop()
                    val _r21_1 = _memo.results.pop()

                    if (_r21_1 != null && _r21_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i21, _index.element, _memo.input, (_r21_1.results + _r21_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i21
                    }

                    // ACT 20
                    val _r20 = _memo.results.peek()
                    if (_r20 != null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_r20.startIndex, _r20.nextIndex, _memo.input, _Thunk({ AST.ReturnAt(label.s, expr.nr) }, _r20), true))
                    }

                    _label = 4
                }
                // OR 4
                4 -> {
                    // OR shortcut 3
                    if (_memo.results.peek() == null) {
                        _memo.results.pop()
                        _index.element = _start_i3
                    } else {
                        _label = 3
                        continue
                    }

                    // CALLORVAR CONTINUE
                    var _r28: _KotlinParser_Item? = null
                    _r28 = _MemoCall(_memo, "CONTINUE", _index.element, ::CONTINUE, null)
                    if (_r28 != null) _index.element = _r28.nextIndex

                    // ACT 27
                    val _r27 = _memo.results.peek()
                    if (_r27 != null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_r27.startIndex, _r27.nextIndex, _memo.input, _Thunk({ AST.CONTINUE }, _r27), true))
                    }

                    _label = 3
                }
                // OR 3
                3 -> {
                    // OR shortcut 2
                    if (_memo.results.peek() == null) {
                        _memo.results.pop()
                        _index.element = _start_i2
                    } else {
                        _label = 2
                        continue
                    }

                    // CALLORVAR ContinueAt
                    var _r31: _KotlinParser_Item? = null
                    _r31 = _MemoCall(_memo, "ContinueAt", _index.element, ::ContinueAt, null)
                    if (_r31 != null) _index.element = _r31.nextIndex

                    // BIND label
                    label = _memo.results.peek()

                    // ACT 29
                    val _r29 = _memo.results.peek()
                    if (_r29 != null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_r29.startIndex, _r29.nextIndex, _memo.input, _Thunk({ AST.ContinueAt(label.s) }, _r29), true))
                    }

                    _label = 2
                }
                // OR 2
                2 -> {
                    // OR shortcut 1
                    if (_memo.results.peek() == null) {
                        _memo.results.pop()
                        _index.element = _start_i1
                    } else {
                        _label = 1
                        continue
                    }

                    // CALLORVAR BREAK
                    var _r33: _KotlinParser_Item? = null
                    _r33 = _MemoCall(_memo, "BREAK", _index.element, ::BREAK, null)
                    if (_r33 != null) _index.element = _r33.nextIndex

                    // ACT 32
                    val _r32 = _memo.results.peek()
                    if (_r32 != null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_r32.startIndex, _r32.nextIndex, _memo.input, _Thunk({ AST.BREAK }, _r32), true))
                    }

                    _label = 1
                }
                // OR 1
                1 -> {
                    // OR shortcut 0
                    if (_memo.results.peek() == null) {
                        _memo.results.pop()
                        _index.element = _start_i0
                    } else {
                        _label = 0
                        continue
                    }

                    // CALLORVAR BreakAt
                    var _r36: _KotlinParser_Item? = null
                    _r36 = _MemoCall(_memo, "BreakAt", _index.element, ::BreakAt, null)
                    if (_r36 != null) _index.element = _r36.nextIndex

                    // BIND label
                    label = _memo.results.peek()

                    // ACT 34
                    val _r34 = _memo.results.peek()
                    if (_r34 != null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_r34.startIndex, _r34.nextIndex, _memo.input, _Thunk({ AST.BreakAt(label.s) }, _r34), true))
                    }

                    _label = 0
                }
                // OR 0
                0 -> {
                    break
                }
            }
        }
    }


    open fun callableReference(_memo: _KotlinParser_Memo, __index: Int, _args: _KotlinParser_Args?) {
        val _index = Ref.IntRef()
        _index.element = __index

        val _arg_index = Ref.IntRef()
        val _arg_input_index = Ref.IntRef()

        var rt: _KotlinParser_Item? = null
        var name: _KotlinParser_Item? = null

        // OR 0
        var _start_i0 = _index.element

        // AND 2
        var _start_i2 = _index.element

        // AND 3
        var _start_i3 = _index.element

        // AND 4
        var _start_i4 = _index.element

        // STAR 9
        var _start_i9 = _index.element
        val _inp9 = arrayListOf<Token?>()
        val _res9 = arrayListOf<AST.AstNode?>()

        // AND 14
        var _start_i14 = _index.element

        // AND 15
        var _start_i15 = _index.element

        // AND 16
        var _start_i16 = _index.element

        // STAR 21
        var _start_i21 = _index.element
        val _inp21 = arrayListOf<Token?>()
        val _res21 = arrayListOf<AST.AstNode?>()

        var _label = -1
        while(true) {
            when(_label) {
                -1 -> {
                    // OR 0
                    _start_i0 = _index.element

                    // AND 2
                    _start_i2 = _index.element

                    // AND 3
                    _start_i3 = _index.element

                    // AND 4
                    _start_i4 = _index.element

                    // CALLORVAR receiverType
                    var _r7: _KotlinParser_Item? = null
                    _r7 = _MemoCall(_memo, "receiverType", _index.element, ::receiverType, null)
                    if (_r7 != null) _index.element = _r7.nextIndex

                    // QUES 6
                    if (_memo.results.peek() == null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_index.element, _memo.input))
                    }
                    // BIND rt
                    rt = _memo.results.peek()

                    // AND shortcut 4
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 4
                        continue
                    }

                    // CALLORVAR COLONCOLON
                    var _r8: _KotlinParser_Item? = null
                    _r8 = _MemoCall(_memo, "COLONCOLON", _index.element, ::COLONCOLON, null)
                    if (_r8 != null) _index.element = _r8.nextIndex

                    _label = 4
                }
                // AND 4
                4 -> {
                    val _r4_2 = _memo.results.pop()
                    val _r4_1 = _memo.results.pop()

                    if (_r4_1 != null && _r4_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i4, _index.element, _memo.input, (_r4_1.results + _r4_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i4
                    }

                    // AND shortcut 3
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 3
                        continue
                    }

                    // STAR 9
                    _start_i9 = _index.element
                    _label = 9
                }
                // STAR 9
                9 -> {
                    // CALLORVAR NL
                    var _r10: _KotlinParser_Item? = null
                    _r10 = _MemoCall(_memo, "NL", _index.element, ::NL, null)
                    if (_r10 != null) _index.element = _r10.nextIndex

                    // STAR 9
                    val _r9 = _memo.results.pop()
                    if (_r9 != null) {
                        _res9 += _r9.results
                        _label = 9
                        continue
                    } else {
                        _memo.results.push(_KotlinParser_Item(_start_i9, _index.element, _memo.input, _res9.filterNotNull(), true))
                    }

                    _label = 3
                }
                // AND 3
                3 -> {
                    val _r3_2 = _memo.results.pop()
                    val _r3_1 = _memo.results.pop()

                    if (_r3_1 != null && _r3_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i3, _index.element, _memo.input, (_r3_1.results + _r3_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i3
                    }

                    // AND shortcut 2
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 2
                        continue
                    }

                    // CALLORVAR simpleIdentifier
                    var _r12: _KotlinParser_Item? = null
                    _r12 = _MemoCall(_memo, "simpleIdentifier", _index.element, ::simpleIdentifier, null)
                    if (_r12 != null) _index.element = _r12.nextIndex

                    // BIND name
                    name = _memo.results.peek()

                    _label = 2
                }
                // AND 2
                2 -> {
                    val _r2_2 = _memo.results.pop()
                    val _r2_1 = _memo.results.pop()

                    if (_r2_1 != null && _r2_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i2, _index.element, _memo.input, (_r2_1.results + _r2_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i2
                    }

                    // ACT 1
                    val _r1 = _memo.results.peek()
                    if (_r1 != null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_r1.startIndex, _r1.nextIndex, _memo.input, _Thunk({ AST.CallableReference(rt?.r, name.s) }, _r1), true))
                    }

                    // OR shortcut 0
                    if (_memo.results.peek() == null) {
                        _memo.results.pop()
                        _index.element = _start_i0
                    } else {
                        _label = 0
                        continue
                    }

                    // AND 14
                    _start_i14 = _index.element

                    // AND 15
                    _start_i15 = _index.element

                    // AND 16
                    _start_i16 = _index.element

                    // CALLORVAR receiverType
                    var _r19: _KotlinParser_Item? = null
                    _r19 = _MemoCall(_memo, "receiverType", _index.element, ::receiverType, null)
                    if (_r19 != null) _index.element = _r19.nextIndex

                    // QUES 18
                    if (_memo.results.peek() == null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_index.element, _memo.input))
                    }
                    // BIND rt
                    rt = _memo.results.peek()

                    // AND shortcut 16
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 16
                        continue
                    }

                    // CALLORVAR COLONCOLON
                    var _r20: _KotlinParser_Item? = null
                    _r20 = _MemoCall(_memo, "COLONCOLON", _index.element, ::COLONCOLON, null)
                    if (_r20 != null) _index.element = _r20.nextIndex

                    _label = 16
                }
                // AND 16
                16 -> {
                    val _r16_2 = _memo.results.pop()
                    val _r16_1 = _memo.results.pop()

                    if (_r16_1 != null && _r16_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i16, _index.element, _memo.input, (_r16_1.results + _r16_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i16
                    }

                    // AND shortcut 15
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 15
                        continue
                    }

                    // STAR 21
                    _start_i21 = _index.element
                    _label = 21
                }
                // STAR 21
                21 -> {
                    // CALLORVAR NL
                    var _r22: _KotlinParser_Item? = null
                    _r22 = _MemoCall(_memo, "NL", _index.element, ::NL, null)
                    if (_r22 != null) _index.element = _r22.nextIndex

                    // STAR 21
                    val _r21 = _memo.results.pop()
                    if (_r21 != null) {
                        _res21 += _r21.results
                        _label = 21
                        continue
                    } else {
                        _memo.results.push(_KotlinParser_Item(_start_i21, _index.element, _memo.input, _res21.filterNotNull(), true))
                    }

                    _label = 15
                }
                // AND 15
                15 -> {
                    val _r15_2 = _memo.results.pop()
                    val _r15_1 = _memo.results.pop()

                    if (_r15_1 != null && _r15_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i15, _index.element, _memo.input, (_r15_1.results + _r15_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i15
                    }

                    // AND shortcut 14
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 14
                        continue
                    }

                    // CALLORVAR CLASS
                    var _r23: _KotlinParser_Item? = null
                    _r23 = _MemoCall(_memo, "CLASS", _index.element, ::CLASS, null)
                    if (_r23 != null) _index.element = _r23.nextIndex

                    _label = 14
                }
                // AND 14
                14 -> {
                    val _r14_2 = _memo.results.pop()
                    val _r14_1 = _memo.results.pop()

                    if (_r14_1 != null && _r14_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i14, _index.element, _memo.input, (_r14_1.results + _r14_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i14
                    }

                    // ACT 13
                    val _r13 = _memo.results.peek()
                    if (_r13 != null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_r13.startIndex, _r13.nextIndex, _memo.input, _Thunk({ AST.CallableReference(rt?.r, "class") }, _r13), true))
                    }

                    _label = 0
                }
                // OR 0
                0 -> {
                    break
                }
            }
        }
    }


    open fun assignmentAndOperator(_memo: _KotlinParser_Memo, __index: Int, _args: _KotlinParser_Args?) {
        val _index = Ref.IntRef()
        _index.element = __index

        val _arg_index = Ref.IntRef()
        val _arg_input_index = Ref.IntRef()

        // OR 0
        var _start_i0 = _index.element

        // OR 1
        var _start_i1 = _index.element

        // OR 2
        var _start_i2 = _index.element

        // OR 3
        var _start_i3 = _index.element

        var _label = -1
        while(true) {
            when(_label) {
                -1 -> {
                    // OR 0
                    _start_i0 = _index.element

                    // OR 1
                    _start_i1 = _index.element

                    // OR 2
                    _start_i2 = _index.element

                    // OR 3
                    _start_i3 = _index.element

                    // CALLORVAR ADD_ASSIGNMENT
                    var _r5: _KotlinParser_Item? = null
                    _r5 = _MemoCall(_memo, "ADD_ASSIGNMENT", _index.element, ::ADD_ASSIGNMENT, null)
                    if (_r5 != null) _index.element = _r5.nextIndex

                    // ACT 4
                    val _r4 = _memo.results.peek()
                    if (_r4 != null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_r4.startIndex, _r4.nextIndex, _memo.input, _Thunk({ AST.ADD_ASSIGNMENT }, _r4), true))
                    }

                    // OR shortcut 3
                    if (_memo.results.peek() == null) {
                        _memo.results.pop()
                        _index.element = _start_i3
                    } else {
                        _label = 3
                        continue
                    }

                    // CALLORVAR SUB_ASSIGNMENT
                    var _r7: _KotlinParser_Item? = null
                    _r7 = _MemoCall(_memo, "SUB_ASSIGNMENT", _index.element, ::SUB_ASSIGNMENT, null)
                    if (_r7 != null) _index.element = _r7.nextIndex

                    // ACT 6
                    val _r6 = _memo.results.peek()
                    if (_r6 != null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_r6.startIndex, _r6.nextIndex, _memo.input, _Thunk({ AST.SUB_ASSIGNMENT }, _r6), true))
                    }

                    _label = 3
                }
                // OR 3
                3 -> {
                    // OR shortcut 2
                    if (_memo.results.peek() == null) {
                        _memo.results.pop()
                        _index.element = _start_i2
                    } else {
                        _label = 2
                        continue
                    }

                    // CALLORVAR MULT_ASSIGNMENT
                    var _r9: _KotlinParser_Item? = null
                    _r9 = _MemoCall(_memo, "MULT_ASSIGNMENT", _index.element, ::MULT_ASSIGNMENT, null)
                    if (_r9 != null) _index.element = _r9.nextIndex

                    // ACT 8
                    val _r8 = _memo.results.peek()
                    if (_r8 != null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_r8.startIndex, _r8.nextIndex, _memo.input, _Thunk({ AST.MULT_ASSIGNMENT }, _r8), true))
                    }

                    _label = 2
                }
                // OR 2
                2 -> {
                    // OR shortcut 1
                    if (_memo.results.peek() == null) {
                        _memo.results.pop()
                        _index.element = _start_i1
                    } else {
                        _label = 1
                        continue
                    }

                    // CALLORVAR DIV_ASSIGNMENT
                    var _r11: _KotlinParser_Item? = null
                    _r11 = _MemoCall(_memo, "DIV_ASSIGNMENT", _index.element, ::DIV_ASSIGNMENT, null)
                    if (_r11 != null) _index.element = _r11.nextIndex

                    // ACT 10
                    val _r10 = _memo.results.peek()
                    if (_r10 != null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_r10.startIndex, _r10.nextIndex, _memo.input, _Thunk({ AST.DIV_ASSIGNMENT }, _r10), true))
                    }

                    _label = 1
                }
                // OR 1
                1 -> {
                    // OR shortcut 0
                    if (_memo.results.peek() == null) {
                        _memo.results.pop()
                        _index.element = _start_i0
                    } else {
                        _label = 0
                        continue
                    }

                    // CALLORVAR MOD_ASSIGNMENT
                    var _r13: _KotlinParser_Item? = null
                    _r13 = _MemoCall(_memo, "MOD_ASSIGNMENT", _index.element, ::MOD_ASSIGNMENT, null)
                    if (_r13 != null) _index.element = _r13.nextIndex

                    // ACT 12
                    val _r12 = _memo.results.peek()
                    if (_r12 != null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_r12.startIndex, _r12.nextIndex, _memo.input, _Thunk({ AST.MOD_ASSIGNMENT }, _r12), true))
                    }

                    _label = 0
                }
                // OR 0
                0 -> {
                    break
                }
            }
        }
    }


    open fun equalityOperator(_memo: _KotlinParser_Memo, __index: Int, _args: _KotlinParser_Args?) {
        val _index = Ref.IntRef()
        _index.element = __index

        val _arg_index = Ref.IntRef()
        val _arg_input_index = Ref.IntRef()

        // OR 0
        var _start_i0 = _index.element

        // OR 1
        var _start_i1 = _index.element

        // OR 2
        var _start_i2 = _index.element

        var _label = -1
        while(true) {
            when(_label) {
                -1 -> {
                    // OR 0
                    _start_i0 = _index.element

                    // OR 1
                    _start_i1 = _index.element

                    // OR 2
                    _start_i2 = _index.element

                    // CALLORVAR EXCL_EQ
                    var _r4: _KotlinParser_Item? = null
                    _r4 = _MemoCall(_memo, "EXCL_EQ", _index.element, ::EXCL_EQ, null)
                    if (_r4 != null) _index.element = _r4.nextIndex

                    // ACT 3
                    val _r3 = _memo.results.peek()
                    if (_r3 != null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_r3.startIndex, _r3.nextIndex, _memo.input, _Thunk({ AST.EXCL_EQ }, _r3), true))
                    }

                    // OR shortcut 2
                    if (_memo.results.peek() == null) {
                        _memo.results.pop()
                        _index.element = _start_i2
                    } else {
                        _label = 2
                        continue
                    }

                    // CALLORVAR EXCL_EQEQ
                    var _r6: _KotlinParser_Item? = null
                    _r6 = _MemoCall(_memo, "EXCL_EQEQ", _index.element, ::EXCL_EQEQ, null)
                    if (_r6 != null) _index.element = _r6.nextIndex

                    // ACT 5
                    val _r5 = _memo.results.peek()
                    if (_r5 != null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_r5.startIndex, _r5.nextIndex, _memo.input, _Thunk({ AST.EXCL_EQEQ }, _r5), true))
                    }

                    _label = 2
                }
                // OR 2
                2 -> {
                    // OR shortcut 1
                    if (_memo.results.peek() == null) {
                        _memo.results.pop()
                        _index.element = _start_i1
                    } else {
                        _label = 1
                        continue
                    }

                    // CALLORVAR EQEQ
                    var _r8: _KotlinParser_Item? = null
                    _r8 = _MemoCall(_memo, "EQEQ", _index.element, ::EQEQ, null)
                    if (_r8 != null) _index.element = _r8.nextIndex

                    // ACT 7
                    val _r7 = _memo.results.peek()
                    if (_r7 != null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_r7.startIndex, _r7.nextIndex, _memo.input, _Thunk({ AST.EQEQ }, _r7), true))
                    }

                    _label = 1
                }
                // OR 1
                1 -> {
                    // OR shortcut 0
                    if (_memo.results.peek() == null) {
                        _memo.results.pop()
                        _index.element = _start_i0
                    } else {
                        _label = 0
                        continue
                    }

                    // CALLORVAR EQEQEQ
                    var _r10: _KotlinParser_Item? = null
                    _r10 = _MemoCall(_memo, "EQEQEQ", _index.element, ::EQEQEQ, null)
                    if (_r10 != null) _index.element = _r10.nextIndex

                    // ACT 9
                    val _r9 = _memo.results.peek()
                    if (_r9 != null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_r9.startIndex, _r9.nextIndex, _memo.input, _Thunk({ AST.EQEQEQ }, _r9), true))
                    }

                    _label = 0
                }
                // OR 0
                0 -> {
                    break
                }
            }
        }
    }


    open fun comparisonOperator(_memo: _KotlinParser_Memo, __index: Int, _args: _KotlinParser_Args?) {
        val _index = Ref.IntRef()
        _index.element = __index

        val _arg_index = Ref.IntRef()
        val _arg_input_index = Ref.IntRef()

        // OR 0
        var _start_i0 = _index.element

        // OR 1
        var _start_i1 = _index.element

        // OR 2
        var _start_i2 = _index.element

        var _label = -1
        while(true) {
            when(_label) {
                -1 -> {
                    // OR 0
                    _start_i0 = _index.element

                    // OR 1
                    _start_i1 = _index.element

                    // OR 2
                    _start_i2 = _index.element

                    // CALLORVAR LANGLE
                    var _r4: _KotlinParser_Item? = null
                    _r4 = _MemoCall(_memo, "LANGLE", _index.element, ::LANGLE, null)
                    if (_r4 != null) _index.element = _r4.nextIndex

                    // ACT 3
                    val _r3 = _memo.results.peek()
                    if (_r3 != null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_r3.startIndex, _r3.nextIndex, _memo.input, _Thunk({ AST.LESS }, _r3), true))
                    }

                    // OR shortcut 2
                    if (_memo.results.peek() == null) {
                        _memo.results.pop()
                        _index.element = _start_i2
                    } else {
                        _label = 2
                        continue
                    }

                    // CALLORVAR RANGLE
                    var _r6: _KotlinParser_Item? = null
                    _r6 = _MemoCall(_memo, "RANGLE", _index.element, ::RANGLE, null)
                    if (_r6 != null) _index.element = _r6.nextIndex

                    // ACT 5
                    val _r5 = _memo.results.peek()
                    if (_r5 != null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_r5.startIndex, _r5.nextIndex, _memo.input, _Thunk({ AST.GREATER }, _r5), true))
                    }

                    _label = 2
                }
                // OR 2
                2 -> {
                    // OR shortcut 1
                    if (_memo.results.peek() == null) {
                        _memo.results.pop()
                        _index.element = _start_i1
                    } else {
                        _label = 1
                        continue
                    }

                    // CALLORVAR LE
                    var _r8: _KotlinParser_Item? = null
                    _r8 = _MemoCall(_memo, "LE", _index.element, ::LE, null)
                    if (_r8 != null) _index.element = _r8.nextIndex

                    // ACT 7
                    val _r7 = _memo.results.peek()
                    if (_r7 != null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_r7.startIndex, _r7.nextIndex, _memo.input, _Thunk({ AST.LE }, _r7), true))
                    }

                    _label = 1
                }
                // OR 1
                1 -> {
                    // OR shortcut 0
                    if (_memo.results.peek() == null) {
                        _memo.results.pop()
                        _index.element = _start_i0
                    } else {
                        _label = 0
                        continue
                    }

                    // CALLORVAR GE
                    var _r10: _KotlinParser_Item? = null
                    _r10 = _MemoCall(_memo, "GE", _index.element, ::GE, null)
                    if (_r10 != null) _index.element = _r10.nextIndex

                    // ACT 9
                    val _r9 = _memo.results.peek()
                    if (_r9 != null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_r9.startIndex, _r9.nextIndex, _memo.input, _Thunk({ AST.GE }, _r9), true))
                    }

                    _label = 0
                }
                // OR 0
                0 -> {
                    break
                }
            }
        }
    }


    open fun inOperator(_memo: _KotlinParser_Memo, __index: Int, _args: _KotlinParser_Args?) {
        val _index = Ref.IntRef()
        _index.element = __index

        val _arg_index = Ref.IntRef()
        val _arg_input_index = Ref.IntRef()

        // OR 0
        var _start_i0 = _index.element

        var _label = -1
        while(true) {
            when(_label) {
                -1 -> {
                    // OR 0
                    _start_i0 = _index.element

                    // CALLORVAR IN
                    var _r2: _KotlinParser_Item? = null
                    _r2 = _MemoCall(_memo, "IN", _index.element, ::IN, null)
                    if (_r2 != null) _index.element = _r2.nextIndex

                    // ACT 1
                    val _r1 = _memo.results.peek()
                    if (_r1 != null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_r1.startIndex, _r1.nextIndex, _memo.input, _Thunk({ AST.IN }, _r1), true))
                    }

                    // OR shortcut 0
                    if (_memo.results.peek() == null) {
                        _memo.results.pop()
                        _index.element = _start_i0
                    } else {
                        _label = 0
                        continue
                    }

                    // CALLORVAR NOT_IN
                    var _r4: _KotlinParser_Item? = null
                    _r4 = _MemoCall(_memo, "NOT_IN", _index.element, ::NOT_IN, null)
                    if (_r4 != null) _index.element = _r4.nextIndex

                    // ACT 3
                    val _r3 = _memo.results.peek()
                    if (_r3 != null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_r3.startIndex, _r3.nextIndex, _memo.input, _Thunk({ AST.NOT_IN }, _r3), true))
                    }

                    _label = 0
                }
                // OR 0
                0 -> {
                    break
                }
            }
        }
    }


    open fun isOperator(_memo: _KotlinParser_Memo, __index: Int, _args: _KotlinParser_Args?) {
        val _index = Ref.IntRef()
        _index.element = __index

        val _arg_index = Ref.IntRef()
        val _arg_input_index = Ref.IntRef()

        // OR 0
        var _start_i0 = _index.element

        var _label = -1
        while(true) {
            when(_label) {
                -1 -> {
                    // OR 0
                    _start_i0 = _index.element

                    // CALLORVAR IS
                    var _r2: _KotlinParser_Item? = null
                    _r2 = _MemoCall(_memo, "IS", _index.element, ::IS, null)
                    if (_r2 != null) _index.element = _r2.nextIndex

                    // ACT 1
                    val _r1 = _memo.results.peek()
                    if (_r1 != null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_r1.startIndex, _r1.nextIndex, _memo.input, _Thunk({ AST.IS }, _r1), true))
                    }

                    // OR shortcut 0
                    if (_memo.results.peek() == null) {
                        _memo.results.pop()
                        _index.element = _start_i0
                    } else {
                        _label = 0
                        continue
                    }

                    // CALLORVAR NOT_IS
                    var _r4: _KotlinParser_Item? = null
                    _r4 = _MemoCall(_memo, "NOT_IS", _index.element, ::NOT_IS, null)
                    if (_r4 != null) _index.element = _r4.nextIndex

                    // ACT 3
                    val _r3 = _memo.results.peek()
                    if (_r3 != null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_r3.startIndex, _r3.nextIndex, _memo.input, _Thunk({ AST.NOT_IS }, _r3), true))
                    }

                    _label = 0
                }
                // OR 0
                0 -> {
                    break
                }
            }
        }
    }


    open fun additiveOperator(_memo: _KotlinParser_Memo, __index: Int, _args: _KotlinParser_Args?) {
        val _index = Ref.IntRef()
        _index.element = __index

        val _arg_index = Ref.IntRef()
        val _arg_input_index = Ref.IntRef()

        // OR 0
        var _start_i0 = _index.element

        var _label = -1
        while(true) {
            when(_label) {
                -1 -> {
                    // OR 0
                    _start_i0 = _index.element

                    // CALLORVAR ADD
                    var _r2: _KotlinParser_Item? = null
                    _r2 = _MemoCall(_memo, "ADD", _index.element, ::ADD, null)
                    if (_r2 != null) _index.element = _r2.nextIndex

                    // ACT 1
                    val _r1 = _memo.results.peek()
                    if (_r1 != null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_r1.startIndex, _r1.nextIndex, _memo.input, _Thunk({ AST.ADD }, _r1), true))
                    }

                    // OR shortcut 0
                    if (_memo.results.peek() == null) {
                        _memo.results.pop()
                        _index.element = _start_i0
                    } else {
                        _label = 0
                        continue
                    }

                    // CALLORVAR SUB
                    var _r4: _KotlinParser_Item? = null
                    _r4 = _MemoCall(_memo, "SUB", _index.element, ::SUB, null)
                    if (_r4 != null) _index.element = _r4.nextIndex

                    // ACT 3
                    val _r3 = _memo.results.peek()
                    if (_r3 != null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_r3.startIndex, _r3.nextIndex, _memo.input, _Thunk({ AST.SUB }, _r3), true))
                    }

                    _label = 0
                }
                // OR 0
                0 -> {
                    break
                }
            }
        }
    }


    open fun multiplicativeOperator(_memo: _KotlinParser_Memo, __index: Int, _args: _KotlinParser_Args?) {
        val _index = Ref.IntRef()
        _index.element = __index

        val _arg_index = Ref.IntRef()
        val _arg_input_index = Ref.IntRef()

        // OR 0
        var _start_i0 = _index.element

        // OR 1
        var _start_i1 = _index.element

        var _label = -1
        while(true) {
            when(_label) {
                -1 -> {
                    // OR 0
                    _start_i0 = _index.element

                    // OR 1
                    _start_i1 = _index.element

                    // CALLORVAR MULT
                    var _r3: _KotlinParser_Item? = null
                    _r3 = _MemoCall(_memo, "MULT", _index.element, ::MULT, null)
                    if (_r3 != null) _index.element = _r3.nextIndex

                    // ACT 2
                    val _r2 = _memo.results.peek()
                    if (_r2 != null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_r2.startIndex, _r2.nextIndex, _memo.input, _Thunk({ AST.MULT }, _r2), true))
                    }

                    // OR shortcut 1
                    if (_memo.results.peek() == null) {
                        _memo.results.pop()
                        _index.element = _start_i1
                    } else {
                        _label = 1
                        continue
                    }

                    // CALLORVAR DIV
                    var _r5: _KotlinParser_Item? = null
                    _r5 = _MemoCall(_memo, "DIV", _index.element, ::DIV, null)
                    if (_r5 != null) _index.element = _r5.nextIndex

                    // ACT 4
                    val _r4 = _memo.results.peek()
                    if (_r4 != null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_r4.startIndex, _r4.nextIndex, _memo.input, _Thunk({ AST.DIV }, _r4), true))
                    }

                    _label = 1
                }
                // OR 1
                1 -> {
                    // OR shortcut 0
                    if (_memo.results.peek() == null) {
                        _memo.results.pop()
                        _index.element = _start_i0
                    } else {
                        _label = 0
                        continue
                    }

                    // CALLORVAR MOD
                    var _r7: _KotlinParser_Item? = null
                    _r7 = _MemoCall(_memo, "MOD", _index.element, ::MOD, null)
                    if (_r7 != null) _index.element = _r7.nextIndex

                    // ACT 6
                    val _r6 = _memo.results.peek()
                    if (_r6 != null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_r6.startIndex, _r6.nextIndex, _memo.input, _Thunk({ AST.MOD }, _r6), true))
                    }

                    _label = 0
                }
                // OR 0
                0 -> {
                    break
                }
            }
        }
    }


    open fun asOperator(_memo: _KotlinParser_Memo, __index: Int, _args: _KotlinParser_Args?) {
        val _index = Ref.IntRef()
        _index.element = __index

        val _arg_index = Ref.IntRef()
        val _arg_input_index = Ref.IntRef()

        // OR 0
        var _start_i0 = _index.element

        var _label = -1
        while(true) {
            when(_label) {
                -1 -> {
                    // OR 0
                    _start_i0 = _index.element

                    // CALLORVAR AS
                    var _r2: _KotlinParser_Item? = null
                    _r2 = _MemoCall(_memo, "AS", _index.element, ::AS, null)
                    if (_r2 != null) _index.element = _r2.nextIndex

                    // ACT 1
                    val _r1 = _memo.results.peek()
                    if (_r1 != null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_r1.startIndex, _r1.nextIndex, _memo.input, _Thunk({ AST.AS }, _r1), true))
                    }

                    // OR shortcut 0
                    if (_memo.results.peek() == null) {
                        _memo.results.pop()
                        _index.element = _start_i0
                    } else {
                        _label = 0
                        continue
                    }

                    // CALLORVAR AS_SAFE
                    var _r4: _KotlinParser_Item? = null
                    _r4 = _MemoCall(_memo, "AS_SAFE", _index.element, ::AS_SAFE, null)
                    if (_r4 != null) _index.element = _r4.nextIndex

                    // ACT 3
                    val _r3 = _memo.results.peek()
                    if (_r3 != null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_r3.startIndex, _r3.nextIndex, _memo.input, _Thunk({ AST.AS_SAFE }, _r3), true))
                    }

                    _label = 0
                }
                // OR 0
                0 -> {
                    break
                }
            }
        }
    }


    open fun prefixUnaryOperator(_memo: _KotlinParser_Memo, __index: Int, _args: _KotlinParser_Args?) {
        val _index = Ref.IntRef()
        _index.element = __index

        val _arg_index = Ref.IntRef()
        val _arg_input_index = Ref.IntRef()

        // OR 0
        var _start_i0 = _index.element

        // OR 1
        var _start_i1 = _index.element

        // OR 2
        var _start_i2 = _index.element

        // OR 3
        var _start_i3 = _index.element

        var _label = -1
        while(true) {
            when(_label) {
                -1 -> {
                    // OR 0
                    _start_i0 = _index.element

                    // OR 1
                    _start_i1 = _index.element

                    // OR 2
                    _start_i2 = _index.element

                    // OR 3
                    _start_i3 = _index.element

                    // CALLORVAR INCR
                    var _r5: _KotlinParser_Item? = null
                    _r5 = _MemoCall(_memo, "INCR", _index.element, ::INCR, null)
                    if (_r5 != null) _index.element = _r5.nextIndex

                    // ACT 4
                    val _r4 = _memo.results.peek()
                    if (_r4 != null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_r4.startIndex, _r4.nextIndex, _memo.input, _Thunk({ AST.INCR }, _r4), true))
                    }

                    // OR shortcut 3
                    if (_memo.results.peek() == null) {
                        _memo.results.pop()
                        _index.element = _start_i3
                    } else {
                        _label = 3
                        continue
                    }

                    // CALLORVAR DECR
                    var _r7: _KotlinParser_Item? = null
                    _r7 = _MemoCall(_memo, "DECR", _index.element, ::DECR, null)
                    if (_r7 != null) _index.element = _r7.nextIndex

                    // ACT 6
                    val _r6 = _memo.results.peek()
                    if (_r6 != null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_r6.startIndex, _r6.nextIndex, _memo.input, _Thunk({ AST.DECR }, _r6), true))
                    }

                    _label = 3
                }
                // OR 3
                3 -> {
                    // OR shortcut 2
                    if (_memo.results.peek() == null) {
                        _memo.results.pop()
                        _index.element = _start_i2
                    } else {
                        _label = 2
                        continue
                    }

                    // CALLORVAR SUB
                    var _r9: _KotlinParser_Item? = null
                    _r9 = _MemoCall(_memo, "SUB", _index.element, ::SUB, null)
                    if (_r9 != null) _index.element = _r9.nextIndex

                    // ACT 8
                    val _r8 = _memo.results.peek()
                    if (_r8 != null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_r8.startIndex, _r8.nextIndex, _memo.input, _Thunk({ AST.SUB }, _r8), true))
                    }

                    _label = 2
                }
                // OR 2
                2 -> {
                    // OR shortcut 1
                    if (_memo.results.peek() == null) {
                        _memo.results.pop()
                        _index.element = _start_i1
                    } else {
                        _label = 1
                        continue
                    }

                    // CALLORVAR ADD
                    var _r11: _KotlinParser_Item? = null
                    _r11 = _MemoCall(_memo, "ADD", _index.element, ::ADD, null)
                    if (_r11 != null) _index.element = _r11.nextIndex

                    // ACT 10
                    val _r10 = _memo.results.peek()
                    if (_r10 != null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_r10.startIndex, _r10.nextIndex, _memo.input, _Thunk({ AST.ADD }, _r10), true))
                    }

                    _label = 1
                }
                // OR 1
                1 -> {
                    // OR shortcut 0
                    if (_memo.results.peek() == null) {
                        _memo.results.pop()
                        _index.element = _start_i0
                    } else {
                        _label = 0
                        continue
                    }

                    // CALLORVAR EXCL
                    var _r13: _KotlinParser_Item? = null
                    _r13 = _MemoCall(_memo, "EXCL", _index.element, ::EXCL, null)
                    if (_r13 != null) _index.element = _r13.nextIndex

                    // ACT 12
                    val _r12 = _memo.results.peek()
                    if (_r12 != null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_r12.startIndex, _r12.nextIndex, _memo.input, _Thunk({ AST.EXCL }, _r12), true))
                    }

                    _label = 0
                }
                // OR 0
                0 -> {
                    break
                }
            }
        }
    }


    open fun postfixUnaryOperator(_memo: _KotlinParser_Memo, __index: Int, _args: _KotlinParser_Args?) {
        val _index = Ref.IntRef()
        _index.element = __index

        val _arg_index = Ref.IntRef()
        val _arg_input_index = Ref.IntRef()

        // OR 0
        var _start_i0 = _index.element

        // OR 1
        var _start_i1 = _index.element

        var _label = -1
        while(true) {
            when(_label) {
                -1 -> {
                    // OR 0
                    _start_i0 = _index.element

                    // OR 1
                    _start_i1 = _index.element

                    // CALLORVAR INCR
                    var _r3: _KotlinParser_Item? = null
                    _r3 = _MemoCall(_memo, "INCR", _index.element, ::INCR, null)
                    if (_r3 != null) _index.element = _r3.nextIndex

                    // ACT 2
                    val _r2 = _memo.results.peek()
                    if (_r2 != null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_r2.startIndex, _r2.nextIndex, _memo.input, _Thunk({ AST.INCR }, _r2), true))
                    }

                    // OR shortcut 1
                    if (_memo.results.peek() == null) {
                        _memo.results.pop()
                        _index.element = _start_i1
                    } else {
                        _label = 1
                        continue
                    }

                    // CALLORVAR DECR
                    var _r5: _KotlinParser_Item? = null
                    _r5 = _MemoCall(_memo, "DECR", _index.element, ::DECR, null)
                    if (_r5 != null) _index.element = _r5.nextIndex

                    // ACT 4
                    val _r4 = _memo.results.peek()
                    if (_r4 != null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_r4.startIndex, _r4.nextIndex, _memo.input, _Thunk({ AST.DECR }, _r4), true))
                    }

                    _label = 1
                }
                // OR 1
                1 -> {
                    // OR shortcut 0
                    if (_memo.results.peek() == null) {
                        _memo.results.pop()
                        _index.element = _start_i0
                    } else {
                        _label = 0
                        continue
                    }

                    // CALLORVAR EXCL_EXCL
                    var _r7: _KotlinParser_Item? = null
                    _r7 = _MemoCall(_memo, "EXCL_EXCL", _index.element, ::EXCL_EXCL, null)
                    if (_r7 != null) _index.element = _r7.nextIndex

                    // ACT 6
                    val _r6 = _memo.results.peek()
                    if (_r6 != null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_r6.startIndex, _r6.nextIndex, _memo.input, _Thunk({ AST.EXCL_EXCL }, _r6), true))
                    }

                    _label = 0
                }
                // OR 0
                0 -> {
                    break
                }
            }
        }
    }


    open fun memberAccessOperator(_memo: _KotlinParser_Memo, __index: Int, _args: _KotlinParser_Args?) {
        val _index = Ref.IntRef()
        _index.element = __index

        val _arg_index = Ref.IntRef()
        val _arg_input_index = Ref.IntRef()

        // OR 0
        var _start_i0 = _index.element

        // OR 1
        var _start_i1 = _index.element

        // AND 3
        var _start_i3 = _index.element

        // STAR 4
        var _start_i4 = _index.element
        val _inp4 = arrayListOf<Token?>()
        val _res4 = arrayListOf<AST.AstNode?>()

        // AND 8
        var _start_i8 = _index.element

        // STAR 9
        var _start_i9 = _index.element
        val _inp9 = arrayListOf<Token?>()
        val _res9 = arrayListOf<AST.AstNode?>()

        var _label = -1
        while(true) {
            when(_label) {
                -1 -> {
                    // OR 0
                    _start_i0 = _index.element

                    // OR 1
                    _start_i1 = _index.element

                    // AND 3
                    _start_i3 = _index.element

                    // STAR 4
                    _start_i4 = _index.element
                    _label = 4
                }
                // STAR 4
                4 -> {
                    // CALLORVAR NL
                    var _r5: _KotlinParser_Item? = null
                    _r5 = _MemoCall(_memo, "NL", _index.element, ::NL, null)
                    if (_r5 != null) _index.element = _r5.nextIndex

                    // STAR 4
                    val _r4 = _memo.results.pop()
                    if (_r4 != null) {
                        _res4 += _r4.results
                        _label = 4
                        continue
                    } else {
                        _memo.results.push(_KotlinParser_Item(_start_i4, _index.element, _memo.input, _res4.filterNotNull(), true))
                    }

                    // AND shortcut 3
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 3
                        continue
                    }

                    // CALLORVAR DOT
                    var _r6: _KotlinParser_Item? = null
                    _r6 = _MemoCall(_memo, "DOT", _index.element, ::DOT, null)
                    if (_r6 != null) _index.element = _r6.nextIndex

                    _label = 3
                }
                // AND 3
                3 -> {
                    val _r3_2 = _memo.results.pop()
                    val _r3_1 = _memo.results.pop()

                    if (_r3_1 != null && _r3_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i3, _index.element, _memo.input, (_r3_1.results + _r3_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i3
                    }

                    // ACT 2
                    val _r2 = _memo.results.peek()
                    if (_r2 != null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_r2.startIndex, _r2.nextIndex, _memo.input, _Thunk({ AST.DOT }, _r2), true))
                    }

                    // OR shortcut 1
                    if (_memo.results.peek() == null) {
                        _memo.results.pop()
                        _index.element = _start_i1
                    } else {
                        _label = 1
                        continue
                    }

                    // AND 8
                    _start_i8 = _index.element

                    // STAR 9
                    _start_i9 = _index.element
                    _label = 9
                }
                // STAR 9
                9 -> {
                    // CALLORVAR NL
                    var _r10: _KotlinParser_Item? = null
                    _r10 = _MemoCall(_memo, "NL", _index.element, ::NL, null)
                    if (_r10 != null) _index.element = _r10.nextIndex

                    // STAR 9
                    val _r9 = _memo.results.pop()
                    if (_r9 != null) {
                        _res9 += _r9.results
                        _label = 9
                        continue
                    } else {
                        _memo.results.push(_KotlinParser_Item(_start_i9, _index.element, _memo.input, _res9.filterNotNull(), true))
                    }

                    // AND shortcut 8
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 8
                        continue
                    }

                    // CALLORVAR QUEST_DOT
                    var _r11: _KotlinParser_Item? = null
                    _r11 = _MemoCall(_memo, "QUEST_DOT", _index.element, ::QUEST_DOT, null)
                    if (_r11 != null) _index.element = _r11.nextIndex

                    _label = 8
                }
                // AND 8
                8 -> {
                    val _r8_2 = _memo.results.pop()
                    val _r8_1 = _memo.results.pop()

                    if (_r8_1 != null && _r8_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i8, _index.element, _memo.input, (_r8_1.results + _r8_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i8
                    }

                    // ACT 7
                    val _r7 = _memo.results.peek()
                    if (_r7 != null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_r7.startIndex, _r7.nextIndex, _memo.input, _Thunk({ AST.QUEST_DOT }, _r7), true))
                    }

                    _label = 1
                }
                // OR 1
                1 -> {
                    // OR shortcut 0
                    if (_memo.results.peek() == null) {
                        _memo.results.pop()
                        _index.element = _start_i0
                    } else {
                        _label = 0
                        continue
                    }

                    // CALLORVAR COLONCOLON
                    var _r13: _KotlinParser_Item? = null
                    _r13 = _MemoCall(_memo, "COLONCOLON", _index.element, ::COLONCOLON, null)
                    if (_r13 != null) _index.element = _r13.nextIndex

                    // ACT 12
                    val _r12 = _memo.results.peek()
                    if (_r12 != null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_r12.startIndex, _r12.nextIndex, _memo.input, _Thunk({ AST.COLONCOLON }, _r12), true))
                    }

                    _label = 0
                }
                // OR 0
                0 -> {
                    break
                }
            }
        }
    }


    open fun modifiers(_memo: _KotlinParser_Memo, __index: Int, _args: _KotlinParser_Args?) {
        val _index = Ref.IntRef()
        _index.element = __index

        val _arg_index = Ref.IntRef()
        val _arg_input_index = Ref.IntRef()

        // PLUS 1
        var _start_i1 = _index.element
        val _inp1 = arrayListOf<Token?>()
        val _res1 = arrayListOf<AST.AstNode?>()

        // OR 2
        var _start_i2 = _index.element

        var _label = -1
        while(true) {
            when(_label) {
                -1 -> {
                    // PLUS 1
                    _start_i1 = _index.element
                    _label = 1
                }
                // PLUS 1
                1 -> {
                    // OR 2
                    _start_i2 = _index.element

                    // CALLORVAR annotation
                    var _r3: _KotlinParser_Item? = null
                    _r3 = _MemoCall(_memo, "annotation", _index.element, ::annotation, null)
                    if (_r3 != null) _index.element = _r3.nextIndex

                    // OR shortcut 2
                    if (_memo.results.peek() == null) {
                        _memo.results.pop()
                        _index.element = _start_i2
                    } else {
                        _label = 2
                        continue
                    }

                    // CALLORVAR modifier
                    var _r4: _KotlinParser_Item? = null
                    _r4 = _MemoCall(_memo, "modifier", _index.element, ::modifier, null)
                    if (_r4 != null) _index.element = _r4.nextIndex

                    _label = 2
                }
                // OR 2
                2 -> {
                    // PLUS 1
                    val _r1 = _memo.results.pop()
                    if (_r1 != null) {
                        _res1 += _r1.results
                        _label = 1
                        continue
                    } else {
                        if (_index.element > _start_i1) {
                            _memo.results.push(_KotlinParser_Item(_start_i1, _index.element, _memo.input, _res1.filterNotNull(), true))
                        } else {
                            _memo.results.push(null)
                        }
                    }

                    // ACT 0
                    val _r0 = _memo.results.peek()
                    if (_r0 != null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_r0.startIndex, _r0.nextIndex, _memo.input, _Thunk({ it.l }, _r0), true))
                    }

                    break
                }
            }
        }
    }


    open fun parameterModifiers(_memo: _KotlinParser_Memo, __index: Int, _args: _KotlinParser_Args?) {
        val _index = Ref.IntRef()
        _index.element = __index

        val _arg_index = Ref.IntRef()
        val _arg_input_index = Ref.IntRef()

        // PLUS 1
        var _start_i1 = _index.element
        val _inp1 = arrayListOf<Token?>()
        val _res1 = arrayListOf<AST.AstNode?>()

        // OR 2
        var _start_i2 = _index.element

        var _label = -1
        while(true) {
            when(_label) {
                -1 -> {
                    // PLUS 1
                    _start_i1 = _index.element
                    _label = 1
                }
                // PLUS 1
                1 -> {
                    // OR 2
                    _start_i2 = _index.element

                    // CALLORVAR annotation
                    var _r3: _KotlinParser_Item? = null
                    _r3 = _MemoCall(_memo, "annotation", _index.element, ::annotation, null)
                    if (_r3 != null) _index.element = _r3.nextIndex

                    // OR shortcut 2
                    if (_memo.results.peek() == null) {
                        _memo.results.pop()
                        _index.element = _start_i2
                    } else {
                        _label = 2
                        continue
                    }

                    // CALLORVAR parameterModifier
                    var _r4: _KotlinParser_Item? = null
                    _r4 = _MemoCall(_memo, "parameterModifier", _index.element, ::parameterModifier, null)
                    if (_r4 != null) _index.element = _r4.nextIndex

                    _label = 2
                }
                // OR 2
                2 -> {
                    // PLUS 1
                    val _r1 = _memo.results.pop()
                    if (_r1 != null) {
                        _res1 += _r1.results
                        _label = 1
                        continue
                    } else {
                        if (_index.element > _start_i1) {
                            _memo.results.push(_KotlinParser_Item(_start_i1, _index.element, _memo.input, _res1.filterNotNull(), true))
                        } else {
                            _memo.results.push(null)
                        }
                    }

                    // ACT 0
                    val _r0 = _memo.results.peek()
                    if (_r0 != null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_r0.startIndex, _r0.nextIndex, _memo.input, _Thunk({ it.l }, _r0), true))
                    }

                    break
                }
            }
        }
    }


    open fun modifier(_memo: _KotlinParser_Memo, __index: Int, _args: _KotlinParser_Args?) {
        val _index = Ref.IntRef()
        _index.element = __index

        val _arg_index = Ref.IntRef()
        val _arg_input_index = Ref.IntRef()

        // AND 0
        var _start_i0 = _index.element

        // OR 1
        var _start_i1 = _index.element

        // OR 2
        var _start_i2 = _index.element

        // OR 3
        var _start_i3 = _index.element

        // OR 4
        var _start_i4 = _index.element

        // OR 5
        var _start_i5 = _index.element

        // OR 6
        var _start_i6 = _index.element

        // OR 7
        var _start_i7 = _index.element

        // STAR 16
        var _start_i16 = _index.element
        val _inp16 = arrayListOf<Token?>()
        val _res16 = arrayListOf<AST.AstNode?>()

        var _label = -1
        while(true) {
            when(_label) {
                -1 -> {
                    // AND 0
                    _start_i0 = _index.element

                    // OR 1
                    _start_i1 = _index.element

                    // OR 2
                    _start_i2 = _index.element

                    // OR 3
                    _start_i3 = _index.element

                    // OR 4
                    _start_i4 = _index.element

                    // OR 5
                    _start_i5 = _index.element

                    // OR 6
                    _start_i6 = _index.element

                    // OR 7
                    _start_i7 = _index.element

                    // CALLORVAR classModifier
                    var _r8: _KotlinParser_Item? = null
                    _r8 = _MemoCall(_memo, "classModifier", _index.element, ::classModifier, null)
                    if (_r8 != null) _index.element = _r8.nextIndex

                    // OR shortcut 7
                    if (_memo.results.peek() == null) {
                        _memo.results.pop()
                        _index.element = _start_i7
                    } else {
                        _label = 7
                        continue
                    }

                    // CALLORVAR memberModifier
                    var _r9: _KotlinParser_Item? = null
                    _r9 = _MemoCall(_memo, "memberModifier", _index.element, ::memberModifier, null)
                    if (_r9 != null) _index.element = _r9.nextIndex

                    _label = 7
                }
                // OR 7
                7 -> {
                    // OR shortcut 6
                    if (_memo.results.peek() == null) {
                        _memo.results.pop()
                        _index.element = _start_i6
                    } else {
                        _label = 6
                        continue
                    }

                    // CALLORVAR visibilityModifier
                    var _r10: _KotlinParser_Item? = null
                    _r10 = _MemoCall(_memo, "visibilityModifier", _index.element, ::visibilityModifier, null)
                    if (_r10 != null) _index.element = _r10.nextIndex

                    _label = 6
                }
                // OR 6
                6 -> {
                    // OR shortcut 5
                    if (_memo.results.peek() == null) {
                        _memo.results.pop()
                        _index.element = _start_i5
                    } else {
                        _label = 5
                        continue
                    }

                    // CALLORVAR functionModifier
                    var _r11: _KotlinParser_Item? = null
                    _r11 = _MemoCall(_memo, "functionModifier", _index.element, ::functionModifier, null)
                    if (_r11 != null) _index.element = _r11.nextIndex

                    _label = 5
                }
                // OR 5
                5 -> {
                    // OR shortcut 4
                    if (_memo.results.peek() == null) {
                        _memo.results.pop()
                        _index.element = _start_i4
                    } else {
                        _label = 4
                        continue
                    }

                    // CALLORVAR propertyModifier
                    var _r12: _KotlinParser_Item? = null
                    _r12 = _MemoCall(_memo, "propertyModifier", _index.element, ::propertyModifier, null)
                    if (_r12 != null) _index.element = _r12.nextIndex

                    _label = 4
                }
                // OR 4
                4 -> {
                    // OR shortcut 3
                    if (_memo.results.peek() == null) {
                        _memo.results.pop()
                        _index.element = _start_i3
                    } else {
                        _label = 3
                        continue
                    }

                    // CALLORVAR inheritanceModifier
                    var _r13: _KotlinParser_Item? = null
                    _r13 = _MemoCall(_memo, "inheritanceModifier", _index.element, ::inheritanceModifier, null)
                    if (_r13 != null) _index.element = _r13.nextIndex

                    _label = 3
                }
                // OR 3
                3 -> {
                    // OR shortcut 2
                    if (_memo.results.peek() == null) {
                        _memo.results.pop()
                        _index.element = _start_i2
                    } else {
                        _label = 2
                        continue
                    }

                    // CALLORVAR parameterModifier
                    var _r14: _KotlinParser_Item? = null
                    _r14 = _MemoCall(_memo, "parameterModifier", _index.element, ::parameterModifier, null)
                    if (_r14 != null) _index.element = _r14.nextIndex

                    _label = 2
                }
                // OR 2
                2 -> {
                    // OR shortcut 1
                    if (_memo.results.peek() == null) {
                        _memo.results.pop()
                        _index.element = _start_i1
                    } else {
                        _label = 1
                        continue
                    }

                    // CALLORVAR platformModifier
                    var _r15: _KotlinParser_Item? = null
                    _r15 = _MemoCall(_memo, "platformModifier", _index.element, ::platformModifier, null)
                    if (_r15 != null) _index.element = _r15.nextIndex

                    _label = 1
                }
                // OR 1
                1 -> {
                    // AND shortcut 0
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 0
                        continue
                    }

                    // STAR 16
                    _start_i16 = _index.element
                    _label = 16
                }
                // STAR 16
                16 -> {
                    // CALLORVAR NL
                    var _r17: _KotlinParser_Item? = null
                    _r17 = _MemoCall(_memo, "NL", _index.element, ::NL, null)
                    if (_r17 != null) _index.element = _r17.nextIndex

                    // STAR 16
                    val _r16 = _memo.results.pop()
                    if (_r16 != null) {
                        _res16 += _r16.results
                        _label = 16
                        continue
                    } else {
                        _memo.results.push(_KotlinParser_Item(_start_i16, _index.element, _memo.input, _res16.filterNotNull(), true))
                    }

                    _label = 0
                }
                // AND 0
                0 -> {
                    val _r0_2 = _memo.results.pop()
                    val _r0_1 = _memo.results.pop()

                    if (_r0_1 != null && _r0_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i0, _index.element, _memo.input, (_r0_1.results + _r0_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i0
                    }

                    break
                }
            }
        }
    }


    open fun typeModifiers(_memo: _KotlinParser_Memo, __index: Int, _args: _KotlinParser_Args?) {
        val _index = Ref.IntRef()
        _index.element = __index

        val _arg_index = Ref.IntRef()
        val _arg_input_index = Ref.IntRef()

        // PLUS 1
        var _start_i1 = _index.element
        val _inp1 = arrayListOf<Token?>()
        val _res1 = arrayListOf<AST.AstNode?>()

        var _label = -1
        while(true) {
            when(_label) {
                -1 -> {
                    // PLUS 1
                    _start_i1 = _index.element
                    _label = 1
                }
                // PLUS 1
                1 -> {
                    // CALLORVAR typeModifier
                    var _r2: _KotlinParser_Item? = null
                    _r2 = _MemoCall(_memo, "typeModifier", _index.element, ::typeModifier, null)
                    if (_r2 != null) _index.element = _r2.nextIndex

                    // PLUS 1
                    val _r1 = _memo.results.pop()
                    if (_r1 != null) {
                        _res1 += _r1.results
                        _label = 1
                        continue
                    } else {
                        if (_index.element > _start_i1) {
                            _memo.results.push(_KotlinParser_Item(_start_i1, _index.element, _memo.input, _res1.filterNotNull(), true))
                        } else {
                            _memo.results.push(null)
                        }
                    }

                    // ACT 0
                    val _r0 = _memo.results.peek()
                    if (_r0 != null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_r0.startIndex, _r0.nextIndex, _memo.input, _Thunk({ it.l }, _r0), true))
                    }

                    break
                }
            }
        }
    }


    open fun typeModifier(_memo: _KotlinParser_Memo, __index: Int, _args: _KotlinParser_Args?) {
        val _index = Ref.IntRef()
        _index.element = __index

        val _arg_index = Ref.IntRef()
        val _arg_input_index = Ref.IntRef()

        // OR 0
        var _start_i0 = _index.element

        // AND 3
        var _start_i3 = _index.element

        // STAR 5
        var _start_i5 = _index.element
        val _inp5 = arrayListOf<Token?>()
        val _res5 = arrayListOf<AST.AstNode?>()

        var _label = -1
        while(true) {
            when(_label) {
                -1 -> {
                    // OR 0
                    _start_i0 = _index.element

                    // CALLORVAR annotation
                    var _r1: _KotlinParser_Item? = null
                    _r1 = _MemoCall(_memo, "annotation", _index.element, ::annotation, null)
                    if (_r1 != null) _index.element = _r1.nextIndex

                    // OR shortcut 0
                    if (_memo.results.peek() == null) {
                        _memo.results.pop()
                        _index.element = _start_i0
                    } else {
                        _label = 0
                        continue
                    }

                    // AND 3
                    _start_i3 = _index.element

                    // CALLORVAR SUSPEND
                    var _r4: _KotlinParser_Item? = null
                    _r4 = _MemoCall(_memo, "SUSPEND", _index.element, ::SUSPEND, null)
                    if (_r4 != null) _index.element = _r4.nextIndex

                    // AND shortcut 3
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 3
                        continue
                    }

                    // STAR 5
                    _start_i5 = _index.element
                    _label = 5
                }
                // STAR 5
                5 -> {
                    // CALLORVAR NL
                    var _r6: _KotlinParser_Item? = null
                    _r6 = _MemoCall(_memo, "NL", _index.element, ::NL, null)
                    if (_r6 != null) _index.element = _r6.nextIndex

                    // STAR 5
                    val _r5 = _memo.results.pop()
                    if (_r5 != null) {
                        _res5 += _r5.results
                        _label = 5
                        continue
                    } else {
                        _memo.results.push(_KotlinParser_Item(_start_i5, _index.element, _memo.input, _res5.filterNotNull(), true))
                    }

                    _label = 3
                }
                // AND 3
                3 -> {
                    val _r3_2 = _memo.results.pop()
                    val _r3_1 = _memo.results.pop()

                    if (_r3_1 != null && _r3_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i3, _index.element, _memo.input, (_r3_1.results + _r3_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i3
                    }

                    // ACT 2
                    val _r2 = _memo.results.peek()
                    if (_r2 != null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_r2.startIndex, _r2.nextIndex, _memo.input, _Thunk({ AST.SUSPEND }, _r2), true))
                    }

                    _label = 0
                }
                // OR 0
                0 -> {
                    break
                }
            }
        }
    }


    open fun classModifier(_memo: _KotlinParser_Memo, __index: Int, _args: _KotlinParser_Args?) {
        val _index = Ref.IntRef()
        _index.element = __index

        val _arg_index = Ref.IntRef()
        val _arg_input_index = Ref.IntRef()

        // OR 0
        var _start_i0 = _index.element

        // OR 1
        var _start_i1 = _index.element

        // OR 2
        var _start_i2 = _index.element

        // OR 3
        var _start_i3 = _index.element

        // OR 4
        var _start_i4 = _index.element

        var _label = -1
        while(true) {
            when(_label) {
                -1 -> {
                    // OR 0
                    _start_i0 = _index.element

                    // OR 1
                    _start_i1 = _index.element

                    // OR 2
                    _start_i2 = _index.element

                    // OR 3
                    _start_i3 = _index.element

                    // OR 4
                    _start_i4 = _index.element

                    // CALLORVAR ENUM
                    var _r6: _KotlinParser_Item? = null
                    _r6 = _MemoCall(_memo, "ENUM", _index.element, ::ENUM, null)
                    if (_r6 != null) _index.element = _r6.nextIndex

                    // ACT 5
                    val _r5 = _memo.results.peek()
                    if (_r5 != null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_r5.startIndex, _r5.nextIndex, _memo.input, _Thunk({ AST.ENUM }, _r5), true))
                    }

                    // OR shortcut 4
                    if (_memo.results.peek() == null) {
                        _memo.results.pop()
                        _index.element = _start_i4
                    } else {
                        _label = 4
                        continue
                    }

                    // CALLORVAR SEALED
                    var _r8: _KotlinParser_Item? = null
                    _r8 = _MemoCall(_memo, "SEALED", _index.element, ::SEALED, null)
                    if (_r8 != null) _index.element = _r8.nextIndex

                    // ACT 7
                    val _r7 = _memo.results.peek()
                    if (_r7 != null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_r7.startIndex, _r7.nextIndex, _memo.input, _Thunk({ AST.SEALED }, _r7), true))
                    }

                    _label = 4
                }
                // OR 4
                4 -> {
                    // OR shortcut 3
                    if (_memo.results.peek() == null) {
                        _memo.results.pop()
                        _index.element = _start_i3
                    } else {
                        _label = 3
                        continue
                    }

                    // CALLORVAR ANNOTATION_
                    var _r10: _KotlinParser_Item? = null
                    _r10 = _MemoCall(_memo, "ANNOTATION_", _index.element, ::ANNOTATION_, null)
                    if (_r10 != null) _index.element = _r10.nextIndex

                    // ACT 9
                    val _r9 = _memo.results.peek()
                    if (_r9 != null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_r9.startIndex, _r9.nextIndex, _memo.input, _Thunk({ AST.ANNOTATION_ }, _r9), true))
                    }

                    _label = 3
                }
                // OR 3
                3 -> {
                    // OR shortcut 2
                    if (_memo.results.peek() == null) {
                        _memo.results.pop()
                        _index.element = _start_i2
                    } else {
                        _label = 2
                        continue
                    }

                    // CALLORVAR DATA
                    var _r12: _KotlinParser_Item? = null
                    _r12 = _MemoCall(_memo, "DATA", _index.element, ::DATA, null)
                    if (_r12 != null) _index.element = _r12.nextIndex

                    // ACT 11
                    val _r11 = _memo.results.peek()
                    if (_r11 != null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_r11.startIndex, _r11.nextIndex, _memo.input, _Thunk({ AST.DATA }, _r11), true))
                    }

                    _label = 2
                }
                // OR 2
                2 -> {
                    // OR shortcut 1
                    if (_memo.results.peek() == null) {
                        _memo.results.pop()
                        _index.element = _start_i1
                    } else {
                        _label = 1
                        continue
                    }

                    // CALLORVAR INNER
                    var _r14: _KotlinParser_Item? = null
                    _r14 = _MemoCall(_memo, "INNER", _index.element, ::INNER, null)
                    if (_r14 != null) _index.element = _r14.nextIndex

                    // ACT 13
                    val _r13 = _memo.results.peek()
                    if (_r13 != null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_r13.startIndex, _r13.nextIndex, _memo.input, _Thunk({ AST.INNER }, _r13), true))
                    }

                    _label = 1
                }
                // OR 1
                1 -> {
                    // OR shortcut 0
                    if (_memo.results.peek() == null) {
                        _memo.results.pop()
                        _index.element = _start_i0
                    } else {
                        _label = 0
                        continue
                    }

                    // CALLORVAR VALUE
                    var _r16: _KotlinParser_Item? = null
                    _r16 = _MemoCall(_memo, "VALUE", _index.element, ::VALUE, null)
                    if (_r16 != null) _index.element = _r16.nextIndex

                    // ACT 15
                    val _r15 = _memo.results.peek()
                    if (_r15 != null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_r15.startIndex, _r15.nextIndex, _memo.input, _Thunk({ AST.VALUE }, _r15), true))
                    }

                    _label = 0
                }
                // OR 0
                0 -> {
                    break
                }
            }
        }
    }


    open fun memberModifier(_memo: _KotlinParser_Memo, __index: Int, _args: _KotlinParser_Args?) {
        val _index = Ref.IntRef()
        _index.element = __index

        val _arg_index = Ref.IntRef()
        val _arg_input_index = Ref.IntRef()

        // OR 0
        var _start_i0 = _index.element

        var _label = -1
        while(true) {
            when(_label) {
                -1 -> {
                    // OR 0
                    _start_i0 = _index.element

                    // CALLORVAR OVERRIDE
                    var _r2: _KotlinParser_Item? = null
                    _r2 = _MemoCall(_memo, "OVERRIDE", _index.element, ::OVERRIDE, null)
                    if (_r2 != null) _index.element = _r2.nextIndex

                    // ACT 1
                    val _r1 = _memo.results.peek()
                    if (_r1 != null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_r1.startIndex, _r1.nextIndex, _memo.input, _Thunk({ AST.OVERRIDE }, _r1), true))
                    }

                    // OR shortcut 0
                    if (_memo.results.peek() == null) {
                        _memo.results.pop()
                        _index.element = _start_i0
                    } else {
                        _label = 0
                        continue
                    }

                    // CALLORVAR LATEINIT
                    var _r4: _KotlinParser_Item? = null
                    _r4 = _MemoCall(_memo, "LATEINIT", _index.element, ::LATEINIT, null)
                    if (_r4 != null) _index.element = _r4.nextIndex

                    // ACT 3
                    val _r3 = _memo.results.peek()
                    if (_r3 != null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_r3.startIndex, _r3.nextIndex, _memo.input, _Thunk({ AST.LATEINIT }, _r3), true))
                    }

                    _label = 0
                }
                // OR 0
                0 -> {
                    break
                }
            }
        }
    }


    open fun visibilityModifier(_memo: _KotlinParser_Memo, __index: Int, _args: _KotlinParser_Args?) {
        val _index = Ref.IntRef()
        _index.element = __index

        val _arg_index = Ref.IntRef()
        val _arg_input_index = Ref.IntRef()

        // OR 0
        var _start_i0 = _index.element

        // OR 1
        var _start_i1 = _index.element

        // OR 2
        var _start_i2 = _index.element

        var _label = -1
        while(true) {
            when(_label) {
                -1 -> {
                    // OR 0
                    _start_i0 = _index.element

                    // OR 1
                    _start_i1 = _index.element

                    // OR 2
                    _start_i2 = _index.element

                    // CALLORVAR PUBLIC
                    var _r4: _KotlinParser_Item? = null
                    _r4 = _MemoCall(_memo, "PUBLIC", _index.element, ::PUBLIC, null)
                    if (_r4 != null) _index.element = _r4.nextIndex

                    // ACT 3
                    val _r3 = _memo.results.peek()
                    if (_r3 != null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_r3.startIndex, _r3.nextIndex, _memo.input, _Thunk({ AST.PUBLIC }, _r3), true))
                    }

                    // OR shortcut 2
                    if (_memo.results.peek() == null) {
                        _memo.results.pop()
                        _index.element = _start_i2
                    } else {
                        _label = 2
                        continue
                    }

                    // CALLORVAR PRIVATE
                    var _r6: _KotlinParser_Item? = null
                    _r6 = _MemoCall(_memo, "PRIVATE", _index.element, ::PRIVATE, null)
                    if (_r6 != null) _index.element = _r6.nextIndex

                    // ACT 5
                    val _r5 = _memo.results.peek()
                    if (_r5 != null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_r5.startIndex, _r5.nextIndex, _memo.input, _Thunk({ AST.PRIVATE }, _r5), true))
                    }

                    _label = 2
                }
                // OR 2
                2 -> {
                    // OR shortcut 1
                    if (_memo.results.peek() == null) {
                        _memo.results.pop()
                        _index.element = _start_i1
                    } else {
                        _label = 1
                        continue
                    }

                    // CALLORVAR INTERNAL
                    var _r8: _KotlinParser_Item? = null
                    _r8 = _MemoCall(_memo, "INTERNAL", _index.element, ::INTERNAL, null)
                    if (_r8 != null) _index.element = _r8.nextIndex

                    // ACT 7
                    val _r7 = _memo.results.peek()
                    if (_r7 != null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_r7.startIndex, _r7.nextIndex, _memo.input, _Thunk({ AST.INTERNAL }, _r7), true))
                    }

                    _label = 1
                }
                // OR 1
                1 -> {
                    // OR shortcut 0
                    if (_memo.results.peek() == null) {
                        _memo.results.pop()
                        _index.element = _start_i0
                    } else {
                        _label = 0
                        continue
                    }

                    // CALLORVAR PROTECTED
                    var _r10: _KotlinParser_Item? = null
                    _r10 = _MemoCall(_memo, "PROTECTED", _index.element, ::PROTECTED, null)
                    if (_r10 != null) _index.element = _r10.nextIndex

                    // ACT 9
                    val _r9 = _memo.results.peek()
                    if (_r9 != null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_r9.startIndex, _r9.nextIndex, _memo.input, _Thunk({ AST.PROTECTED }, _r9), true))
                    }

                    _label = 0
                }
                // OR 0
                0 -> {
                    break
                }
            }
        }
    }


    open fun varianceModifier(_memo: _KotlinParser_Memo, __index: Int, _args: _KotlinParser_Args?) {
        val _index = Ref.IntRef()
        _index.element = __index

        val _arg_index = Ref.IntRef()
        val _arg_input_index = Ref.IntRef()

        // OR 0
        var _start_i0 = _index.element

        var _label = -1
        while(true) {
            when(_label) {
                -1 -> {
                    // OR 0
                    _start_i0 = _index.element

                    // CALLORVAR IN
                    var _r2: _KotlinParser_Item? = null
                    _r2 = _MemoCall(_memo, "IN", _index.element, ::IN, null)
                    if (_r2 != null) _index.element = _r2.nextIndex

                    // ACT 1
                    val _r1 = _memo.results.peek()
                    if (_r1 != null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_r1.startIndex, _r1.nextIndex, _memo.input, _Thunk({ AST.IN }, _r1), true))
                    }

                    // OR shortcut 0
                    if (_memo.results.peek() == null) {
                        _memo.results.pop()
                        _index.element = _start_i0
                    } else {
                        _label = 0
                        continue
                    }

                    // CALLORVAR OUT
                    var _r4: _KotlinParser_Item? = null
                    _r4 = _MemoCall(_memo, "OUT", _index.element, ::OUT, null)
                    if (_r4 != null) _index.element = _r4.nextIndex

                    // ACT 3
                    val _r3 = _memo.results.peek()
                    if (_r3 != null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_r3.startIndex, _r3.nextIndex, _memo.input, _Thunk({ AST.OUT }, _r3), true))
                    }

                    _label = 0
                }
                // OR 0
                0 -> {
                    break
                }
            }
        }
    }


    open fun typeParameterModifiers(_memo: _KotlinParser_Memo, __index: Int, _args: _KotlinParser_Args?) {
        val _index = Ref.IntRef()
        _index.element = __index

        val _arg_index = Ref.IntRef()
        val _arg_input_index = Ref.IntRef()

        // PLUS 0
        var _start_i0 = _index.element
        val _inp0 = arrayListOf<Token?>()
        val _res0 = arrayListOf<AST.AstNode?>()

        var _label = -1
        while(true) {
            when(_label) {
                -1 -> {
                    // PLUS 0
                    _start_i0 = _index.element
                    _label = 0
                }
                // PLUS 0
                0 -> {
                    // CALLORVAR typeParameterModifier
                    var _r1: _KotlinParser_Item? = null
                    _r1 = _MemoCall(_memo, "typeParameterModifier", _index.element, ::typeParameterModifier, null)
                    if (_r1 != null) _index.element = _r1.nextIndex

                    // PLUS 0
                    val _r0 = _memo.results.pop()
                    if (_r0 != null) {
                        _res0 += _r0.results
                        _label = 0
                        continue
                    } else {
                        if (_index.element > _start_i0) {
                            _memo.results.push(_KotlinParser_Item(_start_i0, _index.element, _memo.input, _res0.filterNotNull(), true))
                        } else {
                            _memo.results.push(null)
                        }
                    }

                    break
                }
            }
        }
    }


    open fun typeParameterModifier(_memo: _KotlinParser_Memo, __index: Int, _args: _KotlinParser_Args?) {
        val _index = Ref.IntRef()
        _index.element = __index

        val _arg_index = Ref.IntRef()
        val _arg_input_index = Ref.IntRef()

        var mod: _KotlinParser_Item? = null

        // OR 0
        var _start_i0 = _index.element

        // OR 1
        var _start_i1 = _index.element

        // AND 3
        var _start_i3 = _index.element

        // STAR 5
        var _start_i5 = _index.element
        val _inp5 = arrayListOf<Token?>()
        val _res5 = arrayListOf<AST.AstNode?>()

        // AND 8
        var _start_i8 = _index.element

        // STAR 11
        var _start_i11 = _index.element
        val _inp11 = arrayListOf<Token?>()
        val _res11 = arrayListOf<AST.AstNode?>()

        var _label = -1
        while(true) {
            when(_label) {
                -1 -> {
                    // OR 0
                    _start_i0 = _index.element

                    // OR 1
                    _start_i1 = _index.element

                    // AND 3
                    _start_i3 = _index.element

                    // CALLORVAR reificationModifier
                    var _r4: _KotlinParser_Item? = null
                    _r4 = _MemoCall(_memo, "reificationModifier", _index.element, ::reificationModifier, null)
                    if (_r4 != null) _index.element = _r4.nextIndex

                    // AND shortcut 3
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 3
                        continue
                    }

                    // STAR 5
                    _start_i5 = _index.element
                    _label = 5
                }
                // STAR 5
                5 -> {
                    // CALLORVAR NL
                    var _r6: _KotlinParser_Item? = null
                    _r6 = _MemoCall(_memo, "NL", _index.element, ::NL, null)
                    if (_r6 != null) _index.element = _r6.nextIndex

                    // STAR 5
                    val _r5 = _memo.results.pop()
                    if (_r5 != null) {
                        _res5 += _r5.results
                        _label = 5
                        continue
                    } else {
                        _memo.results.push(_KotlinParser_Item(_start_i5, _index.element, _memo.input, _res5.filterNotNull(), true))
                    }

                    _label = 3
                }
                // AND 3
                3 -> {
                    val _r3_2 = _memo.results.pop()
                    val _r3_1 = _memo.results.pop()

                    if (_r3_1 != null && _r3_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i3, _index.element, _memo.input, (_r3_1.results + _r3_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i3
                    }

                    // ACT 2
                    val _r2 = _memo.results.peek()
                    if (_r2 != null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_r2.startIndex, _r2.nextIndex, _memo.input, _Thunk({ AST.REIFIED }, _r2), true))
                    }

                    // OR shortcut 1
                    if (_memo.results.peek() == null) {
                        _memo.results.pop()
                        _index.element = _start_i1
                    } else {
                        _label = 1
                        continue
                    }

                    // AND 8
                    _start_i8 = _index.element

                    // CALLORVAR varianceModifier
                    var _r10: _KotlinParser_Item? = null
                    _r10 = _MemoCall(_memo, "varianceModifier", _index.element, ::varianceModifier, null)
                    if (_r10 != null) _index.element = _r10.nextIndex

                    // BIND mod
                    mod = _memo.results.peek()

                    // AND shortcut 8
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 8
                        continue
                    }

                    // STAR 11
                    _start_i11 = _index.element
                    _label = 11
                }
                // STAR 11
                11 -> {
                    // CALLORVAR NL
                    var _r12: _KotlinParser_Item? = null
                    _r12 = _MemoCall(_memo, "NL", _index.element, ::NL, null)
                    if (_r12 != null) _index.element = _r12.nextIndex

                    // STAR 11
                    val _r11 = _memo.results.pop()
                    if (_r11 != null) {
                        _res11 += _r11.results
                        _label = 11
                        continue
                    } else {
                        _memo.results.push(_KotlinParser_Item(_start_i11, _index.element, _memo.input, _res11.filterNotNull(), true))
                    }

                    _label = 8
                }
                // AND 8
                8 -> {
                    val _r8_2 = _memo.results.pop()
                    val _r8_1 = _memo.results.pop()

                    if (_r8_1 != null && _r8_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i8, _index.element, _memo.input, (_r8_1.results + _r8_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i8
                    }

                    // ACT 7
                    val _r7 = _memo.results.peek()
                    if (_r7 != null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_r7.startIndex, _r7.nextIndex, _memo.input, _Thunk({ mod.r }, _r7), true))
                    }

                    _label = 1
                }
                // OR 1
                1 -> {
                    // OR shortcut 0
                    if (_memo.results.peek() == null) {
                        _memo.results.pop()
                        _index.element = _start_i0
                    } else {
                        _label = 0
                        continue
                    }

                    // CALLORVAR annotation
                    var _r13: _KotlinParser_Item? = null
                    _r13 = _MemoCall(_memo, "annotation", _index.element, ::annotation, null)
                    if (_r13 != null) _index.element = _r13.nextIndex

                    _label = 0
                }
                // OR 0
                0 -> {
                    break
                }
            }
        }
    }


    open fun functionModifier(_memo: _KotlinParser_Memo, __index: Int, _args: _KotlinParser_Args?) {
        val _index = Ref.IntRef()
        _index.element = __index

        val _arg_index = Ref.IntRef()
        val _arg_input_index = Ref.IntRef()

        // OR 0
        var _start_i0 = _index.element

        // OR 1
        var _start_i1 = _index.element

        // OR 2
        var _start_i2 = _index.element

        // OR 3
        var _start_i3 = _index.element

        // OR 4
        var _start_i4 = _index.element

        var _label = -1
        while(true) {
            when(_label) {
                -1 -> {
                    // OR 0
                    _start_i0 = _index.element

                    // OR 1
                    _start_i1 = _index.element

                    // OR 2
                    _start_i2 = _index.element

                    // OR 3
                    _start_i3 = _index.element

                    // OR 4
                    _start_i4 = _index.element

                    // CALLORVAR TAILREC
                    var _r6: _KotlinParser_Item? = null
                    _r6 = _MemoCall(_memo, "TAILREC", _index.element, ::TAILREC, null)
                    if (_r6 != null) _index.element = _r6.nextIndex

                    // ACT 5
                    val _r5 = _memo.results.peek()
                    if (_r5 != null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_r5.startIndex, _r5.nextIndex, _memo.input, _Thunk({ AST.TAILREC }, _r5), true))
                    }

                    // OR shortcut 4
                    if (_memo.results.peek() == null) {
                        _memo.results.pop()
                        _index.element = _start_i4
                    } else {
                        _label = 4
                        continue
                    }

                    // CALLORVAR OPERATOR
                    var _r8: _KotlinParser_Item? = null
                    _r8 = _MemoCall(_memo, "OPERATOR", _index.element, ::OPERATOR, null)
                    if (_r8 != null) _index.element = _r8.nextIndex

                    // ACT 7
                    val _r7 = _memo.results.peek()
                    if (_r7 != null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_r7.startIndex, _r7.nextIndex, _memo.input, _Thunk({ AST.OPERATOR }, _r7), true))
                    }

                    _label = 4
                }
                // OR 4
                4 -> {
                    // OR shortcut 3
                    if (_memo.results.peek() == null) {
                        _memo.results.pop()
                        _index.element = _start_i3
                    } else {
                        _label = 3
                        continue
                    }

                    // CALLORVAR INFIX
                    var _r10: _KotlinParser_Item? = null
                    _r10 = _MemoCall(_memo, "INFIX", _index.element, ::INFIX, null)
                    if (_r10 != null) _index.element = _r10.nextIndex

                    // ACT 9
                    val _r9 = _memo.results.peek()
                    if (_r9 != null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_r9.startIndex, _r9.nextIndex, _memo.input, _Thunk({ AST.INFIX }, _r9), true))
                    }

                    _label = 3
                }
                // OR 3
                3 -> {
                    // OR shortcut 2
                    if (_memo.results.peek() == null) {
                        _memo.results.pop()
                        _index.element = _start_i2
                    } else {
                        _label = 2
                        continue
                    }

                    // CALLORVAR INLINE
                    var _r12: _KotlinParser_Item? = null
                    _r12 = _MemoCall(_memo, "INLINE", _index.element, ::INLINE, null)
                    if (_r12 != null) _index.element = _r12.nextIndex

                    // ACT 11
                    val _r11 = _memo.results.peek()
                    if (_r11 != null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_r11.startIndex, _r11.nextIndex, _memo.input, _Thunk({ AST.INLINE }, _r11), true))
                    }

                    _label = 2
                }
                // OR 2
                2 -> {
                    // OR shortcut 1
                    if (_memo.results.peek() == null) {
                        _memo.results.pop()
                        _index.element = _start_i1
                    } else {
                        _label = 1
                        continue
                    }

                    // CALLORVAR EXTERNAL
                    var _r14: _KotlinParser_Item? = null
                    _r14 = _MemoCall(_memo, "EXTERNAL", _index.element, ::EXTERNAL, null)
                    if (_r14 != null) _index.element = _r14.nextIndex

                    // ACT 13
                    val _r13 = _memo.results.peek()
                    if (_r13 != null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_r13.startIndex, _r13.nextIndex, _memo.input, _Thunk({ AST.EXTERNAL }, _r13), true))
                    }

                    _label = 1
                }
                // OR 1
                1 -> {
                    // OR shortcut 0
                    if (_memo.results.peek() == null) {
                        _memo.results.pop()
                        _index.element = _start_i0
                    } else {
                        _label = 0
                        continue
                    }

                    // CALLORVAR SUSPEND
                    var _r16: _KotlinParser_Item? = null
                    _r16 = _MemoCall(_memo, "SUSPEND", _index.element, ::SUSPEND, null)
                    if (_r16 != null) _index.element = _r16.nextIndex

                    // ACT 15
                    val _r15 = _memo.results.peek()
                    if (_r15 != null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_r15.startIndex, _r15.nextIndex, _memo.input, _Thunk({ AST.SUSPEND }, _r15), true))
                    }

                    _label = 0
                }
                // OR 0
                0 -> {
                    break
                }
            }
        }
    }


    open fun propertyModifier(_memo: _KotlinParser_Memo, __index: Int, _args: _KotlinParser_Args?) {
        val _index = Ref.IntRef()
        _index.element = __index

        val _arg_index = Ref.IntRef()
        val _arg_input_index = Ref.IntRef()

        var _label = -1
        while(true) {
            when(_label) {
                -1 -> {
                    // CALLORVAR CONST
                    var _r1: _KotlinParser_Item? = null
                    _r1 = _MemoCall(_memo, "CONST", _index.element, ::CONST, null)
                    if (_r1 != null) _index.element = _r1.nextIndex

                    // ACT 0
                    val _r0 = _memo.results.peek()
                    if (_r0 != null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_r0.startIndex, _r0.nextIndex, _memo.input, _Thunk({ AST.CONST }, _r0), true))
                    }

                    break
                }
            }
        }
    }


    open fun inheritanceModifier(_memo: _KotlinParser_Memo, __index: Int, _args: _KotlinParser_Args?) {
        val _index = Ref.IntRef()
        _index.element = __index

        val _arg_index = Ref.IntRef()
        val _arg_input_index = Ref.IntRef()

        // OR 0
        var _start_i0 = _index.element

        // OR 1
        var _start_i1 = _index.element

        var _label = -1
        while(true) {
            when(_label) {
                -1 -> {
                    // OR 0
                    _start_i0 = _index.element

                    // OR 1
                    _start_i1 = _index.element

                    // CALLORVAR ABSTRACT
                    var _r3: _KotlinParser_Item? = null
                    _r3 = _MemoCall(_memo, "ABSTRACT", _index.element, ::ABSTRACT, null)
                    if (_r3 != null) _index.element = _r3.nextIndex

                    // ACT 2
                    val _r2 = _memo.results.peek()
                    if (_r2 != null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_r2.startIndex, _r2.nextIndex, _memo.input, _Thunk({ AST.ABSTRACT }, _r2), true))
                    }

                    // OR shortcut 1
                    if (_memo.results.peek() == null) {
                        _memo.results.pop()
                        _index.element = _start_i1
                    } else {
                        _label = 1
                        continue
                    }

                    // CALLORVAR FINAL
                    var _r5: _KotlinParser_Item? = null
                    _r5 = _MemoCall(_memo, "FINAL", _index.element, ::FINAL, null)
                    if (_r5 != null) _index.element = _r5.nextIndex

                    // ACT 4
                    val _r4 = _memo.results.peek()
                    if (_r4 != null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_r4.startIndex, _r4.nextIndex, _memo.input, _Thunk({ AST.FINAL }, _r4), true))
                    }

                    _label = 1
                }
                // OR 1
                1 -> {
                    // OR shortcut 0
                    if (_memo.results.peek() == null) {
                        _memo.results.pop()
                        _index.element = _start_i0
                    } else {
                        _label = 0
                        continue
                    }

                    // CALLORVAR OPEN
                    var _r7: _KotlinParser_Item? = null
                    _r7 = _MemoCall(_memo, "OPEN", _index.element, ::OPEN, null)
                    if (_r7 != null) _index.element = _r7.nextIndex

                    // ACT 6
                    val _r6 = _memo.results.peek()
                    if (_r6 != null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_r6.startIndex, _r6.nextIndex, _memo.input, _Thunk({ AST.OPEN }, _r6), true))
                    }

                    _label = 0
                }
                // OR 0
                0 -> {
                    break
                }
            }
        }
    }


    open fun parameterModifier(_memo: _KotlinParser_Memo, __index: Int, _args: _KotlinParser_Args?) {
        val _index = Ref.IntRef()
        _index.element = __index

        val _arg_index = Ref.IntRef()
        val _arg_input_index = Ref.IntRef()

        // OR 0
        var _start_i0 = _index.element

        // OR 1
        var _start_i1 = _index.element

        var _label = -1
        while(true) {
            when(_label) {
                -1 -> {
                    // OR 0
                    _start_i0 = _index.element

                    // OR 1
                    _start_i1 = _index.element

                    // CALLORVAR VARARG
                    var _r3: _KotlinParser_Item? = null
                    _r3 = _MemoCall(_memo, "VARARG", _index.element, ::VARARG, null)
                    if (_r3 != null) _index.element = _r3.nextIndex

                    // ACT 2
                    val _r2 = _memo.results.peek()
                    if (_r2 != null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_r2.startIndex, _r2.nextIndex, _memo.input, _Thunk({ AST.VARARG }, _r2), true))
                    }

                    // OR shortcut 1
                    if (_memo.results.peek() == null) {
                        _memo.results.pop()
                        _index.element = _start_i1
                    } else {
                        _label = 1
                        continue
                    }

                    // CALLORVAR NOINLINE
                    var _r5: _KotlinParser_Item? = null
                    _r5 = _MemoCall(_memo, "NOINLINE", _index.element, ::NOINLINE, null)
                    if (_r5 != null) _index.element = _r5.nextIndex

                    // ACT 4
                    val _r4 = _memo.results.peek()
                    if (_r4 != null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_r4.startIndex, _r4.nextIndex, _memo.input, _Thunk({ AST.NOINLINE }, _r4), true))
                    }

                    _label = 1
                }
                // OR 1
                1 -> {
                    // OR shortcut 0
                    if (_memo.results.peek() == null) {
                        _memo.results.pop()
                        _index.element = _start_i0
                    } else {
                        _label = 0
                        continue
                    }

                    // CALLORVAR CROSSINLINE
                    var _r7: _KotlinParser_Item? = null
                    _r7 = _MemoCall(_memo, "CROSSINLINE", _index.element, ::CROSSINLINE, null)
                    if (_r7 != null) _index.element = _r7.nextIndex

                    // ACT 6
                    val _r6 = _memo.results.peek()
                    if (_r6 != null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_r6.startIndex, _r6.nextIndex, _memo.input, _Thunk({ AST.CROSSINLINE }, _r6), true))
                    }

                    _label = 0
                }
                // OR 0
                0 -> {
                    break
                }
            }
        }
    }


    open fun reificationModifier(_memo: _KotlinParser_Memo, __index: Int, _args: _KotlinParser_Args?) {
        val _index = Ref.IntRef()
        _index.element = __index

        val _arg_index = Ref.IntRef()
        val _arg_input_index = Ref.IntRef()

        var _label = -1
        while(true) {
            when(_label) {
                -1 -> {
                    // CALLORVAR REIFIED
                    var _r0: _KotlinParser_Item? = null
                    _r0 = _MemoCall(_memo, "REIFIED", _index.element, ::REIFIED, null)
                    if (_r0 != null) _index.element = _r0.nextIndex

                    break
                }
            }
        }
    }


    open fun platformModifier(_memo: _KotlinParser_Memo, __index: Int, _args: _KotlinParser_Args?) {
        val _index = Ref.IntRef()
        _index.element = __index

        val _arg_index = Ref.IntRef()
        val _arg_input_index = Ref.IntRef()

        // OR 0
        var _start_i0 = _index.element

        var _label = -1
        while(true) {
            when(_label) {
                -1 -> {
                    // OR 0
                    _start_i0 = _index.element

                    // CALLORVAR EXPECT
                    var _r2: _KotlinParser_Item? = null
                    _r2 = _MemoCall(_memo, "EXPECT", _index.element, ::EXPECT, null)
                    if (_r2 != null) _index.element = _r2.nextIndex

                    // ACT 1
                    val _r1 = _memo.results.peek()
                    if (_r1 != null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_r1.startIndex, _r1.nextIndex, _memo.input, _Thunk({ AST.EXPECT }, _r1), true))
                    }

                    // OR shortcut 0
                    if (_memo.results.peek() == null) {
                        _memo.results.pop()
                        _index.element = _start_i0
                    } else {
                        _label = 0
                        continue
                    }

                    // CALLORVAR ACTUAL
                    var _r4: _KotlinParser_Item? = null
                    _r4 = _MemoCall(_memo, "ACTUAL", _index.element, ::ACTUAL, null)
                    if (_r4 != null) _index.element = _r4.nextIndex

                    // ACT 3
                    val _r3 = _memo.results.peek()
                    if (_r3 != null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_r3.startIndex, _r3.nextIndex, _memo.input, _Thunk({ AST.ACTUAL }, _r3), true))
                    }

                    _label = 0
                }
                // OR 0
                0 -> {
                    break
                }
            }
        }
    }


    open fun annotation(_memo: _KotlinParser_Memo, __index: Int, _args: _KotlinParser_Args?) {
        val _index = Ref.IntRef()
        _index.element = __index

        val _arg_index = Ref.IntRef()
        val _arg_input_index = Ref.IntRef()

        var ann: _KotlinParser_Item? = null

        // AND 1
        var _start_i1 = _index.element

        // OR 3
        var _start_i3 = _index.element

        // STAR 6
        var _start_i6 = _index.element
        val _inp6 = arrayListOf<Token?>()
        val _res6 = arrayListOf<AST.AstNode?>()

        var _label = -1
        while(true) {
            when(_label) {
                -1 -> {
                    // AND 1
                    _start_i1 = _index.element

                    // OR 3
                    _start_i3 = _index.element

                    // CALLORVAR singleAnnotation
                    var _r4: _KotlinParser_Item? = null
                    _r4 = _MemoCall(_memo, "singleAnnotation", _index.element, ::singleAnnotation, null)
                    if (_r4 != null) _index.element = _r4.nextIndex

                    // OR shortcut 3
                    if (_memo.results.peek() == null) {
                        _memo.results.pop()
                        _index.element = _start_i3
                    } else {
                        _label = 3
                        continue
                    }

                    // CALLORVAR multiAnnotation
                    var _r5: _KotlinParser_Item? = null
                    _r5 = _MemoCall(_memo, "multiAnnotation", _index.element, ::multiAnnotation, null)
                    if (_r5 != null) _index.element = _r5.nextIndex

                    _label = 3
                }
                // OR 3
                3 -> {
                    // BIND ann
                    ann = _memo.results.peek()

                    // AND shortcut 1
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 1
                        continue
                    }

                    // STAR 6
                    _start_i6 = _index.element
                    _label = 6
                }
                // STAR 6
                6 -> {
                    // CALLORVAR NL
                    var _r7: _KotlinParser_Item? = null
                    _r7 = _MemoCall(_memo, "NL", _index.element, ::NL, null)
                    if (_r7 != null) _index.element = _r7.nextIndex

                    // STAR 6
                    val _r6 = _memo.results.pop()
                    if (_r6 != null) {
                        _res6 += _r6.results
                        _label = 6
                        continue
                    } else {
                        _memo.results.push(_KotlinParser_Item(_start_i6, _index.element, _memo.input, _res6.filterNotNull(), true))
                    }

                    _label = 1
                }
                // AND 1
                1 -> {
                    val _r1_2 = _memo.results.pop()
                    val _r1_1 = _memo.results.pop()

                    if (_r1_1 != null && _r1_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i1, _index.element, _memo.input, (_r1_1.results + _r1_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i1
                    }

                    // ACT 0
                    val _r0 = _memo.results.peek()
                    if (_r0 != null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_r0.startIndex, _r0.nextIndex, _memo.input, _Thunk({ ann.r }, _r0), true))
                    }

                    break
                }
            }
        }
    }


    open fun singleAnnotation(_memo: _KotlinParser_Memo, __index: Int, _args: _KotlinParser_Args?) {
        val _index = Ref.IntRef()
        _index.element = __index

        val _arg_index = Ref.IntRef()
        val _arg_input_index = Ref.IntRef()

        var target: _KotlinParser_Item? = null
        var ann: _KotlinParser_Item? = null

        // OR 0
        var _start_i0 = _index.element

        // AND 2
        var _start_i2 = _index.element

        // AND 3
        var _start_i3 = _index.element

        // STAR 6
        var _start_i6 = _index.element
        val _inp6 = arrayListOf<Token?>()
        val _res6 = arrayListOf<AST.AstNode?>()

        // AND 11
        var _start_i11 = _index.element

        var _label = -1
        while(true) {
            when(_label) {
                -1 -> {
                    // OR 0
                    _start_i0 = _index.element

                    // AND 2
                    _start_i2 = _index.element

                    // AND 3
                    _start_i3 = _index.element

                    // CALLORVAR annotationUseSiteTarget
                    var _r5: _KotlinParser_Item? = null
                    _r5 = _MemoCall(_memo, "annotationUseSiteTarget", _index.element, ::annotationUseSiteTarget, null)
                    if (_r5 != null) _index.element = _r5.nextIndex

                    // BIND target
                    target = _memo.results.peek()

                    // AND shortcut 3
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 3
                        continue
                    }

                    // STAR 6
                    _start_i6 = _index.element
                    _label = 6
                }
                // STAR 6
                6 -> {
                    // CALLORVAR NL
                    var _r7: _KotlinParser_Item? = null
                    _r7 = _MemoCall(_memo, "NL", _index.element, ::NL, null)
                    if (_r7 != null) _index.element = _r7.nextIndex

                    // STAR 6
                    val _r6 = _memo.results.pop()
                    if (_r6 != null) {
                        _res6 += _r6.results
                        _label = 6
                        continue
                    } else {
                        _memo.results.push(_KotlinParser_Item(_start_i6, _index.element, _memo.input, _res6.filterNotNull(), true))
                    }

                    _label = 3
                }
                // AND 3
                3 -> {
                    val _r3_2 = _memo.results.pop()
                    val _r3_1 = _memo.results.pop()

                    if (_r3_1 != null && _r3_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i3, _index.element, _memo.input, (_r3_1.results + _r3_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i3
                    }

                    // AND shortcut 2
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 2
                        continue
                    }

                    // CALLORVAR unescapedAnnotation
                    var _r9: _KotlinParser_Item? = null
                    _r9 = _MemoCall(_memo, "unescapedAnnotation", _index.element, ::unescapedAnnotation, null)
                    if (_r9 != null) _index.element = _r9.nextIndex

                    // BIND ann
                    ann = _memo.results.peek()

                    _label = 2
                }
                // AND 2
                2 -> {
                    val _r2_2 = _memo.results.pop()
                    val _r2_1 = _memo.results.pop()

                    if (_r2_1 != null && _r2_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i2, _index.element, _memo.input, (_r2_1.results + _r2_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i2
                    }

                    // ACT 1
                    val _r1 = _memo.results.peek()
                    if (_r1 != null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_r1.startIndex, _r1.nextIndex, _memo.input, _Thunk({ AST.SingleAnnotation(target.r, ann.r) }, _r1), true))
                    }

                    // OR shortcut 0
                    if (_memo.results.peek() == null) {
                        _memo.results.pop()
                        _index.element = _start_i0
                    } else {
                        _label = 0
                        continue
                    }

                    // AND 11
                    _start_i11 = _index.element

                    // CALLORVAR AT
                    var _r12: _KotlinParser_Item? = null
                    _r12 = _MemoCall(_memo, "AT", _index.element, ::AT, null)
                    if (_r12 != null) _index.element = _r12.nextIndex

                    // AND shortcut 11
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 11
                        continue
                    }

                    // CALLORVAR unescapedAnnotation
                    var _r14: _KotlinParser_Item? = null
                    _r14 = _MemoCall(_memo, "unescapedAnnotation", _index.element, ::unescapedAnnotation, null)
                    if (_r14 != null) _index.element = _r14.nextIndex

                    // BIND ann
                    ann = _memo.results.peek()

                    _label = 11
                }
                // AND 11
                11 -> {
                    val _r11_2 = _memo.results.pop()
                    val _r11_1 = _memo.results.pop()

                    if (_r11_1 != null && _r11_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i11, _index.element, _memo.input, (_r11_1.results + _r11_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i11
                    }

                    // ACT 10
                    val _r10 = _memo.results.peek()
                    if (_r10 != null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_r10.startIndex, _r10.nextIndex, _memo.input, _Thunk({ AST.SingleAnnotation(null, ann.r) }, _r10), true))
                    }

                    _label = 0
                }
                // OR 0
                0 -> {
                    break
                }
            }
        }
    }


    open fun multiAnnotation(_memo: _KotlinParser_Memo, __index: Int, _args: _KotlinParser_Args?) {
        val _index = Ref.IntRef()
        _index.element = __index

        val _arg_index = Ref.IntRef()
        val _arg_input_index = Ref.IntRef()

        var target: _KotlinParser_Item? = null
        var anns: _KotlinParser_Item? = null

        // OR 0
        var _start_i0 = _index.element

        // AND 2
        var _start_i2 = _index.element

        // AND 3
        var _start_i3 = _index.element

        // AND 4
        var _start_i4 = _index.element

        // AND 5
        var _start_i5 = _index.element

        // STAR 8
        var _start_i8 = _index.element
        val _inp8 = arrayListOf<Token?>()
        val _res8 = arrayListOf<AST.AstNode?>()

        // PLUS 12
        var _start_i12 = _index.element
        val _inp12 = arrayListOf<Token?>()
        val _res12 = arrayListOf<AST.AstNode?>()

        // AND 16
        var _start_i16 = _index.element

        // AND 17
        var _start_i17 = _index.element

        // AND 18
        var _start_i18 = _index.element

        // PLUS 22
        var _start_i22 = _index.element
        val _inp22 = arrayListOf<Token?>()
        val _res22 = arrayListOf<AST.AstNode?>()

        var _label = -1
        while(true) {
            when(_label) {
                -1 -> {
                    // OR 0
                    _start_i0 = _index.element

                    // AND 2
                    _start_i2 = _index.element

                    // AND 3
                    _start_i3 = _index.element

                    // AND 4
                    _start_i4 = _index.element

                    // AND 5
                    _start_i5 = _index.element

                    // CALLORVAR annotationUseSiteTarget
                    var _r7: _KotlinParser_Item? = null
                    _r7 = _MemoCall(_memo, "annotationUseSiteTarget", _index.element, ::annotationUseSiteTarget, null)
                    if (_r7 != null) _index.element = _r7.nextIndex

                    // BIND target
                    target = _memo.results.peek()

                    // AND shortcut 5
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 5
                        continue
                    }

                    // STAR 8
                    _start_i8 = _index.element
                    _label = 8
                }
                // STAR 8
                8 -> {
                    // CALLORVAR NL
                    var _r9: _KotlinParser_Item? = null
                    _r9 = _MemoCall(_memo, "NL", _index.element, ::NL, null)
                    if (_r9 != null) _index.element = _r9.nextIndex

                    // STAR 8
                    val _r8 = _memo.results.pop()
                    if (_r8 != null) {
                        _res8 += _r8.results
                        _label = 8
                        continue
                    } else {
                        _memo.results.push(_KotlinParser_Item(_start_i8, _index.element, _memo.input, _res8.filterNotNull(), true))
                    }

                    _label = 5
                }
                // AND 5
                5 -> {
                    val _r5_2 = _memo.results.pop()
                    val _r5_1 = _memo.results.pop()

                    if (_r5_1 != null && _r5_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i5, _index.element, _memo.input, (_r5_1.results + _r5_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i5
                    }

                    // AND shortcut 4
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 4
                        continue
                    }

                    // CALLORVAR LSQUARE
                    var _r10: _KotlinParser_Item? = null
                    _r10 = _MemoCall(_memo, "LSQUARE", _index.element, ::LSQUARE, null)
                    if (_r10 != null) _index.element = _r10.nextIndex

                    _label = 4
                }
                // AND 4
                4 -> {
                    val _r4_2 = _memo.results.pop()
                    val _r4_1 = _memo.results.pop()

                    if (_r4_1 != null && _r4_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i4, _index.element, _memo.input, (_r4_1.results + _r4_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i4
                    }

                    // AND shortcut 3
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 3
                        continue
                    }

                    // PLUS 12
                    _start_i12 = _index.element
                    _label = 12
                }
                // PLUS 12
                12 -> {
                    // CALLORVAR unescapedAnnotation
                    var _r13: _KotlinParser_Item? = null
                    _r13 = _MemoCall(_memo, "unescapedAnnotation", _index.element, ::unescapedAnnotation, null)
                    if (_r13 != null) _index.element = _r13.nextIndex

                    // PLUS 12
                    val _r12 = _memo.results.pop()
                    if (_r12 != null) {
                        _res12 += _r12.results
                        _label = 12
                        continue
                    } else {
                        if (_index.element > _start_i12) {
                            _memo.results.push(_KotlinParser_Item(_start_i12, _index.element, _memo.input, _res12.filterNotNull(), true))
                        } else {
                            _memo.results.push(null)
                        }
                    }

                    // BIND anns
                    anns = _memo.results.peek()

                    _label = 3
                }
                // AND 3
                3 -> {
                    val _r3_2 = _memo.results.pop()
                    val _r3_1 = _memo.results.pop()

                    if (_r3_1 != null && _r3_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i3, _index.element, _memo.input, (_r3_1.results + _r3_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i3
                    }

                    // AND shortcut 2
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 2
                        continue
                    }

                    // CALLORVAR RSQUARE
                    var _r14: _KotlinParser_Item? = null
                    _r14 = _MemoCall(_memo, "RSQUARE", _index.element, ::RSQUARE, null)
                    if (_r14 != null) _index.element = _r14.nextIndex

                    _label = 2
                }
                // AND 2
                2 -> {
                    val _r2_2 = _memo.results.pop()
                    val _r2_1 = _memo.results.pop()

                    if (_r2_1 != null && _r2_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i2, _index.element, _memo.input, (_r2_1.results + _r2_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i2
                    }

                    // ACT 1
                    val _r1 = _memo.results.peek()
                    if (_r1 != null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_r1.startIndex, _r1.nextIndex, _memo.input, _Thunk({ AST.MultiAnnotation(target.r, anns.l) }, _r1), true))
                    }

                    // OR shortcut 0
                    if (_memo.results.peek() == null) {
                        _memo.results.pop()
                        _index.element = _start_i0
                    } else {
                        _label = 0
                        continue
                    }

                    // AND 16
                    _start_i16 = _index.element

                    // AND 17
                    _start_i17 = _index.element

                    // AND 18
                    _start_i18 = _index.element

                    // CALLORVAR AT
                    var _r19: _KotlinParser_Item? = null
                    _r19 = _MemoCall(_memo, "AT", _index.element, ::AT, null)
                    if (_r19 != null) _index.element = _r19.nextIndex

                    // AND shortcut 18
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 18
                        continue
                    }

                    // CALLORVAR LSQUARE
                    var _r20: _KotlinParser_Item? = null
                    _r20 = _MemoCall(_memo, "LSQUARE", _index.element, ::LSQUARE, null)
                    if (_r20 != null) _index.element = _r20.nextIndex

                    _label = 18
                }
                // AND 18
                18 -> {
                    val _r18_2 = _memo.results.pop()
                    val _r18_1 = _memo.results.pop()

                    if (_r18_1 != null && _r18_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i18, _index.element, _memo.input, (_r18_1.results + _r18_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i18
                    }

                    // AND shortcut 17
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 17
                        continue
                    }

                    // PLUS 22
                    _start_i22 = _index.element
                    _label = 22
                }
                // PLUS 22
                22 -> {
                    // CALLORVAR unescapedAnnotation
                    var _r23: _KotlinParser_Item? = null
                    _r23 = _MemoCall(_memo, "unescapedAnnotation", _index.element, ::unescapedAnnotation, null)
                    if (_r23 != null) _index.element = _r23.nextIndex

                    // PLUS 22
                    val _r22 = _memo.results.pop()
                    if (_r22 != null) {
                        _res22 += _r22.results
                        _label = 22
                        continue
                    } else {
                        if (_index.element > _start_i22) {
                            _memo.results.push(_KotlinParser_Item(_start_i22, _index.element, _memo.input, _res22.filterNotNull(), true))
                        } else {
                            _memo.results.push(null)
                        }
                    }

                    // BIND anns
                    anns = _memo.results.peek()

                    _label = 17
                }
                // AND 17
                17 -> {
                    val _r17_2 = _memo.results.pop()
                    val _r17_1 = _memo.results.pop()

                    if (_r17_1 != null && _r17_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i17, _index.element, _memo.input, (_r17_1.results + _r17_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i17
                    }

                    // AND shortcut 16
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 16
                        continue
                    }

                    // CALLORVAR RSQUARE
                    var _r24: _KotlinParser_Item? = null
                    _r24 = _MemoCall(_memo, "RSQUARE", _index.element, ::RSQUARE, null)
                    if (_r24 != null) _index.element = _r24.nextIndex

                    _label = 16
                }
                // AND 16
                16 -> {
                    val _r16_2 = _memo.results.pop()
                    val _r16_1 = _memo.results.pop()

                    if (_r16_1 != null && _r16_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i16, _index.element, _memo.input, (_r16_1.results + _r16_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i16
                    }

                    // ACT 15
                    val _r15 = _memo.results.peek()
                    if (_r15 != null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_r15.startIndex, _r15.nextIndex, _memo.input, _Thunk({ AST.MultiAnnotation(null, anns.l) }, _r15), true))
                    }

                    _label = 0
                }
                // OR 0
                0 -> {
                    break
                }
            }
        }
    }


    open fun annotationUseSiteTarget(_memo: _KotlinParser_Memo, __index: Int, _args: _KotlinParser_Args?) {
        val _index = Ref.IntRef()
        _index.element = __index

        val _arg_index = Ref.IntRef()
        val _arg_input_index = Ref.IntRef()

        // OR 0
        var _start_i0 = _index.element

        // OR 1
        var _start_i1 = _index.element

        // OR 2
        var _start_i2 = _index.element

        // OR 3
        var _start_i3 = _index.element

        // OR 4
        var _start_i4 = _index.element

        // OR 5
        var _start_i5 = _index.element

        // OR 6
        var _start_i6 = _index.element

        // OR 7
        var _start_i7 = _index.element

        // AND 9
        var _start_i9 = _index.element

        // AND 10
        var _start_i10 = _index.element

        // AND 11
        var _start_i11 = _index.element

        // STAR 14
        var _start_i14 = _index.element
        val _inp14 = arrayListOf<Token?>()
        val _res14 = arrayListOf<AST.AstNode?>()

        // AND 18
        var _start_i18 = _index.element

        // AND 19
        var _start_i19 = _index.element

        // AND 20
        var _start_i20 = _index.element

        // STAR 23
        var _start_i23 = _index.element
        val _inp23 = arrayListOf<Token?>()
        val _res23 = arrayListOf<AST.AstNode?>()

        // AND 27
        var _start_i27 = _index.element

        // AND 28
        var _start_i28 = _index.element

        // AND 29
        var _start_i29 = _index.element

        // STAR 32
        var _start_i32 = _index.element
        val _inp32 = arrayListOf<Token?>()
        val _res32 = arrayListOf<AST.AstNode?>()

        // AND 36
        var _start_i36 = _index.element

        // AND 37
        var _start_i37 = _index.element

        // AND 38
        var _start_i38 = _index.element

        // STAR 41
        var _start_i41 = _index.element
        val _inp41 = arrayListOf<Token?>()
        val _res41 = arrayListOf<AST.AstNode?>()

        // AND 45
        var _start_i45 = _index.element

        // AND 46
        var _start_i46 = _index.element

        // AND 47
        var _start_i47 = _index.element

        // STAR 50
        var _start_i50 = _index.element
        val _inp50 = arrayListOf<Token?>()
        val _res50 = arrayListOf<AST.AstNode?>()

        // AND 54
        var _start_i54 = _index.element

        // AND 55
        var _start_i55 = _index.element

        // AND 56
        var _start_i56 = _index.element

        // STAR 59
        var _start_i59 = _index.element
        val _inp59 = arrayListOf<Token?>()
        val _res59 = arrayListOf<AST.AstNode?>()

        // AND 63
        var _start_i63 = _index.element

        // AND 64
        var _start_i64 = _index.element

        // AND 65
        var _start_i65 = _index.element

        // STAR 68
        var _start_i68 = _index.element
        val _inp68 = arrayListOf<Token?>()
        val _res68 = arrayListOf<AST.AstNode?>()

        // AND 72
        var _start_i72 = _index.element

        // AND 73
        var _start_i73 = _index.element

        // AND 74
        var _start_i74 = _index.element

        // STAR 77
        var _start_i77 = _index.element
        val _inp77 = arrayListOf<Token?>()
        val _res77 = arrayListOf<AST.AstNode?>()

        // AND 81
        var _start_i81 = _index.element

        // AND 82
        var _start_i82 = _index.element

        // AND 83
        var _start_i83 = _index.element

        // STAR 86
        var _start_i86 = _index.element
        val _inp86 = arrayListOf<Token?>()
        val _res86 = arrayListOf<AST.AstNode?>()

        var _label = -1
        while(true) {
            when(_label) {
                -1 -> {
                    // OR 0
                    _start_i0 = _index.element

                    // OR 1
                    _start_i1 = _index.element

                    // OR 2
                    _start_i2 = _index.element

                    // OR 3
                    _start_i3 = _index.element

                    // OR 4
                    _start_i4 = _index.element

                    // OR 5
                    _start_i5 = _index.element

                    // OR 6
                    _start_i6 = _index.element

                    // OR 7
                    _start_i7 = _index.element

                    // AND 9
                    _start_i9 = _index.element

                    // AND 10
                    _start_i10 = _index.element

                    // AND 11
                    _start_i11 = _index.element

                    // CALLORVAR AT
                    var _r12: _KotlinParser_Item? = null
                    _r12 = _MemoCall(_memo, "AT", _index.element, ::AT, null)
                    if (_r12 != null) _index.element = _r12.nextIndex

                    // AND shortcut 11
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 11
                        continue
                    }

                    // CALLORVAR FIELD
                    var _r13: _KotlinParser_Item? = null
                    _r13 = _MemoCall(_memo, "FIELD", _index.element, ::FIELD, null)
                    if (_r13 != null) _index.element = _r13.nextIndex

                    _label = 11
                }
                // AND 11
                11 -> {
                    val _r11_2 = _memo.results.pop()
                    val _r11_1 = _memo.results.pop()

                    if (_r11_1 != null && _r11_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i11, _index.element, _memo.input, (_r11_1.results + _r11_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i11
                    }

                    // AND shortcut 10
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 10
                        continue
                    }

                    // STAR 14
                    _start_i14 = _index.element
                    _label = 14
                }
                // STAR 14
                14 -> {
                    // CALLORVAR NL
                    var _r15: _KotlinParser_Item? = null
                    _r15 = _MemoCall(_memo, "NL", _index.element, ::NL, null)
                    if (_r15 != null) _index.element = _r15.nextIndex

                    // STAR 14
                    val _r14 = _memo.results.pop()
                    if (_r14 != null) {
                        _res14 += _r14.results
                        _label = 14
                        continue
                    } else {
                        _memo.results.push(_KotlinParser_Item(_start_i14, _index.element, _memo.input, _res14.filterNotNull(), true))
                    }

                    _label = 10
                }
                // AND 10
                10 -> {
                    val _r10_2 = _memo.results.pop()
                    val _r10_1 = _memo.results.pop()

                    if (_r10_1 != null && _r10_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i10, _index.element, _memo.input, (_r10_1.results + _r10_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i10
                    }

                    // AND shortcut 9
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 9
                        continue
                    }

                    // CALLORVAR COLON
                    var _r16: _KotlinParser_Item? = null
                    _r16 = _MemoCall(_memo, "COLON", _index.element, ::COLON, null)
                    if (_r16 != null) _index.element = _r16.nextIndex

                    _label = 9
                }
                // AND 9
                9 -> {
                    val _r9_2 = _memo.results.pop()
                    val _r9_1 = _memo.results.pop()

                    if (_r9_1 != null && _r9_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i9, _index.element, _memo.input, (_r9_1.results + _r9_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i9
                    }

                    // ACT 8
                    val _r8 = _memo.results.peek()
                    if (_r8 != null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_r8.startIndex, _r8.nextIndex, _memo.input, _Thunk({ AST.FIELD }, _r8), true))
                    }

                    // OR shortcut 7
                    if (_memo.results.peek() == null) {
                        _memo.results.pop()
                        _index.element = _start_i7
                    } else {
                        _label = 7
                        continue
                    }

                    // AND 18
                    _start_i18 = _index.element

                    // AND 19
                    _start_i19 = _index.element

                    // AND 20
                    _start_i20 = _index.element

                    // CALLORVAR AT
                    var _r21: _KotlinParser_Item? = null
                    _r21 = _MemoCall(_memo, "AT", _index.element, ::AT, null)
                    if (_r21 != null) _index.element = _r21.nextIndex

                    // AND shortcut 20
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 20
                        continue
                    }

                    // CALLORVAR PROPERTY
                    var _r22: _KotlinParser_Item? = null
                    _r22 = _MemoCall(_memo, "PROPERTY", _index.element, ::PROPERTY, null)
                    if (_r22 != null) _index.element = _r22.nextIndex

                    _label = 20
                }
                // AND 20
                20 -> {
                    val _r20_2 = _memo.results.pop()
                    val _r20_1 = _memo.results.pop()

                    if (_r20_1 != null && _r20_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i20, _index.element, _memo.input, (_r20_1.results + _r20_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i20
                    }

                    // AND shortcut 19
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 19
                        continue
                    }

                    // STAR 23
                    _start_i23 = _index.element
                    _label = 23
                }
                // STAR 23
                23 -> {
                    // CALLORVAR NL
                    var _r24: _KotlinParser_Item? = null
                    _r24 = _MemoCall(_memo, "NL", _index.element, ::NL, null)
                    if (_r24 != null) _index.element = _r24.nextIndex

                    // STAR 23
                    val _r23 = _memo.results.pop()
                    if (_r23 != null) {
                        _res23 += _r23.results
                        _label = 23
                        continue
                    } else {
                        _memo.results.push(_KotlinParser_Item(_start_i23, _index.element, _memo.input, _res23.filterNotNull(), true))
                    }

                    _label = 19
                }
                // AND 19
                19 -> {
                    val _r19_2 = _memo.results.pop()
                    val _r19_1 = _memo.results.pop()

                    if (_r19_1 != null && _r19_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i19, _index.element, _memo.input, (_r19_1.results + _r19_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i19
                    }

                    // AND shortcut 18
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 18
                        continue
                    }

                    // CALLORVAR COLON
                    var _r25: _KotlinParser_Item? = null
                    _r25 = _MemoCall(_memo, "COLON", _index.element, ::COLON, null)
                    if (_r25 != null) _index.element = _r25.nextIndex

                    _label = 18
                }
                // AND 18
                18 -> {
                    val _r18_2 = _memo.results.pop()
                    val _r18_1 = _memo.results.pop()

                    if (_r18_1 != null && _r18_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i18, _index.element, _memo.input, (_r18_1.results + _r18_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i18
                    }

                    // ACT 17
                    val _r17 = _memo.results.peek()
                    if (_r17 != null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_r17.startIndex, _r17.nextIndex, _memo.input, _Thunk({ AST.PROPERTY }, _r17), true))
                    }

                    _label = 7
                }
                // OR 7
                7 -> {
                    // OR shortcut 6
                    if (_memo.results.peek() == null) {
                        _memo.results.pop()
                        _index.element = _start_i6
                    } else {
                        _label = 6
                        continue
                    }

                    // AND 27
                    _start_i27 = _index.element

                    // AND 28
                    _start_i28 = _index.element

                    // AND 29
                    _start_i29 = _index.element

                    // CALLORVAR AT
                    var _r30: _KotlinParser_Item? = null
                    _r30 = _MemoCall(_memo, "AT", _index.element, ::AT, null)
                    if (_r30 != null) _index.element = _r30.nextIndex

                    // AND shortcut 29
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 29
                        continue
                    }

                    // CALLORVAR GET
                    var _r31: _KotlinParser_Item? = null
                    _r31 = _MemoCall(_memo, "GET", _index.element, ::GET, null)
                    if (_r31 != null) _index.element = _r31.nextIndex

                    _label = 29
                }
                // AND 29
                29 -> {
                    val _r29_2 = _memo.results.pop()
                    val _r29_1 = _memo.results.pop()

                    if (_r29_1 != null && _r29_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i29, _index.element, _memo.input, (_r29_1.results + _r29_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i29
                    }

                    // AND shortcut 28
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 28
                        continue
                    }

                    // STAR 32
                    _start_i32 = _index.element
                    _label = 32
                }
                // STAR 32
                32 -> {
                    // CALLORVAR NL
                    var _r33: _KotlinParser_Item? = null
                    _r33 = _MemoCall(_memo, "NL", _index.element, ::NL, null)
                    if (_r33 != null) _index.element = _r33.nextIndex

                    // STAR 32
                    val _r32 = _memo.results.pop()
                    if (_r32 != null) {
                        _res32 += _r32.results
                        _label = 32
                        continue
                    } else {
                        _memo.results.push(_KotlinParser_Item(_start_i32, _index.element, _memo.input, _res32.filterNotNull(), true))
                    }

                    _label = 28
                }
                // AND 28
                28 -> {
                    val _r28_2 = _memo.results.pop()
                    val _r28_1 = _memo.results.pop()

                    if (_r28_1 != null && _r28_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i28, _index.element, _memo.input, (_r28_1.results + _r28_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i28
                    }

                    // AND shortcut 27
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 27
                        continue
                    }

                    // CALLORVAR COLON
                    var _r34: _KotlinParser_Item? = null
                    _r34 = _MemoCall(_memo, "COLON", _index.element, ::COLON, null)
                    if (_r34 != null) _index.element = _r34.nextIndex

                    _label = 27
                }
                // AND 27
                27 -> {
                    val _r27_2 = _memo.results.pop()
                    val _r27_1 = _memo.results.pop()

                    if (_r27_1 != null && _r27_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i27, _index.element, _memo.input, (_r27_1.results + _r27_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i27
                    }

                    // ACT 26
                    val _r26 = _memo.results.peek()
                    if (_r26 != null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_r26.startIndex, _r26.nextIndex, _memo.input, _Thunk({ AST.GET }, _r26), true))
                    }

                    _label = 6
                }
                // OR 6
                6 -> {
                    // OR shortcut 5
                    if (_memo.results.peek() == null) {
                        _memo.results.pop()
                        _index.element = _start_i5
                    } else {
                        _label = 5
                        continue
                    }

                    // AND 36
                    _start_i36 = _index.element

                    // AND 37
                    _start_i37 = _index.element

                    // AND 38
                    _start_i38 = _index.element

                    // CALLORVAR AT
                    var _r39: _KotlinParser_Item? = null
                    _r39 = _MemoCall(_memo, "AT", _index.element, ::AT, null)
                    if (_r39 != null) _index.element = _r39.nextIndex

                    // AND shortcut 38
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 38
                        continue
                    }

                    // CALLORVAR SET
                    var _r40: _KotlinParser_Item? = null
                    _r40 = _MemoCall(_memo, "SET", _index.element, ::SET, null)
                    if (_r40 != null) _index.element = _r40.nextIndex

                    _label = 38
                }
                // AND 38
                38 -> {
                    val _r38_2 = _memo.results.pop()
                    val _r38_1 = _memo.results.pop()

                    if (_r38_1 != null && _r38_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i38, _index.element, _memo.input, (_r38_1.results + _r38_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i38
                    }

                    // AND shortcut 37
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 37
                        continue
                    }

                    // STAR 41
                    _start_i41 = _index.element
                    _label = 41
                }
                // STAR 41
                41 -> {
                    // CALLORVAR NL
                    var _r42: _KotlinParser_Item? = null
                    _r42 = _MemoCall(_memo, "NL", _index.element, ::NL, null)
                    if (_r42 != null) _index.element = _r42.nextIndex

                    // STAR 41
                    val _r41 = _memo.results.pop()
                    if (_r41 != null) {
                        _res41 += _r41.results
                        _label = 41
                        continue
                    } else {
                        _memo.results.push(_KotlinParser_Item(_start_i41, _index.element, _memo.input, _res41.filterNotNull(), true))
                    }

                    _label = 37
                }
                // AND 37
                37 -> {
                    val _r37_2 = _memo.results.pop()
                    val _r37_1 = _memo.results.pop()

                    if (_r37_1 != null && _r37_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i37, _index.element, _memo.input, (_r37_1.results + _r37_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i37
                    }

                    // AND shortcut 36
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 36
                        continue
                    }

                    // CALLORVAR COLON
                    var _r43: _KotlinParser_Item? = null
                    _r43 = _MemoCall(_memo, "COLON", _index.element, ::COLON, null)
                    if (_r43 != null) _index.element = _r43.nextIndex

                    _label = 36
                }
                // AND 36
                36 -> {
                    val _r36_2 = _memo.results.pop()
                    val _r36_1 = _memo.results.pop()

                    if (_r36_1 != null && _r36_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i36, _index.element, _memo.input, (_r36_1.results + _r36_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i36
                    }

                    // ACT 35
                    val _r35 = _memo.results.peek()
                    if (_r35 != null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_r35.startIndex, _r35.nextIndex, _memo.input, _Thunk({ AST.SET }, _r35), true))
                    }

                    _label = 5
                }
                // OR 5
                5 -> {
                    // OR shortcut 4
                    if (_memo.results.peek() == null) {
                        _memo.results.pop()
                        _index.element = _start_i4
                    } else {
                        _label = 4
                        continue
                    }

                    // AND 45
                    _start_i45 = _index.element

                    // AND 46
                    _start_i46 = _index.element

                    // AND 47
                    _start_i47 = _index.element

                    // CALLORVAR AT
                    var _r48: _KotlinParser_Item? = null
                    _r48 = _MemoCall(_memo, "AT", _index.element, ::AT, null)
                    if (_r48 != null) _index.element = _r48.nextIndex

                    // AND shortcut 47
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 47
                        continue
                    }

                    // CALLORVAR RECEIVER
                    var _r49: _KotlinParser_Item? = null
                    _r49 = _MemoCall(_memo, "RECEIVER", _index.element, ::RECEIVER, null)
                    if (_r49 != null) _index.element = _r49.nextIndex

                    _label = 47
                }
                // AND 47
                47 -> {
                    val _r47_2 = _memo.results.pop()
                    val _r47_1 = _memo.results.pop()

                    if (_r47_1 != null && _r47_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i47, _index.element, _memo.input, (_r47_1.results + _r47_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i47
                    }

                    // AND shortcut 46
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 46
                        continue
                    }

                    // STAR 50
                    _start_i50 = _index.element
                    _label = 50
                }
                // STAR 50
                50 -> {
                    // CALLORVAR NL
                    var _r51: _KotlinParser_Item? = null
                    _r51 = _MemoCall(_memo, "NL", _index.element, ::NL, null)
                    if (_r51 != null) _index.element = _r51.nextIndex

                    // STAR 50
                    val _r50 = _memo.results.pop()
                    if (_r50 != null) {
                        _res50 += _r50.results
                        _label = 50
                        continue
                    } else {
                        _memo.results.push(_KotlinParser_Item(_start_i50, _index.element, _memo.input, _res50.filterNotNull(), true))
                    }

                    _label = 46
                }
                // AND 46
                46 -> {
                    val _r46_2 = _memo.results.pop()
                    val _r46_1 = _memo.results.pop()

                    if (_r46_1 != null && _r46_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i46, _index.element, _memo.input, (_r46_1.results + _r46_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i46
                    }

                    // AND shortcut 45
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 45
                        continue
                    }

                    // CALLORVAR COLON
                    var _r52: _KotlinParser_Item? = null
                    _r52 = _MemoCall(_memo, "COLON", _index.element, ::COLON, null)
                    if (_r52 != null) _index.element = _r52.nextIndex

                    _label = 45
                }
                // AND 45
                45 -> {
                    val _r45_2 = _memo.results.pop()
                    val _r45_1 = _memo.results.pop()

                    if (_r45_1 != null && _r45_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i45, _index.element, _memo.input, (_r45_1.results + _r45_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i45
                    }

                    // ACT 44
                    val _r44 = _memo.results.peek()
                    if (_r44 != null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_r44.startIndex, _r44.nextIndex, _memo.input, _Thunk({ AST.RECEIVER }, _r44), true))
                    }

                    _label = 4
                }
                // OR 4
                4 -> {
                    // OR shortcut 3
                    if (_memo.results.peek() == null) {
                        _memo.results.pop()
                        _index.element = _start_i3
                    } else {
                        _label = 3
                        continue
                    }

                    // AND 54
                    _start_i54 = _index.element

                    // AND 55
                    _start_i55 = _index.element

                    // AND 56
                    _start_i56 = _index.element

                    // CALLORVAR AT
                    var _r57: _KotlinParser_Item? = null
                    _r57 = _MemoCall(_memo, "AT", _index.element, ::AT, null)
                    if (_r57 != null) _index.element = _r57.nextIndex

                    // AND shortcut 56
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 56
                        continue
                    }

                    // CALLORVAR PARAM
                    var _r58: _KotlinParser_Item? = null
                    _r58 = _MemoCall(_memo, "PARAM", _index.element, ::PARAM, null)
                    if (_r58 != null) _index.element = _r58.nextIndex

                    _label = 56
                }
                // AND 56
                56 -> {
                    val _r56_2 = _memo.results.pop()
                    val _r56_1 = _memo.results.pop()

                    if (_r56_1 != null && _r56_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i56, _index.element, _memo.input, (_r56_1.results + _r56_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i56
                    }

                    // AND shortcut 55
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 55
                        continue
                    }

                    // STAR 59
                    _start_i59 = _index.element
                    _label = 59
                }
                // STAR 59
                59 -> {
                    // CALLORVAR NL
                    var _r60: _KotlinParser_Item? = null
                    _r60 = _MemoCall(_memo, "NL", _index.element, ::NL, null)
                    if (_r60 != null) _index.element = _r60.nextIndex

                    // STAR 59
                    val _r59 = _memo.results.pop()
                    if (_r59 != null) {
                        _res59 += _r59.results
                        _label = 59
                        continue
                    } else {
                        _memo.results.push(_KotlinParser_Item(_start_i59, _index.element, _memo.input, _res59.filterNotNull(), true))
                    }

                    _label = 55
                }
                // AND 55
                55 -> {
                    val _r55_2 = _memo.results.pop()
                    val _r55_1 = _memo.results.pop()

                    if (_r55_1 != null && _r55_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i55, _index.element, _memo.input, (_r55_1.results + _r55_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i55
                    }

                    // AND shortcut 54
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 54
                        continue
                    }

                    // CALLORVAR COLON
                    var _r61: _KotlinParser_Item? = null
                    _r61 = _MemoCall(_memo, "COLON", _index.element, ::COLON, null)
                    if (_r61 != null) _index.element = _r61.nextIndex

                    _label = 54
                }
                // AND 54
                54 -> {
                    val _r54_2 = _memo.results.pop()
                    val _r54_1 = _memo.results.pop()

                    if (_r54_1 != null && _r54_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i54, _index.element, _memo.input, (_r54_1.results + _r54_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i54
                    }

                    // ACT 53
                    val _r53 = _memo.results.peek()
                    if (_r53 != null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_r53.startIndex, _r53.nextIndex, _memo.input, _Thunk({ AST.PARAM }, _r53), true))
                    }

                    _label = 3
                }
                // OR 3
                3 -> {
                    // OR shortcut 2
                    if (_memo.results.peek() == null) {
                        _memo.results.pop()
                        _index.element = _start_i2
                    } else {
                        _label = 2
                        continue
                    }

                    // AND 63
                    _start_i63 = _index.element

                    // AND 64
                    _start_i64 = _index.element

                    // AND 65
                    _start_i65 = _index.element

                    // CALLORVAR AT
                    var _r66: _KotlinParser_Item? = null
                    _r66 = _MemoCall(_memo, "AT", _index.element, ::AT, null)
                    if (_r66 != null) _index.element = _r66.nextIndex

                    // AND shortcut 65
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 65
                        continue
                    }

                    // CALLORVAR SETPARAM
                    var _r67: _KotlinParser_Item? = null
                    _r67 = _MemoCall(_memo, "SETPARAM", _index.element, ::SETPARAM, null)
                    if (_r67 != null) _index.element = _r67.nextIndex

                    _label = 65
                }
                // AND 65
                65 -> {
                    val _r65_2 = _memo.results.pop()
                    val _r65_1 = _memo.results.pop()

                    if (_r65_1 != null && _r65_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i65, _index.element, _memo.input, (_r65_1.results + _r65_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i65
                    }

                    // AND shortcut 64
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 64
                        continue
                    }

                    // STAR 68
                    _start_i68 = _index.element
                    _label = 68
                }
                // STAR 68
                68 -> {
                    // CALLORVAR NL
                    var _r69: _KotlinParser_Item? = null
                    _r69 = _MemoCall(_memo, "NL", _index.element, ::NL, null)
                    if (_r69 != null) _index.element = _r69.nextIndex

                    // STAR 68
                    val _r68 = _memo.results.pop()
                    if (_r68 != null) {
                        _res68 += _r68.results
                        _label = 68
                        continue
                    } else {
                        _memo.results.push(_KotlinParser_Item(_start_i68, _index.element, _memo.input, _res68.filterNotNull(), true))
                    }

                    _label = 64
                }
                // AND 64
                64 -> {
                    val _r64_2 = _memo.results.pop()
                    val _r64_1 = _memo.results.pop()

                    if (_r64_1 != null && _r64_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i64, _index.element, _memo.input, (_r64_1.results + _r64_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i64
                    }

                    // AND shortcut 63
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 63
                        continue
                    }

                    // CALLORVAR COLON
                    var _r70: _KotlinParser_Item? = null
                    _r70 = _MemoCall(_memo, "COLON", _index.element, ::COLON, null)
                    if (_r70 != null) _index.element = _r70.nextIndex

                    _label = 63
                }
                // AND 63
                63 -> {
                    val _r63_2 = _memo.results.pop()
                    val _r63_1 = _memo.results.pop()

                    if (_r63_1 != null && _r63_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i63, _index.element, _memo.input, (_r63_1.results + _r63_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i63
                    }

                    // ACT 62
                    val _r62 = _memo.results.peek()
                    if (_r62 != null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_r62.startIndex, _r62.nextIndex, _memo.input, _Thunk({ AST.SETPARAM }, _r62), true))
                    }

                    _label = 2
                }
                // OR 2
                2 -> {
                    // OR shortcut 1
                    if (_memo.results.peek() == null) {
                        _memo.results.pop()
                        _index.element = _start_i1
                    } else {
                        _label = 1
                        continue
                    }

                    // AND 72
                    _start_i72 = _index.element

                    // AND 73
                    _start_i73 = _index.element

                    // AND 74
                    _start_i74 = _index.element

                    // CALLORVAR AT
                    var _r75: _KotlinParser_Item? = null
                    _r75 = _MemoCall(_memo, "AT", _index.element, ::AT, null)
                    if (_r75 != null) _index.element = _r75.nextIndex

                    // AND shortcut 74
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 74
                        continue
                    }

                    // CALLORVAR DELEGATE
                    var _r76: _KotlinParser_Item? = null
                    _r76 = _MemoCall(_memo, "DELEGATE", _index.element, ::DELEGATE, null)
                    if (_r76 != null) _index.element = _r76.nextIndex

                    _label = 74
                }
                // AND 74
                74 -> {
                    val _r74_2 = _memo.results.pop()
                    val _r74_1 = _memo.results.pop()

                    if (_r74_1 != null && _r74_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i74, _index.element, _memo.input, (_r74_1.results + _r74_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i74
                    }

                    // AND shortcut 73
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 73
                        continue
                    }

                    // STAR 77
                    _start_i77 = _index.element
                    _label = 77
                }
                // STAR 77
                77 -> {
                    // CALLORVAR NL
                    var _r78: _KotlinParser_Item? = null
                    _r78 = _MemoCall(_memo, "NL", _index.element, ::NL, null)
                    if (_r78 != null) _index.element = _r78.nextIndex

                    // STAR 77
                    val _r77 = _memo.results.pop()
                    if (_r77 != null) {
                        _res77 += _r77.results
                        _label = 77
                        continue
                    } else {
                        _memo.results.push(_KotlinParser_Item(_start_i77, _index.element, _memo.input, _res77.filterNotNull(), true))
                    }

                    _label = 73
                }
                // AND 73
                73 -> {
                    val _r73_2 = _memo.results.pop()
                    val _r73_1 = _memo.results.pop()

                    if (_r73_1 != null && _r73_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i73, _index.element, _memo.input, (_r73_1.results + _r73_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i73
                    }

                    // AND shortcut 72
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 72
                        continue
                    }

                    // CALLORVAR COLON
                    var _r79: _KotlinParser_Item? = null
                    _r79 = _MemoCall(_memo, "COLON", _index.element, ::COLON, null)
                    if (_r79 != null) _index.element = _r79.nextIndex

                    _label = 72
                }
                // AND 72
                72 -> {
                    val _r72_2 = _memo.results.pop()
                    val _r72_1 = _memo.results.pop()

                    if (_r72_1 != null && _r72_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i72, _index.element, _memo.input, (_r72_1.results + _r72_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i72
                    }

                    // ACT 71
                    val _r71 = _memo.results.peek()
                    if (_r71 != null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_r71.startIndex, _r71.nextIndex, _memo.input, _Thunk({ AST.DELEGATE }, _r71), true))
                    }

                    _label = 1
                }
                // OR 1
                1 -> {
                    // OR shortcut 0
                    if (_memo.results.peek() == null) {
                        _memo.results.pop()
                        _index.element = _start_i0
                    } else {
                        _label = 0
                        continue
                    }

                    // AND 81
                    _start_i81 = _index.element

                    // AND 82
                    _start_i82 = _index.element

                    // AND 83
                    _start_i83 = _index.element

                    // CALLORVAR AT
                    var _r84: _KotlinParser_Item? = null
                    _r84 = _MemoCall(_memo, "AT", _index.element, ::AT, null)
                    if (_r84 != null) _index.element = _r84.nextIndex

                    // AND shortcut 83
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 83
                        continue
                    }

                    // CALLORVAR FILE
                    var _r85: _KotlinParser_Item? = null
                    _r85 = _MemoCall(_memo, "FILE", _index.element, ::FILE, null)
                    if (_r85 != null) _index.element = _r85.nextIndex

                    _label = 83
                }
                // AND 83
                83 -> {
                    val _r83_2 = _memo.results.pop()
                    val _r83_1 = _memo.results.pop()

                    if (_r83_1 != null && _r83_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i83, _index.element, _memo.input, (_r83_1.results + _r83_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i83
                    }

                    // AND shortcut 82
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 82
                        continue
                    }

                    // STAR 86
                    _start_i86 = _index.element
                    _label = 86
                }
                // STAR 86
                86 -> {
                    // CALLORVAR NL
                    var _r87: _KotlinParser_Item? = null
                    _r87 = _MemoCall(_memo, "NL", _index.element, ::NL, null)
                    if (_r87 != null) _index.element = _r87.nextIndex

                    // STAR 86
                    val _r86 = _memo.results.pop()
                    if (_r86 != null) {
                        _res86 += _r86.results
                        _label = 86
                        continue
                    } else {
                        _memo.results.push(_KotlinParser_Item(_start_i86, _index.element, _memo.input, _res86.filterNotNull(), true))
                    }

                    _label = 82
                }
                // AND 82
                82 -> {
                    val _r82_2 = _memo.results.pop()
                    val _r82_1 = _memo.results.pop()

                    if (_r82_1 != null && _r82_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i82, _index.element, _memo.input, (_r82_1.results + _r82_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i82
                    }

                    // AND shortcut 81
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 81
                        continue
                    }

                    // CALLORVAR COLON
                    var _r88: _KotlinParser_Item? = null
                    _r88 = _MemoCall(_memo, "COLON", _index.element, ::COLON, null)
                    if (_r88 != null) _index.element = _r88.nextIndex

                    _label = 81
                }
                // AND 81
                81 -> {
                    val _r81_2 = _memo.results.pop()
                    val _r81_1 = _memo.results.pop()

                    if (_r81_1 != null && _r81_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i81, _index.element, _memo.input, (_r81_1.results + _r81_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i81
                    }

                    // ACT 80
                    val _r80 = _memo.results.peek()
                    if (_r80 != null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_r80.startIndex, _r80.nextIndex, _memo.input, _Thunk({ AST.FILE }, _r80), true))
                    }

                    _label = 0
                }
                // OR 0
                0 -> {
                    break
                }
            }
        }
    }


    open fun unescapedAnnotation(_memo: _KotlinParser_Memo, __index: Int, _args: _KotlinParser_Args?) {
        val _index = Ref.IntRef()
        _index.element = __index

        val _arg_index = Ref.IntRef()
        val _arg_input_index = Ref.IntRef()

        // OR 0
        var _start_i0 = _index.element

        var _label = -1
        while(true) {
            when(_label) {
                -1 -> {
                    // OR 0
                    _start_i0 = _index.element

                    // CALLORVAR constructorInvocation
                    var _r1: _KotlinParser_Item? = null
                    _r1 = _MemoCall(_memo, "constructorInvocation", _index.element, ::constructorInvocation, null)
                    if (_r1 != null) _index.element = _r1.nextIndex

                    // OR shortcut 0
                    if (_memo.results.peek() == null) {
                        _memo.results.pop()
                        _index.element = _start_i0
                    } else {
                        _label = 0
                        continue
                    }

                    // CALLORVAR userType
                    var _r2: _KotlinParser_Item? = null
                    _r2 = _MemoCall(_memo, "userType", _index.element, ::userType, null)
                    if (_r2 != null) _index.element = _r2.nextIndex

                    _label = 0
                }
                // OR 0
                0 -> {
                    break
                }
            }
        }
    }


    open fun simpleIdentifier(_memo: _KotlinParser_Memo, __index: Int, _args: _KotlinParser_Args?) {
        val _index = Ref.IntRef()
        _index.element = __index

        val _arg_index = Ref.IntRef()
        val _arg_input_index = Ref.IntRef()

        var t: _KotlinParser_Item? = null

        // OR 0
        var _start_i0 = _index.element

        // OR 1
        var _start_i1 = _index.element

        // OR 2
        var _start_i2 = _index.element

        // OR 3
        var _start_i3 = _index.element

        // OR 4
        var _start_i4 = _index.element

        // OR 5
        var _start_i5 = _index.element

        // OR 6
        var _start_i6 = _index.element

        // OR 7
        var _start_i7 = _index.element

        // OR 8
        var _start_i8 = _index.element

        // OR 9
        var _start_i9 = _index.element

        // OR 10
        var _start_i10 = _index.element

        // OR 11
        var _start_i11 = _index.element

        // OR 12
        var _start_i12 = _index.element

        // OR 13
        var _start_i13 = _index.element

        // OR 14
        var _start_i14 = _index.element

        // OR 15
        var _start_i15 = _index.element

        // OR 16
        var _start_i16 = _index.element

        // OR 17
        var _start_i17 = _index.element

        // OR 18
        var _start_i18 = _index.element

        // OR 19
        var _start_i19 = _index.element

        // OR 20
        var _start_i20 = _index.element

        // OR 21
        var _start_i21 = _index.element

        // OR 22
        var _start_i22 = _index.element

        // OR 23
        var _start_i23 = _index.element

        // OR 24
        var _start_i24 = _index.element

        // OR 25
        var _start_i25 = _index.element

        // OR 26
        var _start_i26 = _index.element

        // OR 27
        var _start_i27 = _index.element

        // OR 28
        var _start_i28 = _index.element

        // OR 29
        var _start_i29 = _index.element

        // OR 30
        var _start_i30 = _index.element

        // OR 31
        var _start_i31 = _index.element

        // OR 32
        var _start_i32 = _index.element

        // OR 33
        var _start_i33 = _index.element

        // OR 34
        var _start_i34 = _index.element

        // OR 35
        var _start_i35 = _index.element

        // OR 36
        var _start_i36 = _index.element

        // OR 37
        var _start_i37 = _index.element

        // OR 38
        var _start_i38 = _index.element

        // OR 39
        var _start_i39 = _index.element

        // OR 40
        var _start_i40 = _index.element

        // OR 41
        var _start_i41 = _index.element

        // OR 42
        var _start_i42 = _index.element

        // OR 43
        var _start_i43 = _index.element

        // OR 44
        var _start_i44 = _index.element

        // OR 45
        var _start_i45 = _index.element

        // OR 46
        var _start_i46 = _index.element

        // COND 48
        var _start_i48 = _index.element

        var _label = -1
        while(true) {
            when(_label) {
                -1 -> {
                    // OR 0
                    _start_i0 = _index.element

                    // OR 1
                    _start_i1 = _index.element

                    // OR 2
                    _start_i2 = _index.element

                    // OR 3
                    _start_i3 = _index.element

                    // OR 4
                    _start_i4 = _index.element

                    // OR 5
                    _start_i5 = _index.element

                    // OR 6
                    _start_i6 = _index.element

                    // OR 7
                    _start_i7 = _index.element

                    // OR 8
                    _start_i8 = _index.element

                    // OR 9
                    _start_i9 = _index.element

                    // OR 10
                    _start_i10 = _index.element

                    // OR 11
                    _start_i11 = _index.element

                    // OR 12
                    _start_i12 = _index.element

                    // OR 13
                    _start_i13 = _index.element

                    // OR 14
                    _start_i14 = _index.element

                    // OR 15
                    _start_i15 = _index.element

                    // OR 16
                    _start_i16 = _index.element

                    // OR 17
                    _start_i17 = _index.element

                    // OR 18
                    _start_i18 = _index.element

                    // OR 19
                    _start_i19 = _index.element

                    // OR 20
                    _start_i20 = _index.element

                    // OR 21
                    _start_i21 = _index.element

                    // OR 22
                    _start_i22 = _index.element

                    // OR 23
                    _start_i23 = _index.element

                    // OR 24
                    _start_i24 = _index.element

                    // OR 25
                    _start_i25 = _index.element

                    // OR 26
                    _start_i26 = _index.element

                    // OR 27
                    _start_i27 = _index.element

                    // OR 28
                    _start_i28 = _index.element

                    // OR 29
                    _start_i29 = _index.element

                    // OR 30
                    _start_i30 = _index.element

                    // OR 31
                    _start_i31 = _index.element

                    // OR 32
                    _start_i32 = _index.element

                    // OR 33
                    _start_i33 = _index.element

                    // OR 34
                    _start_i34 = _index.element

                    // OR 35
                    _start_i35 = _index.element

                    // OR 36
                    _start_i36 = _index.element

                    // OR 37
                    _start_i37 = _index.element

                    // OR 38
                    _start_i38 = _index.element

                    // OR 39
                    _start_i39 = _index.element

                    // OR 40
                    _start_i40 = _index.element

                    // OR 41
                    _start_i41 = _index.element

                    // OR 42
                    _start_i42 = _index.element

                    // OR 43
                    _start_i43 = _index.element

                    // OR 44
                    _start_i44 = _index.element

                    // OR 45
                    _start_i45 = _index.element

                    // OR 46
                    _start_i46 = _index.element

                    // COND 48
                    _start_i48 = _index.element

                    // ANY
                    _ParseAny(_memo, _index)

                    // BIND t
                    t = _memo.results.peek()

                    // COND 48
                    val lambda48: (_KotlinParser_Item) -> Boolean = { (t.i is Token.Identifier) }
                    if (_memo.results.peek() == null || !lambda48(_memo.results.peek()!!)) {
                        _memo.results.pop()
                        _memo.results.push(null)
                        _index.element = _start_i48
                    }

                    // ACT 47
                    val _r47 = _memo.results.peek()
                    if (_r47 != null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_r47.startIndex, _r47.nextIndex, _memo.input, _Thunk({ AST.Name(t.i.cast<Token.Identifier>().s) }, _r47), true))
                    }

                    // OR shortcut 46
                    if (_memo.results.peek() == null) {
                        _memo.results.pop()
                        _index.element = _start_i46
                    } else {
                        _label = 46
                        continue
                    }

                    // CALLORVAR ABSTRACT
                    var _r52: _KotlinParser_Item? = null
                    _r52 = _MemoCall(_memo, "ABSTRACT", _index.element, ::ABSTRACT, null)
                    if (_r52 != null) _index.element = _r52.nextIndex

                    // ACT 51
                    val _r51 = _memo.results.peek()
                    if (_r51 != null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_r51.startIndex, _r51.nextIndex, _memo.input, _Thunk({ AST.Name("abstract") }, _r51), true))
                    }

                    _label = 46
                }
                // OR 46
                46 -> {
                    // OR shortcut 45
                    if (_memo.results.peek() == null) {
                        _memo.results.pop()
                        _index.element = _start_i45
                    } else {
                        _label = 45
                        continue
                    }

                    // CALLORVAR ANNOTATION_
                    var _r54: _KotlinParser_Item? = null
                    _r54 = _MemoCall(_memo, "ANNOTATION_", _index.element, ::ANNOTATION_, null)
                    if (_r54 != null) _index.element = _r54.nextIndex

                    // ACT 53
                    val _r53 = _memo.results.peek()
                    if (_r53 != null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_r53.startIndex, _r53.nextIndex, _memo.input, _Thunk({ AST.Name("annotation") }, _r53), true))
                    }

                    _label = 45
                }
                // OR 45
                45 -> {
                    // OR shortcut 44
                    if (_memo.results.peek() == null) {
                        _memo.results.pop()
                        _index.element = _start_i44
                    } else {
                        _label = 44
                        continue
                    }

                    // CALLORVAR BY
                    var _r56: _KotlinParser_Item? = null
                    _r56 = _MemoCall(_memo, "BY", _index.element, ::BY, null)
                    if (_r56 != null) _index.element = _r56.nextIndex

                    // ACT 55
                    val _r55 = _memo.results.peek()
                    if (_r55 != null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_r55.startIndex, _r55.nextIndex, _memo.input, _Thunk({ AST.Name("by") }, _r55), true))
                    }

                    _label = 44
                }
                // OR 44
                44 -> {
                    // OR shortcut 43
                    if (_memo.results.peek() == null) {
                        _memo.results.pop()
                        _index.element = _start_i43
                    } else {
                        _label = 43
                        continue
                    }

                    // CALLORVAR CATCH
                    var _r58: _KotlinParser_Item? = null
                    _r58 = _MemoCall(_memo, "CATCH", _index.element, ::CATCH, null)
                    if (_r58 != null) _index.element = _r58.nextIndex

                    // ACT 57
                    val _r57 = _memo.results.peek()
                    if (_r57 != null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_r57.startIndex, _r57.nextIndex, _memo.input, _Thunk({ AST.Name("catch") }, _r57), true))
                    }

                    _label = 43
                }
                // OR 43
                43 -> {
                    // OR shortcut 42
                    if (_memo.results.peek() == null) {
                        _memo.results.pop()
                        _index.element = _start_i42
                    } else {
                        _label = 42
                        continue
                    }

                    // CALLORVAR COMPANION
                    var _r60: _KotlinParser_Item? = null
                    _r60 = _MemoCall(_memo, "COMPANION", _index.element, ::COMPANION, null)
                    if (_r60 != null) _index.element = _r60.nextIndex

                    // ACT 59
                    val _r59 = _memo.results.peek()
                    if (_r59 != null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_r59.startIndex, _r59.nextIndex, _memo.input, _Thunk({ AST.Name("companion") }, _r59), true))
                    }

                    _label = 42
                }
                // OR 42
                42 -> {
                    // OR shortcut 41
                    if (_memo.results.peek() == null) {
                        _memo.results.pop()
                        _index.element = _start_i41
                    } else {
                        _label = 41
                        continue
                    }

                    // CALLORVAR CONSTRUCTOR
                    var _r62: _KotlinParser_Item? = null
                    _r62 = _MemoCall(_memo, "CONSTRUCTOR", _index.element, ::CONSTRUCTOR, null)
                    if (_r62 != null) _index.element = _r62.nextIndex

                    // ACT 61
                    val _r61 = _memo.results.peek()
                    if (_r61 != null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_r61.startIndex, _r61.nextIndex, _memo.input, _Thunk({ AST.Name("constructor") }, _r61), true))
                    }

                    _label = 41
                }
                // OR 41
                41 -> {
                    // OR shortcut 40
                    if (_memo.results.peek() == null) {
                        _memo.results.pop()
                        _index.element = _start_i40
                    } else {
                        _label = 40
                        continue
                    }

                    // CALLORVAR CROSSINLINE
                    var _r64: _KotlinParser_Item? = null
                    _r64 = _MemoCall(_memo, "CROSSINLINE", _index.element, ::CROSSINLINE, null)
                    if (_r64 != null) _index.element = _r64.nextIndex

                    // ACT 63
                    val _r63 = _memo.results.peek()
                    if (_r63 != null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_r63.startIndex, _r63.nextIndex, _memo.input, _Thunk({ AST.Name("crossinline") }, _r63), true))
                    }

                    _label = 40
                }
                // OR 40
                40 -> {
                    // OR shortcut 39
                    if (_memo.results.peek() == null) {
                        _memo.results.pop()
                        _index.element = _start_i39
                    } else {
                        _label = 39
                        continue
                    }

                    // CALLORVAR DATA
                    var _r66: _KotlinParser_Item? = null
                    _r66 = _MemoCall(_memo, "DATA", _index.element, ::DATA, null)
                    if (_r66 != null) _index.element = _r66.nextIndex

                    // ACT 65
                    val _r65 = _memo.results.peek()
                    if (_r65 != null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_r65.startIndex, _r65.nextIndex, _memo.input, _Thunk({ AST.Name("data") }, _r65), true))
                    }

                    _label = 39
                }
                // OR 39
                39 -> {
                    // OR shortcut 38
                    if (_memo.results.peek() == null) {
                        _memo.results.pop()
                        _index.element = _start_i38
                    } else {
                        _label = 38
                        continue
                    }

                    // CALLORVAR DYNAMIC
                    var _r68: _KotlinParser_Item? = null
                    _r68 = _MemoCall(_memo, "DYNAMIC", _index.element, ::DYNAMIC, null)
                    if (_r68 != null) _index.element = _r68.nextIndex

                    // ACT 67
                    val _r67 = _memo.results.peek()
                    if (_r67 != null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_r67.startIndex, _r67.nextIndex, _memo.input, _Thunk({ AST.Name("dynamic") }, _r67), true))
                    }

                    _label = 38
                }
                // OR 38
                38 -> {
                    // OR shortcut 37
                    if (_memo.results.peek() == null) {
                        _memo.results.pop()
                        _index.element = _start_i37
                    } else {
                        _label = 37
                        continue
                    }

                    // CALLORVAR ENUM
                    var _r70: _KotlinParser_Item? = null
                    _r70 = _MemoCall(_memo, "ENUM", _index.element, ::ENUM, null)
                    if (_r70 != null) _index.element = _r70.nextIndex

                    // ACT 69
                    val _r69 = _memo.results.peek()
                    if (_r69 != null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_r69.startIndex, _r69.nextIndex, _memo.input, _Thunk({ AST.Name("enum") }, _r69), true))
                    }

                    _label = 37
                }
                // OR 37
                37 -> {
                    // OR shortcut 36
                    if (_memo.results.peek() == null) {
                        _memo.results.pop()
                        _index.element = _start_i36
                    } else {
                        _label = 36
                        continue
                    }

                    // CALLORVAR EXTERNAL
                    var _r72: _KotlinParser_Item? = null
                    _r72 = _MemoCall(_memo, "EXTERNAL", _index.element, ::EXTERNAL, null)
                    if (_r72 != null) _index.element = _r72.nextIndex

                    // ACT 71
                    val _r71 = _memo.results.peek()
                    if (_r71 != null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_r71.startIndex, _r71.nextIndex, _memo.input, _Thunk({ AST.Name("external") }, _r71), true))
                    }

                    _label = 36
                }
                // OR 36
                36 -> {
                    // OR shortcut 35
                    if (_memo.results.peek() == null) {
                        _memo.results.pop()
                        _index.element = _start_i35
                    } else {
                        _label = 35
                        continue
                    }

                    // CALLORVAR FINAL
                    var _r74: _KotlinParser_Item? = null
                    _r74 = _MemoCall(_memo, "FINAL", _index.element, ::FINAL, null)
                    if (_r74 != null) _index.element = _r74.nextIndex

                    // ACT 73
                    val _r73 = _memo.results.peek()
                    if (_r73 != null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_r73.startIndex, _r73.nextIndex, _memo.input, _Thunk({ AST.Name("final") }, _r73), true))
                    }

                    _label = 35
                }
                // OR 35
                35 -> {
                    // OR shortcut 34
                    if (_memo.results.peek() == null) {
                        _memo.results.pop()
                        _index.element = _start_i34
                    } else {
                        _label = 34
                        continue
                    }

                    // CALLORVAR FINALLY
                    var _r76: _KotlinParser_Item? = null
                    _r76 = _MemoCall(_memo, "FINALLY", _index.element, ::FINALLY, null)
                    if (_r76 != null) _index.element = _r76.nextIndex

                    // ACT 75
                    val _r75 = _memo.results.peek()
                    if (_r75 != null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_r75.startIndex, _r75.nextIndex, _memo.input, _Thunk({ AST.Name("finally") }, _r75), true))
                    }

                    _label = 34
                }
                // OR 34
                34 -> {
                    // OR shortcut 33
                    if (_memo.results.peek() == null) {
                        _memo.results.pop()
                        _index.element = _start_i33
                    } else {
                        _label = 33
                        continue
                    }

                    // CALLORVAR GET
                    var _r78: _KotlinParser_Item? = null
                    _r78 = _MemoCall(_memo, "GET", _index.element, ::GET, null)
                    if (_r78 != null) _index.element = _r78.nextIndex

                    // ACT 77
                    val _r77 = _memo.results.peek()
                    if (_r77 != null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_r77.startIndex, _r77.nextIndex, _memo.input, _Thunk({ AST.Name("get") }, _r77), true))
                    }

                    _label = 33
                }
                // OR 33
                33 -> {
                    // OR shortcut 32
                    if (_memo.results.peek() == null) {
                        _memo.results.pop()
                        _index.element = _start_i32
                    } else {
                        _label = 32
                        continue
                    }

                    // CALLORVAR IMPORT
                    var _r80: _KotlinParser_Item? = null
                    _r80 = _MemoCall(_memo, "IMPORT", _index.element, ::IMPORT, null)
                    if (_r80 != null) _index.element = _r80.nextIndex

                    // ACT 79
                    val _r79 = _memo.results.peek()
                    if (_r79 != null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_r79.startIndex, _r79.nextIndex, _memo.input, _Thunk({ AST.Name("import") }, _r79), true))
                    }

                    _label = 32
                }
                // OR 32
                32 -> {
                    // OR shortcut 31
                    if (_memo.results.peek() == null) {
                        _memo.results.pop()
                        _index.element = _start_i31
                    } else {
                        _label = 31
                        continue
                    }

                    // CALLORVAR INFIX
                    var _r82: _KotlinParser_Item? = null
                    _r82 = _MemoCall(_memo, "INFIX", _index.element, ::INFIX, null)
                    if (_r82 != null) _index.element = _r82.nextIndex

                    // ACT 81
                    val _r81 = _memo.results.peek()
                    if (_r81 != null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_r81.startIndex, _r81.nextIndex, _memo.input, _Thunk({ AST.Name("infix") }, _r81), true))
                    }

                    _label = 31
                }
                // OR 31
                31 -> {
                    // OR shortcut 30
                    if (_memo.results.peek() == null) {
                        _memo.results.pop()
                        _index.element = _start_i30
                    } else {
                        _label = 30
                        continue
                    }

                    // CALLORVAR INIT
                    var _r84: _KotlinParser_Item? = null
                    _r84 = _MemoCall(_memo, "INIT", _index.element, ::INIT, null)
                    if (_r84 != null) _index.element = _r84.nextIndex

                    // ACT 83
                    val _r83 = _memo.results.peek()
                    if (_r83 != null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_r83.startIndex, _r83.nextIndex, _memo.input, _Thunk({ AST.Name("init") }, _r83), true))
                    }

                    _label = 30
                }
                // OR 30
                30 -> {
                    // OR shortcut 29
                    if (_memo.results.peek() == null) {
                        _memo.results.pop()
                        _index.element = _start_i29
                    } else {
                        _label = 29
                        continue
                    }

                    // CALLORVAR INLINE
                    var _r86: _KotlinParser_Item? = null
                    _r86 = _MemoCall(_memo, "INLINE", _index.element, ::INLINE, null)
                    if (_r86 != null) _index.element = _r86.nextIndex

                    // ACT 85
                    val _r85 = _memo.results.peek()
                    if (_r85 != null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_r85.startIndex, _r85.nextIndex, _memo.input, _Thunk({ AST.Name("inline") }, _r85), true))
                    }

                    _label = 29
                }
                // OR 29
                29 -> {
                    // OR shortcut 28
                    if (_memo.results.peek() == null) {
                        _memo.results.pop()
                        _index.element = _start_i28
                    } else {
                        _label = 28
                        continue
                    }

                    // CALLORVAR INNER
                    var _r88: _KotlinParser_Item? = null
                    _r88 = _MemoCall(_memo, "INNER", _index.element, ::INNER, null)
                    if (_r88 != null) _index.element = _r88.nextIndex

                    // ACT 87
                    val _r87 = _memo.results.peek()
                    if (_r87 != null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_r87.startIndex, _r87.nextIndex, _memo.input, _Thunk({ AST.Name("inner") }, _r87), true))
                    }

                    _label = 28
                }
                // OR 28
                28 -> {
                    // OR shortcut 27
                    if (_memo.results.peek() == null) {
                        _memo.results.pop()
                        _index.element = _start_i27
                    } else {
                        _label = 27
                        continue
                    }

                    // CALLORVAR INTERNAL
                    var _r90: _KotlinParser_Item? = null
                    _r90 = _MemoCall(_memo, "INTERNAL", _index.element, ::INTERNAL, null)
                    if (_r90 != null) _index.element = _r90.nextIndex

                    // ACT 89
                    val _r89 = _memo.results.peek()
                    if (_r89 != null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_r89.startIndex, _r89.nextIndex, _memo.input, _Thunk({ AST.Name("internal") }, _r89), true))
                    }

                    _label = 27
                }
                // OR 27
                27 -> {
                    // OR shortcut 26
                    if (_memo.results.peek() == null) {
                        _memo.results.pop()
                        _index.element = _start_i26
                    } else {
                        _label = 26
                        continue
                    }

                    // CALLORVAR LATEINIT
                    var _r92: _KotlinParser_Item? = null
                    _r92 = _MemoCall(_memo, "LATEINIT", _index.element, ::LATEINIT, null)
                    if (_r92 != null) _index.element = _r92.nextIndex

                    // ACT 91
                    val _r91 = _memo.results.peek()
                    if (_r91 != null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_r91.startIndex, _r91.nextIndex, _memo.input, _Thunk({ AST.Name("lateinit") }, _r91), true))
                    }

                    _label = 26
                }
                // OR 26
                26 -> {
                    // OR shortcut 25
                    if (_memo.results.peek() == null) {
                        _memo.results.pop()
                        _index.element = _start_i25
                    } else {
                        _label = 25
                        continue
                    }

                    // CALLORVAR NOINLINE
                    var _r94: _KotlinParser_Item? = null
                    _r94 = _MemoCall(_memo, "NOINLINE", _index.element, ::NOINLINE, null)
                    if (_r94 != null) _index.element = _r94.nextIndex

                    // ACT 93
                    val _r93 = _memo.results.peek()
                    if (_r93 != null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_r93.startIndex, _r93.nextIndex, _memo.input, _Thunk({ AST.Name("noinline") }, _r93), true))
                    }

                    _label = 25
                }
                // OR 25
                25 -> {
                    // OR shortcut 24
                    if (_memo.results.peek() == null) {
                        _memo.results.pop()
                        _index.element = _start_i24
                    } else {
                        _label = 24
                        continue
                    }

                    // CALLORVAR OPEN
                    var _r96: _KotlinParser_Item? = null
                    _r96 = _MemoCall(_memo, "OPEN", _index.element, ::OPEN, null)
                    if (_r96 != null) _index.element = _r96.nextIndex

                    // ACT 95
                    val _r95 = _memo.results.peek()
                    if (_r95 != null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_r95.startIndex, _r95.nextIndex, _memo.input, _Thunk({ AST.Name("open") }, _r95), true))
                    }

                    _label = 24
                }
                // OR 24
                24 -> {
                    // OR shortcut 23
                    if (_memo.results.peek() == null) {
                        _memo.results.pop()
                        _index.element = _start_i23
                    } else {
                        _label = 23
                        continue
                    }

                    // CALLORVAR OPERATOR
                    var _r98: _KotlinParser_Item? = null
                    _r98 = _MemoCall(_memo, "OPERATOR", _index.element, ::OPERATOR, null)
                    if (_r98 != null) _index.element = _r98.nextIndex

                    // ACT 97
                    val _r97 = _memo.results.peek()
                    if (_r97 != null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_r97.startIndex, _r97.nextIndex, _memo.input, _Thunk({ AST.Name("operator") }, _r97), true))
                    }

                    _label = 23
                }
                // OR 23
                23 -> {
                    // OR shortcut 22
                    if (_memo.results.peek() == null) {
                        _memo.results.pop()
                        _index.element = _start_i22
                    } else {
                        _label = 22
                        continue
                    }

                    // CALLORVAR OUT
                    var _r100: _KotlinParser_Item? = null
                    _r100 = _MemoCall(_memo, "OUT", _index.element, ::OUT, null)
                    if (_r100 != null) _index.element = _r100.nextIndex

                    // ACT 99
                    val _r99 = _memo.results.peek()
                    if (_r99 != null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_r99.startIndex, _r99.nextIndex, _memo.input, _Thunk({ AST.Name("out") }, _r99), true))
                    }

                    _label = 22
                }
                // OR 22
                22 -> {
                    // OR shortcut 21
                    if (_memo.results.peek() == null) {
                        _memo.results.pop()
                        _index.element = _start_i21
                    } else {
                        _label = 21
                        continue
                    }

                    // CALLORVAR OVERRIDE
                    var _r102: _KotlinParser_Item? = null
                    _r102 = _MemoCall(_memo, "OVERRIDE", _index.element, ::OVERRIDE, null)
                    if (_r102 != null) _index.element = _r102.nextIndex

                    // ACT 101
                    val _r101 = _memo.results.peek()
                    if (_r101 != null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_r101.startIndex, _r101.nextIndex, _memo.input, _Thunk({ AST.Name("override") }, _r101), true))
                    }

                    _label = 21
                }
                // OR 21
                21 -> {
                    // OR shortcut 20
                    if (_memo.results.peek() == null) {
                        _memo.results.pop()
                        _index.element = _start_i20
                    } else {
                        _label = 20
                        continue
                    }

                    // CALLORVAR PRIVATE
                    var _r104: _KotlinParser_Item? = null
                    _r104 = _MemoCall(_memo, "PRIVATE", _index.element, ::PRIVATE, null)
                    if (_r104 != null) _index.element = _r104.nextIndex

                    // ACT 103
                    val _r103 = _memo.results.peek()
                    if (_r103 != null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_r103.startIndex, _r103.nextIndex, _memo.input, _Thunk({ AST.Name("private") }, _r103), true))
                    }

                    _label = 20
                }
                // OR 20
                20 -> {
                    // OR shortcut 19
                    if (_memo.results.peek() == null) {
                        _memo.results.pop()
                        _index.element = _start_i19
                    } else {
                        _label = 19
                        continue
                    }

                    // CALLORVAR PROTECTED
                    var _r106: _KotlinParser_Item? = null
                    _r106 = _MemoCall(_memo, "PROTECTED", _index.element, ::PROTECTED, null)
                    if (_r106 != null) _index.element = _r106.nextIndex

                    // ACT 105
                    val _r105 = _memo.results.peek()
                    if (_r105 != null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_r105.startIndex, _r105.nextIndex, _memo.input, _Thunk({ AST.Name("protected") }, _r105), true))
                    }

                    _label = 19
                }
                // OR 19
                19 -> {
                    // OR shortcut 18
                    if (_memo.results.peek() == null) {
                        _memo.results.pop()
                        _index.element = _start_i18
                    } else {
                        _label = 18
                        continue
                    }

                    // CALLORVAR PUBLIC
                    var _r108: _KotlinParser_Item? = null
                    _r108 = _MemoCall(_memo, "PUBLIC", _index.element, ::PUBLIC, null)
                    if (_r108 != null) _index.element = _r108.nextIndex

                    // ACT 107
                    val _r107 = _memo.results.peek()
                    if (_r107 != null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_r107.startIndex, _r107.nextIndex, _memo.input, _Thunk({ AST.Name("public") }, _r107), true))
                    }

                    _label = 18
                }
                // OR 18
                18 -> {
                    // OR shortcut 17
                    if (_memo.results.peek() == null) {
                        _memo.results.pop()
                        _index.element = _start_i17
                    } else {
                        _label = 17
                        continue
                    }

                    // CALLORVAR REIFIED
                    var _r110: _KotlinParser_Item? = null
                    _r110 = _MemoCall(_memo, "REIFIED", _index.element, ::REIFIED, null)
                    if (_r110 != null) _index.element = _r110.nextIndex

                    // ACT 109
                    val _r109 = _memo.results.peek()
                    if (_r109 != null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_r109.startIndex, _r109.nextIndex, _memo.input, _Thunk({ AST.Name("reified") }, _r109), true))
                    }

                    _label = 17
                }
                // OR 17
                17 -> {
                    // OR shortcut 16
                    if (_memo.results.peek() == null) {
                        _memo.results.pop()
                        _index.element = _start_i16
                    } else {
                        _label = 16
                        continue
                    }

                    // CALLORVAR SEALED
                    var _r112: _KotlinParser_Item? = null
                    _r112 = _MemoCall(_memo, "SEALED", _index.element, ::SEALED, null)
                    if (_r112 != null) _index.element = _r112.nextIndex

                    // ACT 111
                    val _r111 = _memo.results.peek()
                    if (_r111 != null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_r111.startIndex, _r111.nextIndex, _memo.input, _Thunk({ AST.Name("sealed") }, _r111), true))
                    }

                    _label = 16
                }
                // OR 16
                16 -> {
                    // OR shortcut 15
                    if (_memo.results.peek() == null) {
                        _memo.results.pop()
                        _index.element = _start_i15
                    } else {
                        _label = 15
                        continue
                    }

                    // CALLORVAR TAILREC
                    var _r114: _KotlinParser_Item? = null
                    _r114 = _MemoCall(_memo, "TAILREC", _index.element, ::TAILREC, null)
                    if (_r114 != null) _index.element = _r114.nextIndex

                    // ACT 113
                    val _r113 = _memo.results.peek()
                    if (_r113 != null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_r113.startIndex, _r113.nextIndex, _memo.input, _Thunk({ AST.Name("tailrec") }, _r113), true))
                    }

                    _label = 15
                }
                // OR 15
                15 -> {
                    // OR shortcut 14
                    if (_memo.results.peek() == null) {
                        _memo.results.pop()
                        _index.element = _start_i14
                    } else {
                        _label = 14
                        continue
                    }

                    // CALLORVAR SET
                    var _r116: _KotlinParser_Item? = null
                    _r116 = _MemoCall(_memo, "SET", _index.element, ::SET, null)
                    if (_r116 != null) _index.element = _r116.nextIndex

                    // ACT 115
                    val _r115 = _memo.results.peek()
                    if (_r115 != null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_r115.startIndex, _r115.nextIndex, _memo.input, _Thunk({ AST.Name("set") }, _r115), true))
                    }

                    _label = 14
                }
                // OR 14
                14 -> {
                    // OR shortcut 13
                    if (_memo.results.peek() == null) {
                        _memo.results.pop()
                        _index.element = _start_i13
                    } else {
                        _label = 13
                        continue
                    }

                    // CALLORVAR VARARG
                    var _r118: _KotlinParser_Item? = null
                    _r118 = _MemoCall(_memo, "VARARG", _index.element, ::VARARG, null)
                    if (_r118 != null) _index.element = _r118.nextIndex

                    // ACT 117
                    val _r117 = _memo.results.peek()
                    if (_r117 != null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_r117.startIndex, _r117.nextIndex, _memo.input, _Thunk({ AST.Name("vararg") }, _r117), true))
                    }

                    _label = 13
                }
                // OR 13
                13 -> {
                    // OR shortcut 12
                    if (_memo.results.peek() == null) {
                        _memo.results.pop()
                        _index.element = _start_i12
                    } else {
                        _label = 12
                        continue
                    }

                    // CALLORVAR WHERE
                    var _r120: _KotlinParser_Item? = null
                    _r120 = _MemoCall(_memo, "WHERE", _index.element, ::WHERE, null)
                    if (_r120 != null) _index.element = _r120.nextIndex

                    // ACT 119
                    val _r119 = _memo.results.peek()
                    if (_r119 != null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_r119.startIndex, _r119.nextIndex, _memo.input, _Thunk({ AST.Name("where") }, _r119), true))
                    }

                    _label = 12
                }
                // OR 12
                12 -> {
                    // OR shortcut 11
                    if (_memo.results.peek() == null) {
                        _memo.results.pop()
                        _index.element = _start_i11
                    } else {
                        _label = 11
                        continue
                    }

                    // CALLORVAR FIELD
                    var _r122: _KotlinParser_Item? = null
                    _r122 = _MemoCall(_memo, "FIELD", _index.element, ::FIELD, null)
                    if (_r122 != null) _index.element = _r122.nextIndex

                    // ACT 121
                    val _r121 = _memo.results.peek()
                    if (_r121 != null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_r121.startIndex, _r121.nextIndex, _memo.input, _Thunk({ AST.Name("field") }, _r121), true))
                    }

                    _label = 11
                }
                // OR 11
                11 -> {
                    // OR shortcut 10
                    if (_memo.results.peek() == null) {
                        _memo.results.pop()
                        _index.element = _start_i10
                    } else {
                        _label = 10
                        continue
                    }

                    // CALLORVAR PROPERTY
                    var _r124: _KotlinParser_Item? = null
                    _r124 = _MemoCall(_memo, "PROPERTY", _index.element, ::PROPERTY, null)
                    if (_r124 != null) _index.element = _r124.nextIndex

                    // ACT 123
                    val _r123 = _memo.results.peek()
                    if (_r123 != null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_r123.startIndex, _r123.nextIndex, _memo.input, _Thunk({ AST.Name("property") }, _r123), true))
                    }

                    _label = 10
                }
                // OR 10
                10 -> {
                    // OR shortcut 9
                    if (_memo.results.peek() == null) {
                        _memo.results.pop()
                        _index.element = _start_i9
                    } else {
                        _label = 9
                        continue
                    }

                    // CALLORVAR RECEIVER
                    var _r126: _KotlinParser_Item? = null
                    _r126 = _MemoCall(_memo, "RECEIVER", _index.element, ::RECEIVER, null)
                    if (_r126 != null) _index.element = _r126.nextIndex

                    // ACT 125
                    val _r125 = _memo.results.peek()
                    if (_r125 != null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_r125.startIndex, _r125.nextIndex, _memo.input, _Thunk({ AST.Name("receiver") }, _r125), true))
                    }

                    _label = 9
                }
                // OR 9
                9 -> {
                    // OR shortcut 8
                    if (_memo.results.peek() == null) {
                        _memo.results.pop()
                        _index.element = _start_i8
                    } else {
                        _label = 8
                        continue
                    }

                    // CALLORVAR PARAM
                    var _r128: _KotlinParser_Item? = null
                    _r128 = _MemoCall(_memo, "PARAM", _index.element, ::PARAM, null)
                    if (_r128 != null) _index.element = _r128.nextIndex

                    // ACT 127
                    val _r127 = _memo.results.peek()
                    if (_r127 != null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_r127.startIndex, _r127.nextIndex, _memo.input, _Thunk({ AST.Name("param") }, _r127), true))
                    }

                    _label = 8
                }
                // OR 8
                8 -> {
                    // OR shortcut 7
                    if (_memo.results.peek() == null) {
                        _memo.results.pop()
                        _index.element = _start_i7
                    } else {
                        _label = 7
                        continue
                    }

                    // CALLORVAR SETPARAM
                    var _r130: _KotlinParser_Item? = null
                    _r130 = _MemoCall(_memo, "SETPARAM", _index.element, ::SETPARAM, null)
                    if (_r130 != null) _index.element = _r130.nextIndex

                    // ACT 129
                    val _r129 = _memo.results.peek()
                    if (_r129 != null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_r129.startIndex, _r129.nextIndex, _memo.input, _Thunk({ AST.Name("setparam") }, _r129), true))
                    }

                    _label = 7
                }
                // OR 7
                7 -> {
                    // OR shortcut 6
                    if (_memo.results.peek() == null) {
                        _memo.results.pop()
                        _index.element = _start_i6
                    } else {
                        _label = 6
                        continue
                    }

                    // CALLORVAR DELEGATE
                    var _r132: _KotlinParser_Item? = null
                    _r132 = _MemoCall(_memo, "DELEGATE", _index.element, ::DELEGATE, null)
                    if (_r132 != null) _index.element = _r132.nextIndex

                    // ACT 131
                    val _r131 = _memo.results.peek()
                    if (_r131 != null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_r131.startIndex, _r131.nextIndex, _memo.input, _Thunk({ AST.Name("delegate") }, _r131), true))
                    }

                    _label = 6
                }
                // OR 6
                6 -> {
                    // OR shortcut 5
                    if (_memo.results.peek() == null) {
                        _memo.results.pop()
                        _index.element = _start_i5
                    } else {
                        _label = 5
                        continue
                    }

                    // CALLORVAR FILE
                    var _r134: _KotlinParser_Item? = null
                    _r134 = _MemoCall(_memo, "FILE", _index.element, ::FILE, null)
                    if (_r134 != null) _index.element = _r134.nextIndex

                    // ACT 133
                    val _r133 = _memo.results.peek()
                    if (_r133 != null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_r133.startIndex, _r133.nextIndex, _memo.input, _Thunk({ AST.Name("file") }, _r133), true))
                    }

                    _label = 5
                }
                // OR 5
                5 -> {
                    // OR shortcut 4
                    if (_memo.results.peek() == null) {
                        _memo.results.pop()
                        _index.element = _start_i4
                    } else {
                        _label = 4
                        continue
                    }

                    // CALLORVAR EXPECT
                    var _r136: _KotlinParser_Item? = null
                    _r136 = _MemoCall(_memo, "EXPECT", _index.element, ::EXPECT, null)
                    if (_r136 != null) _index.element = _r136.nextIndex

                    // ACT 135
                    val _r135 = _memo.results.peek()
                    if (_r135 != null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_r135.startIndex, _r135.nextIndex, _memo.input, _Thunk({ AST.Name("expect") }, _r135), true))
                    }

                    _label = 4
                }
                // OR 4
                4 -> {
                    // OR shortcut 3
                    if (_memo.results.peek() == null) {
                        _memo.results.pop()
                        _index.element = _start_i3
                    } else {
                        _label = 3
                        continue
                    }

                    // CALLORVAR ACTUAL
                    var _r138: _KotlinParser_Item? = null
                    _r138 = _MemoCall(_memo, "ACTUAL", _index.element, ::ACTUAL, null)
                    if (_r138 != null) _index.element = _r138.nextIndex

                    // ACT 137
                    val _r137 = _memo.results.peek()
                    if (_r137 != null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_r137.startIndex, _r137.nextIndex, _memo.input, _Thunk({ AST.Name("actual") }, _r137), true))
                    }

                    _label = 3
                }
                // OR 3
                3 -> {
                    // OR shortcut 2
                    if (_memo.results.peek() == null) {
                        _memo.results.pop()
                        _index.element = _start_i2
                    } else {
                        _label = 2
                        continue
                    }

                    // CALLORVAR CONST
                    var _r140: _KotlinParser_Item? = null
                    _r140 = _MemoCall(_memo, "CONST", _index.element, ::CONST, null)
                    if (_r140 != null) _index.element = _r140.nextIndex

                    // ACT 139
                    val _r139 = _memo.results.peek()
                    if (_r139 != null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_r139.startIndex, _r139.nextIndex, _memo.input, _Thunk({ AST.Name("const") }, _r139), true))
                    }

                    _label = 2
                }
                // OR 2
                2 -> {
                    // OR shortcut 1
                    if (_memo.results.peek() == null) {
                        _memo.results.pop()
                        _index.element = _start_i1
                    } else {
                        _label = 1
                        continue
                    }

                    // CALLORVAR SUSPEND
                    var _r142: _KotlinParser_Item? = null
                    _r142 = _MemoCall(_memo, "SUSPEND", _index.element, ::SUSPEND, null)
                    if (_r142 != null) _index.element = _r142.nextIndex

                    // ACT 141
                    val _r141 = _memo.results.peek()
                    if (_r141 != null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_r141.startIndex, _r141.nextIndex, _memo.input, _Thunk({ AST.Name("suspend") }, _r141), true))
                    }

                    _label = 1
                }
                // OR 1
                1 -> {
                    // OR shortcut 0
                    if (_memo.results.peek() == null) {
                        _memo.results.pop()
                        _index.element = _start_i0
                    } else {
                        _label = 0
                        continue
                    }

                    // CALLORVAR VALUE
                    var _r144: _KotlinParser_Item? = null
                    _r144 = _MemoCall(_memo, "VALUE", _index.element, ::VALUE, null)
                    if (_r144 != null) _index.element = _r144.nextIndex

                    // ACT 143
                    val _r143 = _memo.results.peek()
                    if (_r143 != null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_r143.startIndex, _r143.nextIndex, _memo.input, _Thunk({ AST.Name("value") }, _r143), true))
                    }

                    _label = 0
                }
                // OR 0
                0 -> {
                    break
                }
            }
        }
    }


    open fun identifier(_memo: _KotlinParser_Memo, __index: Int, _args: _KotlinParser_Args?) {
        val _index = Ref.IntRef()
        _index.element = __index

        val _arg_index = Ref.IntRef()
        val _arg_input_index = Ref.IntRef()

        // AND 1
        var _start_i1 = _index.element

        // STAR 3
        var _start_i3 = _index.element
        val _inp3 = arrayListOf<Token?>()
        val _res3 = arrayListOf<AST.AstNode?>()

        // AND 4
        var _start_i4 = _index.element

        // AND 5
        var _start_i5 = _index.element

        // STAR 6
        var _start_i6 = _index.element
        val _inp6 = arrayListOf<Token?>()
        val _res6 = arrayListOf<AST.AstNode?>()

        var _label = -1
        while(true) {
            when(_label) {
                -1 -> {
                    // AND 1
                    _start_i1 = _index.element

                    // CALLORVAR simpleIdentifier
                    var _r2: _KotlinParser_Item? = null
                    _r2 = _MemoCall(_memo, "simpleIdentifier", _index.element, ::simpleIdentifier, null)
                    if (_r2 != null) _index.element = _r2.nextIndex

                    // AND shortcut 1
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 1
                        continue
                    }

                    // STAR 3
                    _start_i3 = _index.element
                    _label = 3
                }
                // STAR 3
                3 -> {
                    // AND 4
                    _start_i4 = _index.element

                    // AND 5
                    _start_i5 = _index.element

                    // STAR 6
                    _start_i6 = _index.element
                    _label = 6
                }
                // STAR 6
                6 -> {
                    // CALLORVAR NL
                    var _r7: _KotlinParser_Item? = null
                    _r7 = _MemoCall(_memo, "NL", _index.element, ::NL, null)
                    if (_r7 != null) _index.element = _r7.nextIndex

                    // STAR 6
                    val _r6 = _memo.results.pop()
                    if (_r6 != null) {
                        _res6 += _r6.results
                        _label = 6
                        continue
                    } else {
                        _memo.results.push(_KotlinParser_Item(_start_i6, _index.element, _memo.input, _res6.filterNotNull(), true))
                    }

                    // AND shortcut 5
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 5
                        continue
                    }

                    // CALLORVAR DOT
                    var _r8: _KotlinParser_Item? = null
                    _r8 = _MemoCall(_memo, "DOT", _index.element, ::DOT, null)
                    if (_r8 != null) _index.element = _r8.nextIndex

                    _label = 5
                }
                // AND 5
                5 -> {
                    val _r5_2 = _memo.results.pop()
                    val _r5_1 = _memo.results.pop()

                    if (_r5_1 != null && _r5_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i5, _index.element, _memo.input, (_r5_1.results + _r5_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i5
                    }

                    // AND shortcut 4
                    if (_memo.results.peek() == null) {
                        _memo.results.push(null)
                        _label = 4
                        continue
                    }

                    // CALLORVAR simpleIdentifier
                    var _r9: _KotlinParser_Item? = null
                    _r9 = _MemoCall(_memo, "simpleIdentifier", _index.element, ::simpleIdentifier, null)
                    if (_r9 != null) _index.element = _r9.nextIndex

                    _label = 4
                }
                // AND 4
                4 -> {
                    val _r4_2 = _memo.results.pop()
                    val _r4_1 = _memo.results.pop()

                    if (_r4_1 != null && _r4_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i4, _index.element, _memo.input, (_r4_1.results + _r4_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i4
                    }

                    // STAR 3
                    val _r3 = _memo.results.pop()
                    if (_r3 != null) {
                        _res3 += _r3.results
                        _label = 3
                        continue
                    } else {
                        _memo.results.push(_KotlinParser_Item(_start_i3, _index.element, _memo.input, _res3.filterNotNull(), true))
                    }

                    _label = 1
                }
                // AND 1
                1 -> {
                    val _r1_2 = _memo.results.pop()
                    val _r1_1 = _memo.results.pop()

                    if (_r1_1 != null && _r1_2 != null) {
                        _memo.results.push(_KotlinParser_Item(_start_i1, _index.element, _memo.input, (_r1_1.results + _r1_2.results).filterNotNull(), true))
                    } else {
                        _memo.results.push(null)
                        _index.element = _start_i1
                    }

                    // ACT 0
                    val _r0 = _memo.results.peek()
                    if (_r0 != null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_r0.startIndex, _r0.nextIndex, _memo.input, _Thunk({ AST.Name(it.l.joinToString(".")) }, _r0), true))
                    }

                    break
                }
            }
        }
    }


    open fun stringLiteral(_memo: _KotlinParser_Memo, __index: Int, _args: _KotlinParser_Args?) {
        val _index = Ref.IntRef()
        _index.element = __index

        val _arg_index = Ref.IntRef()
        val _arg_input_index = Ref.IntRef()

        var t: _KotlinParser_Item? = null

        // COND 1
        var _start_i1 = _index.element

        var _label = -1
        while(true) {
            when(_label) {
                -1 -> {
                    // COND 1
                    _start_i1 = _index.element

                    // ANY
                    _ParseAny(_memo, _index)

                    // BIND t
                    t = _memo.results.peek()

                    // COND 1
                    val lambda1: (_KotlinParser_Item) -> Boolean = { (t.i is Token.StringLiteral) }
                    if (_memo.results.peek() == null || !lambda1(_memo.results.peek()!!)) {
                        _memo.results.pop()
                        _memo.results.push(null)
                        _index.element = _start_i1
                    }

                    // ACT 0
                    val _r0 = _memo.results.peek()
                    if (_r0 != null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_r0.startIndex, _r0.nextIndex, _memo.input, _Thunk({ AST.StringLiteral(t.i.cast<Token.StringLiteral>().s) }, _r0), true))
                    }

                    break
                }
            }
        }
    }


    open fun BooleanLiteral(_memo: _KotlinParser_Memo, __index: Int, _args: _KotlinParser_Args?) {
        val _index = Ref.IntRef()
        _index.element = __index

        val _arg_index = Ref.IntRef()
        val _arg_input_index = Ref.IntRef()

        // OR 0
        var _start_i0 = _index.element

        var _label = -1
        while(true) {
            when(_label) {
                -1 -> {
                    // OR 0
                    _start_i0 = _index.element

                    // CALLORVAR TRUE
                    var _r2: _KotlinParser_Item? = null
                    _r2 = _MemoCall(_memo, "TRUE", _index.element, ::TRUE, null)
                    if (_r2 != null) _index.element = _r2.nextIndex

                    // ACT 1
                    val _r1 = _memo.results.peek()
                    if (_r1 != null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_r1.startIndex, _r1.nextIndex, _memo.input, _Thunk({ AST.TRUE }, _r1), true))
                    }

                    // OR shortcut 0
                    if (_memo.results.peek() == null) {
                        _memo.results.pop()
                        _index.element = _start_i0
                    } else {
                        _label = 0
                        continue
                    }

                    // CALLORVAR FALSE
                    var _r4: _KotlinParser_Item? = null
                    _r4 = _MemoCall(_memo, "FALSE", _index.element, ::FALSE, null)
                    if (_r4 != null) _index.element = _r4.nextIndex

                    // ACT 3
                    val _r3 = _memo.results.peek()
                    if (_r3 != null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_r3.startIndex, _r3.nextIndex, _memo.input, _Thunk({ AST.FALSE }, _r3), true))
                    }

                    _label = 0
                }
                // OR 0
                0 -> {
                    break
                }
            }
        }
    }


    open fun NullLiteral(_memo: _KotlinParser_Memo, __index: Int, _args: _KotlinParser_Args?) {
        val _index = Ref.IntRef()
        _index.element = __index

        val _arg_index = Ref.IntRef()
        val _arg_input_index = Ref.IntRef()

        var _label = -1
        while(true) {
            when(_label) {
                -1 -> {
                    // CALLORVAR NULL
                    var _r1: _KotlinParser_Item? = null
                    _r1 = _MemoCall(_memo, "NULL", _index.element, ::NULL, null)
                    if (_r1 != null) _index.element = _r1.nextIndex

                    // ACT 0
                    val _r0 = _memo.results.peek()
                    if (_r0 != null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_r0.startIndex, _r0.nextIndex, _memo.input, _Thunk({ AST.NULL }, _r0), true))
                    }

                    break
                }
            }
        }
    }


    open fun IntegerLiteral(_memo: _KotlinParser_Memo, __index: Int, _args: _KotlinParser_Args?) {
        val _index = Ref.IntRef()
        _index.element = __index

        val _arg_index = Ref.IntRef()
        val _arg_input_index = Ref.IntRef()

        var t: _KotlinParser_Item? = null

        // COND 1
        var _start_i1 = _index.element

        var _label = -1
        while(true) {
            when(_label) {
                -1 -> {
                    // COND 1
                    _start_i1 = _index.element

                    // ANY
                    _ParseAny(_memo, _index)

                    // BIND t
                    t = _memo.results.peek()

                    // COND 1
                    val lambda1: (_KotlinParser_Item) -> Boolean = { (t.i is Token.IntegerLiteral) }
                    if (_memo.results.peek() == null || !lambda1(_memo.results.peek()!!)) {
                        _memo.results.pop()
                        _memo.results.push(null)
                        _index.element = _start_i1
                    }

                    // ACT 0
                    val _r0 = _memo.results.peek()
                    if (_r0 != null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_r0.startIndex, _r0.nextIndex, _memo.input, _Thunk({ AST.IntegerLiteral(t.i.cast<Token.IntegerLiteral>().s) }, _r0), true))
                    }

                    break
                }
            }
        }
    }


    open fun CharacterLiteral(_memo: _KotlinParser_Memo, __index: Int, _args: _KotlinParser_Args?) {
        val _index = Ref.IntRef()
        _index.element = __index

        val _arg_index = Ref.IntRef()
        val _arg_input_index = Ref.IntRef()

        var t: _KotlinParser_Item? = null

        // COND 1
        var _start_i1 = _index.element

        var _label = -1
        while(true) {
            when(_label) {
                -1 -> {
                    // COND 1
                    _start_i1 = _index.element

                    // ANY
                    _ParseAny(_memo, _index)

                    // BIND t
                    t = _memo.results.peek()

                    // COND 1
                    val lambda1: (_KotlinParser_Item) -> Boolean = { (t.i is Token.CharacterLiteral) }
                    if (_memo.results.peek() == null || !lambda1(_memo.results.peek()!!)) {
                        _memo.results.pop()
                        _memo.results.push(null)
                        _index.element = _start_i1
                    }

                    // ACT 0
                    val _r0 = _memo.results.peek()
                    if (_r0 != null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_r0.startIndex, _r0.nextIndex, _memo.input, _Thunk({ AST.CharacterLiteral(t.i.cast<Token.CharacterLiteral>().s) }, _r0), true))
                    }

                    break
                }
            }
        }
    }


    open fun RealLiteral(_memo: _KotlinParser_Memo, __index: Int, _args: _KotlinParser_Args?) {
        val _index = Ref.IntRef()
        _index.element = __index

        val _arg_index = Ref.IntRef()
        val _arg_input_index = Ref.IntRef()

        // OR 0
        var _start_i0 = _index.element

        var _label = -1
        while(true) {
            when(_label) {
                -1 -> {
                    // OR 0
                    _start_i0 = _index.element

                    // CALLORVAR FloatLiteral
                    var _r1: _KotlinParser_Item? = null
                    _r1 = _MemoCall(_memo, "FloatLiteral", _index.element, ::FloatLiteral, null)
                    if (_r1 != null) _index.element = _r1.nextIndex

                    // OR shortcut 0
                    if (_memo.results.peek() == null) {
                        _memo.results.pop()
                        _index.element = _start_i0
                    } else {
                        _label = 0
                        continue
                    }

                    // CALLORVAR DoubleLiteral
                    var _r2: _KotlinParser_Item? = null
                    _r2 = _MemoCall(_memo, "DoubleLiteral", _index.element, ::DoubleLiteral, null)
                    if (_r2 != null) _index.element = _r2.nextIndex

                    _label = 0
                }
                // OR 0
                0 -> {
                    break
                }
            }
        }
    }


    open fun FloatLiteral(_memo: _KotlinParser_Memo, __index: Int, _args: _KotlinParser_Args?) {
        val _index = Ref.IntRef()
        _index.element = __index

        val _arg_index = Ref.IntRef()
        val _arg_input_index = Ref.IntRef()

        var t: _KotlinParser_Item? = null

        // COND 1
        var _start_i1 = _index.element

        var _label = -1
        while(true) {
            when(_label) {
                -1 -> {
                    // COND 1
                    _start_i1 = _index.element

                    // ANY
                    _ParseAny(_memo, _index)

                    // BIND t
                    t = _memo.results.peek()

                    // COND 1
                    val lambda1: (_KotlinParser_Item) -> Boolean = { (t.i is Token.FloatLiteral) }
                    if (_memo.results.peek() == null || !lambda1(_memo.results.peek()!!)) {
                        _memo.results.pop()
                        _memo.results.push(null)
                        _index.element = _start_i1
                    }

                    // ACT 0
                    val _r0 = _memo.results.peek()
                    if (_r0 != null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_r0.startIndex, _r0.nextIndex, _memo.input, _Thunk({ AST.FloatLiteral(t.i.cast<Token.FloatLiteral>().s) }, _r0), true))
                    }

                    break
                }
            }
        }
    }


    open fun DoubleLiteral(_memo: _KotlinParser_Memo, __index: Int, _args: _KotlinParser_Args?) {
        val _index = Ref.IntRef()
        _index.element = __index

        val _arg_index = Ref.IntRef()
        val _arg_input_index = Ref.IntRef()

        var t: _KotlinParser_Item? = null

        // COND 1
        var _start_i1 = _index.element

        var _label = -1
        while(true) {
            when(_label) {
                -1 -> {
                    // COND 1
                    _start_i1 = _index.element

                    // ANY
                    _ParseAny(_memo, _index)

                    // BIND t
                    t = _memo.results.peek()

                    // COND 1
                    val lambda1: (_KotlinParser_Item) -> Boolean = { (t.i is Token.DoubleLiteral) }
                    if (_memo.results.peek() == null || !lambda1(_memo.results.peek()!!)) {
                        _memo.results.pop()
                        _memo.results.push(null)
                        _index.element = _start_i1
                    }

                    // ACT 0
                    val _r0 = _memo.results.peek()
                    if (_r0 != null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_r0.startIndex, _r0.nextIndex, _memo.input, _Thunk({ AST.DoubleLiteral(t.i.cast<Token.DoubleLiteral>().s) }, _r0), true))
                    }

                    break
                }
            }
        }
    }


    open fun LongLiteral(_memo: _KotlinParser_Memo, __index: Int, _args: _KotlinParser_Args?) {
        val _index = Ref.IntRef()
        _index.element = __index

        val _arg_index = Ref.IntRef()
        val _arg_input_index = Ref.IntRef()

        var t: _KotlinParser_Item? = null

        // COND 1
        var _start_i1 = _index.element

        var _label = -1
        while(true) {
            when(_label) {
                -1 -> {
                    // COND 1
                    _start_i1 = _index.element

                    // ANY
                    _ParseAny(_memo, _index)

                    // BIND t
                    t = _memo.results.peek()

                    // COND 1
                    val lambda1: (_KotlinParser_Item) -> Boolean = { (t.i is Token.LongLiteral) }
                    if (_memo.results.peek() == null || !lambda1(_memo.results.peek()!!)) {
                        _memo.results.pop()
                        _memo.results.push(null)
                        _index.element = _start_i1
                    }

                    // ACT 0
                    val _r0 = _memo.results.peek()
                    if (_r0 != null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_r0.startIndex, _r0.nextIndex, _memo.input, _Thunk({ AST.LongLiteral(t.i.cast<Token.LongLiteral>().s) }, _r0), true))
                    }

                    break
                }
            }
        }
    }


    open fun UnsignedLiteral(_memo: _KotlinParser_Memo, __index: Int, _args: _KotlinParser_Args?) {
        val _index = Ref.IntRef()
        _index.element = __index

        val _arg_index = Ref.IntRef()
        val _arg_input_index = Ref.IntRef()

        var t: _KotlinParser_Item? = null

        // COND 1
        var _start_i1 = _index.element

        var _label = -1
        while(true) {
            when(_label) {
                -1 -> {
                    // COND 1
                    _start_i1 = _index.element

                    // ANY
                    _ParseAny(_memo, _index)

                    // BIND t
                    t = _memo.results.peek()

                    // COND 1
                    val lambda1: (_KotlinParser_Item) -> Boolean = { (t.i is Token.UnsignedLiteral) }
                    if (_memo.results.peek() == null || !lambda1(_memo.results.peek()!!)) {
                        _memo.results.pop()
                        _memo.results.push(null)
                        _index.element = _start_i1
                    }

                    // ACT 0
                    val _r0 = _memo.results.peek()
                    if (_r0 != null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_r0.startIndex, _r0.nextIndex, _memo.input, _Thunk({ AST.UnsignedLiteral(t.i.cast<Token.UnsignedLiteral>().s) }, _r0), true))
                    }

                    break
                }
            }
        }
    }


    open fun UnsignedLongLiteral(_memo: _KotlinParser_Memo, __index: Int, _args: _KotlinParser_Args?) {
        val _index = Ref.IntRef()
        _index.element = __index

        val _arg_index = Ref.IntRef()
        val _arg_input_index = Ref.IntRef()

        var t: _KotlinParser_Item? = null

        // COND 1
        var _start_i1 = _index.element

        var _label = -1
        while(true) {
            when(_label) {
                -1 -> {
                    // COND 1
                    _start_i1 = _index.element

                    // ANY
                    _ParseAny(_memo, _index)

                    // BIND t
                    t = _memo.results.peek()

                    // COND 1
                    val lambda1: (_KotlinParser_Item) -> Boolean = { (t.i is Token.UnsignedLongLiteral) }
                    if (_memo.results.peek() == null || !lambda1(_memo.results.peek()!!)) {
                        _memo.results.pop()
                        _memo.results.push(null)
                        _index.element = _start_i1
                    }

                    // ACT 0
                    val _r0 = _memo.results.peek()
                    if (_r0 != null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_r0.startIndex, _r0.nextIndex, _memo.input, _Thunk({ AST.UnsignedLongLiteral(t.i.cast<Token.UnsignedLongLiteral>().s) }, _r0), true))
                    }

                    break
                }
            }
        }
    }


    open fun ThisAt(_memo: _KotlinParser_Memo, __index: Int, _args: _KotlinParser_Args?) {
        val _index = Ref.IntRef()
        _index.element = __index

        val _arg_index = Ref.IntRef()
        val _arg_input_index = Ref.IntRef()

        var t: _KotlinParser_Item? = null

        // COND 1
        var _start_i1 = _index.element

        var _label = -1
        while(true) {
            when(_label) {
                -1 -> {
                    // COND 1
                    _start_i1 = _index.element

                    // ANY
                    _ParseAny(_memo, _index)

                    // BIND t
                    t = _memo.results.peek()

                    // COND 1
                    val lambda1: (_KotlinParser_Item) -> Boolean = { (t.i is Token.ThisAt) }
                    if (_memo.results.peek() == null || !lambda1(_memo.results.peek()!!)) {
                        _memo.results.pop()
                        _memo.results.push(null)
                        _index.element = _start_i1
                    }

                    // ACT 0
                    val _r0 = _memo.results.peek()
                    if (_r0 != null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_r0.startIndex, _r0.nextIndex, _memo.input, _Thunk({ AST.Name(t.i.cast<Token.ThisAt>().s) }, _r0), true))
                    }

                    break
                }
            }
        }
    }


    open fun BreakAt(_memo: _KotlinParser_Memo, __index: Int, _args: _KotlinParser_Args?) {
        val _index = Ref.IntRef()
        _index.element = __index

        val _arg_index = Ref.IntRef()
        val _arg_input_index = Ref.IntRef()

        var t: _KotlinParser_Item? = null

        // COND 1
        var _start_i1 = _index.element

        var _label = -1
        while(true) {
            when(_label) {
                -1 -> {
                    // COND 1
                    _start_i1 = _index.element

                    // ANY
                    _ParseAny(_memo, _index)

                    // BIND t
                    t = _memo.results.peek()

                    // COND 1
                    val lambda1: (_KotlinParser_Item) -> Boolean = { (t.i is Token.BreakAt) }
                    if (_memo.results.peek() == null || !lambda1(_memo.results.peek()!!)) {
                        _memo.results.pop()
                        _memo.results.push(null)
                        _index.element = _start_i1
                    }

                    // ACT 0
                    val _r0 = _memo.results.peek()
                    if (_r0 != null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_r0.startIndex, _r0.nextIndex, _memo.input, _Thunk({ AST.Name(t.i.cast<Token.BreakAt>().s) }, _r0), true))
                    }

                    break
                }
            }
        }
    }


    open fun ReturnAt(_memo: _KotlinParser_Memo, __index: Int, _args: _KotlinParser_Args?) {
        val _index = Ref.IntRef()
        _index.element = __index

        val _arg_index = Ref.IntRef()
        val _arg_input_index = Ref.IntRef()

        var t: _KotlinParser_Item? = null

        // COND 1
        var _start_i1 = _index.element

        var _label = -1
        while(true) {
            when(_label) {
                -1 -> {
                    // COND 1
                    _start_i1 = _index.element

                    // ANY
                    _ParseAny(_memo, _index)

                    // BIND t
                    t = _memo.results.peek()

                    // COND 1
                    val lambda1: (_KotlinParser_Item) -> Boolean = { (t.i is Token.ReturnAt) }
                    if (_memo.results.peek() == null || !lambda1(_memo.results.peek()!!)) {
                        _memo.results.pop()
                        _memo.results.push(null)
                        _index.element = _start_i1
                    }

                    // ACT 0
                    val _r0 = _memo.results.peek()
                    if (_r0 != null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_r0.startIndex, _r0.nextIndex, _memo.input, _Thunk({ AST.Name(t.i.cast<Token.ReturnAt>().s) }, _r0), true))
                    }

                    break
                }
            }
        }
    }


    open fun ContinueAt(_memo: _KotlinParser_Memo, __index: Int, _args: _KotlinParser_Args?) {
        val _index = Ref.IntRef()
        _index.element = __index

        val _arg_index = Ref.IntRef()
        val _arg_input_index = Ref.IntRef()

        var t: _KotlinParser_Item? = null

        // COND 1
        var _start_i1 = _index.element

        var _label = -1
        while(true) {
            when(_label) {
                -1 -> {
                    // COND 1
                    _start_i1 = _index.element

                    // ANY
                    _ParseAny(_memo, _index)

                    // BIND t
                    t = _memo.results.peek()

                    // COND 1
                    val lambda1: (_KotlinParser_Item) -> Boolean = { (t.i is Token.ContinueAt) }
                    if (_memo.results.peek() == null || !lambda1(_memo.results.peek()!!)) {
                        _memo.results.pop()
                        _memo.results.push(null)
                        _index.element = _start_i1
                    }

                    // ACT 0
                    val _r0 = _memo.results.peek()
                    if (_r0 != null) {
                        _memo.results.pop()
                        _memo.results.push(_KotlinParser_Item(_r0.startIndex, _r0.nextIndex, _memo.input, _Thunk({ AST.Name(t.i.cast<Token.ContinueAt>().s) }, _r0), true))
                    }

                    break
                }
            }
        }
    }


    open fun EOF(_memo: _KotlinParser_Memo, __index: Int, _args: _KotlinParser_Args?) {
        val _index = Ref.IntRef()
        _index.element = __index

        val _arg_index = Ref.IntRef()
        val _arg_input_index = Ref.IntRef()

        // NOT 0
        var _start_i0 = _index.element

        var _label = -1
        while(true) {
            when(_label) {
                -1 -> {
                    // NOT 0
                    _start_i0 = _index.element

                    // ANY
                    _ParseAny(_memo, _index)

                    // NOT 0
                    val _r0 = _memo.results.pop()
                    _memo.results.push(if (_r0 == null) _KotlinParser_Item(_start_i0, _memo.input) else null)
                    _index.element = _start_i0
                    break
                }
            }
        }
    }


    open fun NL(_memo: _KotlinParser_Memo, __index: Int, _args: _KotlinParser_Args?) {
        val _index = Ref.IntRef()
        _index.element = __index

        val _arg_index = Ref.IntRef()
        val _arg_input_index = Ref.IntRef()

        var _label = -1
        while(true) {
            when(_label) {
                -1 -> {
                    // LITERAL Token.NL
                    _ParseLiteralObj(_memo, _index, Token.NL)

                    break
                }
            }
        }
    }


    open fun RESERVED(_memo: _KotlinParser_Memo, __index: Int, _args: _KotlinParser_Args?) {
        val _index = Ref.IntRef()
        _index.element = __index

        val _arg_index = Ref.IntRef()
        val _arg_input_index = Ref.IntRef()

        var _label = -1
        while(true) {
            when(_label) {
                -1 -> {
                    // LITERAL Token.RESERVED
                    _ParseLiteralObj(_memo, _index, Token.RESERVED)

                    break
                }
            }
        }
    }


    open fun RANGE(_memo: _KotlinParser_Memo, __index: Int, _args: _KotlinParser_Args?) {
        val _index = Ref.IntRef()
        _index.element = __index

        val _arg_index = Ref.IntRef()
        val _arg_input_index = Ref.IntRef()

        var _label = -1
        while(true) {
            when(_label) {
                -1 -> {
                    // LITERAL Token.RANGE
                    _ParseLiteralObj(_memo, _index, Token.RANGE)

                    break
                }
            }
        }
    }


    open fun DOT(_memo: _KotlinParser_Memo, __index: Int, _args: _KotlinParser_Args?) {
        val _index = Ref.IntRef()
        _index.element = __index

        val _arg_index = Ref.IntRef()
        val _arg_input_index = Ref.IntRef()

        var _label = -1
        while(true) {
            when(_label) {
                -1 -> {
                    // LITERAL Token.DOT
                    _ParseLiteralObj(_memo, _index, Token.DOT)

                    break
                }
            }
        }
    }


    open fun COMMA(_memo: _KotlinParser_Memo, __index: Int, _args: _KotlinParser_Args?) {
        val _index = Ref.IntRef()
        _index.element = __index

        val _arg_index = Ref.IntRef()
        val _arg_input_index = Ref.IntRef()

        var _label = -1
        while(true) {
            when(_label) {
                -1 -> {
                    // LITERAL Token.COMMA
                    _ParseLiteralObj(_memo, _index, Token.COMMA)

                    break
                }
            }
        }
    }


    open fun LPAREN(_memo: _KotlinParser_Memo, __index: Int, _args: _KotlinParser_Args?) {
        val _index = Ref.IntRef()
        _index.element = __index

        val _arg_index = Ref.IntRef()
        val _arg_input_index = Ref.IntRef()

        var _label = -1
        while(true) {
            when(_label) {
                -1 -> {
                    // LITERAL Token.LPAREN
                    _ParseLiteralObj(_memo, _index, Token.LPAREN)

                    break
                }
            }
        }
    }


    open fun RPAREN(_memo: _KotlinParser_Memo, __index: Int, _args: _KotlinParser_Args?) {
        val _index = Ref.IntRef()
        _index.element = __index

        val _arg_index = Ref.IntRef()
        val _arg_input_index = Ref.IntRef()

        var _label = -1
        while(true) {
            when(_label) {
                -1 -> {
                    // LITERAL Token.RPAREN
                    _ParseLiteralObj(_memo, _index, Token.RPAREN)

                    break
                }
            }
        }
    }


    open fun LSQUARE(_memo: _KotlinParser_Memo, __index: Int, _args: _KotlinParser_Args?) {
        val _index = Ref.IntRef()
        _index.element = __index

        val _arg_index = Ref.IntRef()
        val _arg_input_index = Ref.IntRef()

        var _label = -1
        while(true) {
            when(_label) {
                -1 -> {
                    // LITERAL Token.LSQUARE
                    _ParseLiteralObj(_memo, _index, Token.LSQUARE)

                    break
                }
            }
        }
    }


    open fun RSQUARE(_memo: _KotlinParser_Memo, __index: Int, _args: _KotlinParser_Args?) {
        val _index = Ref.IntRef()
        _index.element = __index

        val _arg_index = Ref.IntRef()
        val _arg_input_index = Ref.IntRef()

        var _label = -1
        while(true) {
            when(_label) {
                -1 -> {
                    // LITERAL Token.RSQUARE
                    _ParseLiteralObj(_memo, _index, Token.RSQUARE)

                    break
                }
            }
        }
    }


    open fun LCURL(_memo: _KotlinParser_Memo, __index: Int, _args: _KotlinParser_Args?) {
        val _index = Ref.IntRef()
        _index.element = __index

        val _arg_index = Ref.IntRef()
        val _arg_input_index = Ref.IntRef()

        var _label = -1
        while(true) {
            when(_label) {
                -1 -> {
                    // LITERAL Token.LCURL
                    _ParseLiteralObj(_memo, _index, Token.LCURL)

                    break
                }
            }
        }
    }


    open fun RCURL(_memo: _KotlinParser_Memo, __index: Int, _args: _KotlinParser_Args?) {
        val _index = Ref.IntRef()
        _index.element = __index

        val _arg_index = Ref.IntRef()
        val _arg_input_index = Ref.IntRef()

        var _label = -1
        while(true) {
            when(_label) {
                -1 -> {
                    // LITERAL Token.RCURL
                    _ParseLiteralObj(_memo, _index, Token.RCURL)

                    break
                }
            }
        }
    }


    open fun INCR(_memo: _KotlinParser_Memo, __index: Int, _args: _KotlinParser_Args?) {
        val _index = Ref.IntRef()
        _index.element = __index

        val _arg_index = Ref.IntRef()
        val _arg_input_index = Ref.IntRef()

        var _label = -1
        while(true) {
            when(_label) {
                -1 -> {
                    // LITERAL Token.INCR
                    _ParseLiteralObj(_memo, _index, Token.INCR)

                    break
                }
            }
        }
    }


    open fun ADD_ASSIGNMENT(_memo: _KotlinParser_Memo, __index: Int, _args: _KotlinParser_Args?) {
        val _index = Ref.IntRef()
        _index.element = __index

        val _arg_index = Ref.IntRef()
        val _arg_input_index = Ref.IntRef()

        var _label = -1
        while(true) {
            when(_label) {
                -1 -> {
                    // LITERAL Token.ADD_ASSIGNMENT
                    _ParseLiteralObj(_memo, _index, Token.ADD_ASSIGNMENT)

                    break
                }
            }
        }
    }


    open fun ADD(_memo: _KotlinParser_Memo, __index: Int, _args: _KotlinParser_Args?) {
        val _index = Ref.IntRef()
        _index.element = __index

        val _arg_index = Ref.IntRef()
        val _arg_input_index = Ref.IntRef()

        var _label = -1
        while(true) {
            when(_label) {
                -1 -> {
                    // LITERAL Token.ADD
                    _ParseLiteralObj(_memo, _index, Token.ADD)

                    break
                }
            }
        }
    }


    open fun DECR(_memo: _KotlinParser_Memo, __index: Int, _args: _KotlinParser_Args?) {
        val _index = Ref.IntRef()
        _index.element = __index

        val _arg_index = Ref.IntRef()
        val _arg_input_index = Ref.IntRef()

        var _label = -1
        while(true) {
            when(_label) {
                -1 -> {
                    // LITERAL Token.DECR
                    _ParseLiteralObj(_memo, _index, Token.DECR)

                    break
                }
            }
        }
    }


    open fun ARROW(_memo: _KotlinParser_Memo, __index: Int, _args: _KotlinParser_Args?) {
        val _index = Ref.IntRef()
        _index.element = __index

        val _arg_index = Ref.IntRef()
        val _arg_input_index = Ref.IntRef()

        var _label = -1
        while(true) {
            when(_label) {
                -1 -> {
                    // LITERAL Token.ARROW
                    _ParseLiteralObj(_memo, _index, Token.ARROW)

                    break
                }
            }
        }
    }


    open fun SUB_ASSIGNMENT(_memo: _KotlinParser_Memo, __index: Int, _args: _KotlinParser_Args?) {
        val _index = Ref.IntRef()
        _index.element = __index

        val _arg_index = Ref.IntRef()
        val _arg_input_index = Ref.IntRef()

        var _label = -1
        while(true) {
            when(_label) {
                -1 -> {
                    // LITERAL Token.SUB_ASSIGNMENT
                    _ParseLiteralObj(_memo, _index, Token.SUB_ASSIGNMENT)

                    break
                }
            }
        }
    }


    open fun SUB(_memo: _KotlinParser_Memo, __index: Int, _args: _KotlinParser_Args?) {
        val _index = Ref.IntRef()
        _index.element = __index

        val _arg_index = Ref.IntRef()
        val _arg_input_index = Ref.IntRef()

        var _label = -1
        while(true) {
            when(_label) {
                -1 -> {
                    // LITERAL Token.SUB
                    _ParseLiteralObj(_memo, _index, Token.SUB)

                    break
                }
            }
        }
    }


    open fun MULT_ASSIGNMENT(_memo: _KotlinParser_Memo, __index: Int, _args: _KotlinParser_Args?) {
        val _index = Ref.IntRef()
        _index.element = __index

        val _arg_index = Ref.IntRef()
        val _arg_input_index = Ref.IntRef()

        var _label = -1
        while(true) {
            when(_label) {
                -1 -> {
                    // LITERAL Token.MULT_ASSIGNMENT
                    _ParseLiteralObj(_memo, _index, Token.MULT_ASSIGNMENT)

                    break
                }
            }
        }
    }


    open fun MULT(_memo: _KotlinParser_Memo, __index: Int, _args: _KotlinParser_Args?) {
        val _index = Ref.IntRef()
        _index.element = __index

        val _arg_index = Ref.IntRef()
        val _arg_input_index = Ref.IntRef()

        var _label = -1
        while(true) {
            when(_label) {
                -1 -> {
                    // LITERAL Token.MULT
                    _ParseLiteralObj(_memo, _index, Token.MULT)

                    break
                }
            }
        }
    }


    open fun DIV_ASSIGNMENT(_memo: _KotlinParser_Memo, __index: Int, _args: _KotlinParser_Args?) {
        val _index = Ref.IntRef()
        _index.element = __index

        val _arg_index = Ref.IntRef()
        val _arg_input_index = Ref.IntRef()

        var _label = -1
        while(true) {
            when(_label) {
                -1 -> {
                    // LITERAL Token.DIV_ASSIGNMENT
                    _ParseLiteralObj(_memo, _index, Token.DIV_ASSIGNMENT)

                    break
                }
            }
        }
    }


    open fun DIV(_memo: _KotlinParser_Memo, __index: Int, _args: _KotlinParser_Args?) {
        val _index = Ref.IntRef()
        _index.element = __index

        val _arg_index = Ref.IntRef()
        val _arg_input_index = Ref.IntRef()

        var _label = -1
        while(true) {
            when(_label) {
                -1 -> {
                    // LITERAL Token.DIV
                    _ParseLiteralObj(_memo, _index, Token.DIV)

                    break
                }
            }
        }
    }


    open fun MOD_ASSIGNMENT(_memo: _KotlinParser_Memo, __index: Int, _args: _KotlinParser_Args?) {
        val _index = Ref.IntRef()
        _index.element = __index

        val _arg_index = Ref.IntRef()
        val _arg_input_index = Ref.IntRef()

        var _label = -1
        while(true) {
            when(_label) {
                -1 -> {
                    // LITERAL Token.MOD_ASSIGNMENT
                    _ParseLiteralObj(_memo, _index, Token.MOD_ASSIGNMENT)

                    break
                }
            }
        }
    }


    open fun MOD(_memo: _KotlinParser_Memo, __index: Int, _args: _KotlinParser_Args?) {
        val _index = Ref.IntRef()
        _index.element = __index

        val _arg_index = Ref.IntRef()
        val _arg_input_index = Ref.IntRef()

        var _label = -1
        while(true) {
            when(_label) {
                -1 -> {
                    // LITERAL Token.MOD
                    _ParseLiteralObj(_memo, _index, Token.MOD)

                    break
                }
            }
        }
    }


    open fun CONJ(_memo: _KotlinParser_Memo, __index: Int, _args: _KotlinParser_Args?) {
        val _index = Ref.IntRef()
        _index.element = __index

        val _arg_index = Ref.IntRef()
        val _arg_input_index = Ref.IntRef()

        var _label = -1
        while(true) {
            when(_label) {
                -1 -> {
                    // LITERAL Token.CONJ
                    _ParseLiteralObj(_memo, _index, Token.CONJ)

                    break
                }
            }
        }
    }


    open fun DISJ(_memo: _KotlinParser_Memo, __index: Int, _args: _KotlinParser_Args?) {
        val _index = Ref.IntRef()
        _index.element = __index

        val _arg_index = Ref.IntRef()
        val _arg_input_index = Ref.IntRef()

        var _label = -1
        while(true) {
            when(_label) {
                -1 -> {
                    // LITERAL Token.DISJ
                    _ParseLiteralObj(_memo, _index, Token.DISJ)

                    break
                }
            }
        }
    }


    open fun EXCL_EQEQ(_memo: _KotlinParser_Memo, __index: Int, _args: _KotlinParser_Args?) {
        val _index = Ref.IntRef()
        _index.element = __index

        val _arg_index = Ref.IntRef()
        val _arg_input_index = Ref.IntRef()

        var _label = -1
        while(true) {
            when(_label) {
                -1 -> {
                    // LITERAL Token.EXCL_EQEQ
                    _ParseLiteralObj(_memo, _index, Token.EXCL_EQEQ)

                    break
                }
            }
        }
    }


    open fun EXCL_EQ(_memo: _KotlinParser_Memo, __index: Int, _args: _KotlinParser_Args?) {
        val _index = Ref.IntRef()
        _index.element = __index

        val _arg_index = Ref.IntRef()
        val _arg_input_index = Ref.IntRef()

        var _label = -1
        while(true) {
            when(_label) {
                -1 -> {
                    // LITERAL Token.EXCL_EQ
                    _ParseLiteralObj(_memo, _index, Token.EXCL_EQ)

                    break
                }
            }
        }
    }


    open fun EXCL(_memo: _KotlinParser_Memo, __index: Int, _args: _KotlinParser_Args?) {
        val _index = Ref.IntRef()
        _index.element = __index

        val _arg_index = Ref.IntRef()
        val _arg_input_index = Ref.IntRef()

        var _label = -1
        while(true) {
            when(_label) {
                -1 -> {
                    // LITERAL Token.EXCL
                    _ParseLiteralObj(_memo, _index, Token.EXCL)

                    break
                }
            }
        }
    }


    open fun SEMICOLON(_memo: _KotlinParser_Memo, __index: Int, _args: _KotlinParser_Args?) {
        val _index = Ref.IntRef()
        _index.element = __index

        val _arg_index = Ref.IntRef()
        val _arg_input_index = Ref.IntRef()

        var _label = -1
        while(true) {
            when(_label) {
                -1 -> {
                    // LITERAL Token.SEMICOLON
                    _ParseLiteralObj(_memo, _index, Token.SEMICOLON)

                    break
                }
            }
        }
    }


    open fun COLONCOLON(_memo: _KotlinParser_Memo, __index: Int, _args: _KotlinParser_Args?) {
        val _index = Ref.IntRef()
        _index.element = __index

        val _arg_index = Ref.IntRef()
        val _arg_input_index = Ref.IntRef()

        var _label = -1
        while(true) {
            when(_label) {
                -1 -> {
                    // LITERAL Token.COLONCOLON
                    _ParseLiteralObj(_memo, _index, Token.COLONCOLON)

                    break
                }
            }
        }
    }


    open fun COLON(_memo: _KotlinParser_Memo, __index: Int, _args: _KotlinParser_Args?) {
        val _index = Ref.IntRef()
        _index.element = __index

        val _arg_index = Ref.IntRef()
        val _arg_input_index = Ref.IntRef()

        var _label = -1
        while(true) {
            when(_label) {
                -1 -> {
                    // LITERAL Token.COLON
                    _ParseLiteralObj(_memo, _index, Token.COLON)

                    break
                }
            }
        }
    }


    open fun HASH(_memo: _KotlinParser_Memo, __index: Int, _args: _KotlinParser_Args?) {
        val _index = Ref.IntRef()
        _index.element = __index

        val _arg_index = Ref.IntRef()
        val _arg_input_index = Ref.IntRef()

        var _label = -1
        while(true) {
            when(_label) {
                -1 -> {
                    // LITERAL Token.HASH
                    _ParseLiteralObj(_memo, _index, Token.HASH)

                    break
                }
            }
        }
    }


    open fun AT(_memo: _KotlinParser_Memo, __index: Int, _args: _KotlinParser_Args?) {
        val _index = Ref.IntRef()
        _index.element = __index

        val _arg_index = Ref.IntRef()
        val _arg_input_index = Ref.IntRef()

        var _label = -1
        while(true) {
            when(_label) {
                -1 -> {
                    // LITERAL Token.AT
                    _ParseLiteralObj(_memo, _index, Token.AT)

                    break
                }
            }
        }
    }


    open fun Q_COLONCOLON(_memo: _KotlinParser_Memo, __index: Int, _args: _KotlinParser_Args?) {
        val _index = Ref.IntRef()
        _index.element = __index

        val _arg_index = Ref.IntRef()
        val _arg_input_index = Ref.IntRef()

        var _label = -1
        while(true) {
            when(_label) {
                -1 -> {
                    // LITERAL Token.Q_COLONCOLON
                    _ParseLiteralObj(_memo, _index, Token.Q_COLONCOLON)

                    break
                }
            }
        }
    }


    open fun ELVIS(_memo: _KotlinParser_Memo, __index: Int, _args: _KotlinParser_Args?) {
        val _index = Ref.IntRef()
        _index.element = __index

        val _arg_index = Ref.IntRef()
        val _arg_input_index = Ref.IntRef()

        var _label = -1
        while(true) {
            when(_label) {
                -1 -> {
                    // LITERAL Token.ELVIS
                    _ParseLiteralObj(_memo, _index, Token.ELVIS)

                    break
                }
            }
        }
    }


    open fun QUEST(_memo: _KotlinParser_Memo, __index: Int, _args: _KotlinParser_Args?) {
        val _index = Ref.IntRef()
        _index.element = __index

        val _arg_index = Ref.IntRef()
        val _arg_input_index = Ref.IntRef()

        var _label = -1
        while(true) {
            when(_label) {
                -1 -> {
                    // LITERAL Token.QUEST
                    _ParseLiteralObj(_memo, _index, Token.QUEST)

                    break
                }
            }
        }
    }


    open fun LE(_memo: _KotlinParser_Memo, __index: Int, _args: _KotlinParser_Args?) {
        val _index = Ref.IntRef()
        _index.element = __index

        val _arg_index = Ref.IntRef()
        val _arg_input_index = Ref.IntRef()

        var _label = -1
        while(true) {
            when(_label) {
                -1 -> {
                    // LITERAL Token.LE
                    _ParseLiteralObj(_memo, _index, Token.LE)

                    break
                }
            }
        }
    }


    open fun LANGLE(_memo: _KotlinParser_Memo, __index: Int, _args: _KotlinParser_Args?) {
        val _index = Ref.IntRef()
        _index.element = __index

        val _arg_index = Ref.IntRef()
        val _arg_input_index = Ref.IntRef()

        var _label = -1
        while(true) {
            when(_label) {
                -1 -> {
                    // LITERAL Token.LANGLE
                    _ParseLiteralObj(_memo, _index, Token.LANGLE)

                    break
                }
            }
        }
    }


    open fun GE(_memo: _KotlinParser_Memo, __index: Int, _args: _KotlinParser_Args?) {
        val _index = Ref.IntRef()
        _index.element = __index

        val _arg_index = Ref.IntRef()
        val _arg_input_index = Ref.IntRef()

        var _label = -1
        while(true) {
            when(_label) {
                -1 -> {
                    // LITERAL Token.GE
                    _ParseLiteralObj(_memo, _index, Token.GE)

                    break
                }
            }
        }
    }


    open fun RANGLE(_memo: _KotlinParser_Memo, __index: Int, _args: _KotlinParser_Args?) {
        val _index = Ref.IntRef()
        _index.element = __index

        val _arg_index = Ref.IntRef()
        val _arg_input_index = Ref.IntRef()

        var _label = -1
        while(true) {
            when(_label) {
                -1 -> {
                    // LITERAL Token.RANGLE
                    _ParseLiteralObj(_memo, _index, Token.RANGLE)

                    break
                }
            }
        }
    }


    open fun AS_SAFE(_memo: _KotlinParser_Memo, __index: Int, _args: _KotlinParser_Args?) {
        val _index = Ref.IntRef()
        _index.element = __index

        val _arg_index = Ref.IntRef()
        val _arg_input_index = Ref.IntRef()

        var _label = -1
        while(true) {
            when(_label) {
                -1 -> {
                    // LITERAL Token.AS_SAFE
                    _ParseLiteralObj(_memo, _index, Token.AS_SAFE)

                    break
                }
            }
        }
    }


    open fun EQEQEQ(_memo: _KotlinParser_Memo, __index: Int, _args: _KotlinParser_Args?) {
        val _index = Ref.IntRef()
        _index.element = __index

        val _arg_index = Ref.IntRef()
        val _arg_input_index = Ref.IntRef()

        var _label = -1
        while(true) {
            when(_label) {
                -1 -> {
                    // LITERAL Token.EQEQEQ
                    _ParseLiteralObj(_memo, _index, Token.EQEQEQ)

                    break
                }
            }
        }
    }


    open fun EQEQ(_memo: _KotlinParser_Memo, __index: Int, _args: _KotlinParser_Args?) {
        val _index = Ref.IntRef()
        _index.element = __index

        val _arg_index = Ref.IntRef()
        val _arg_input_index = Ref.IntRef()

        var _label = -1
        while(true) {
            when(_label) {
                -1 -> {
                    // LITERAL Token.EQEQ
                    _ParseLiteralObj(_memo, _index, Token.EQEQ)

                    break
                }
            }
        }
    }


    open fun DOUBLE_ARROW(_memo: _KotlinParser_Memo, __index: Int, _args: _KotlinParser_Args?) {
        val _index = Ref.IntRef()
        _index.element = __index

        val _arg_index = Ref.IntRef()
        val _arg_input_index = Ref.IntRef()

        var _label = -1
        while(true) {
            when(_label) {
                -1 -> {
                    // LITERAL Token.DOUBLE_ARROW
                    _ParseLiteralObj(_memo, _index, Token.DOUBLE_ARROW)

                    break
                }
            }
        }
    }


    open fun ASSIGNMENT(_memo: _KotlinParser_Memo, __index: Int, _args: _KotlinParser_Args?) {
        val _index = Ref.IntRef()
        _index.element = __index

        val _arg_index = Ref.IntRef()
        val _arg_input_index = Ref.IntRef()

        var _label = -1
        while(true) {
            when(_label) {
                -1 -> {
                    // LITERAL Token.ASSIGNMENT
                    _ParseLiteralObj(_memo, _index, Token.ASSIGNMENT)

                    break
                }
            }
        }
    }


    open fun FILE(_memo: _KotlinParser_Memo, __index: Int, _args: _KotlinParser_Args?) {
        val _index = Ref.IntRef()
        _index.element = __index

        val _arg_index = Ref.IntRef()
        val _arg_input_index = Ref.IntRef()

        var _label = -1
        while(true) {
            when(_label) {
                -1 -> {
                    // LITERAL Token.FILE
                    _ParseLiteralObj(_memo, _index, Token.FILE)

                    break
                }
            }
        }
    }


    open fun PACKAGE(_memo: _KotlinParser_Memo, __index: Int, _args: _KotlinParser_Args?) {
        val _index = Ref.IntRef()
        _index.element = __index

        val _arg_index = Ref.IntRef()
        val _arg_input_index = Ref.IntRef()

        var _label = -1
        while(true) {
            when(_label) {
                -1 -> {
                    // LITERAL Token.PACKAGE
                    _ParseLiteralObj(_memo, _index, Token.PACKAGE)

                    break
                }
            }
        }
    }


    open fun IMPORT(_memo: _KotlinParser_Memo, __index: Int, _args: _KotlinParser_Args?) {
        val _index = Ref.IntRef()
        _index.element = __index

        val _arg_index = Ref.IntRef()
        val _arg_input_index = Ref.IntRef()

        var _label = -1
        while(true) {
            when(_label) {
                -1 -> {
                    // LITERAL Token.IMPORT
                    _ParseLiteralObj(_memo, _index, Token.IMPORT)

                    break
                }
            }
        }
    }


    open fun CLASS(_memo: _KotlinParser_Memo, __index: Int, _args: _KotlinParser_Args?) {
        val _index = Ref.IntRef()
        _index.element = __index

        val _arg_index = Ref.IntRef()
        val _arg_input_index = Ref.IntRef()

        var _label = -1
        while(true) {
            when(_label) {
                -1 -> {
                    // LITERAL Token.CLASS
                    _ParseLiteralObj(_memo, _index, Token.CLASS)

                    break
                }
            }
        }
    }


    open fun INTERFACE(_memo: _KotlinParser_Memo, __index: Int, _args: _KotlinParser_Args?) {
        val _index = Ref.IntRef()
        _index.element = __index

        val _arg_index = Ref.IntRef()
        val _arg_input_index = Ref.IntRef()

        var _label = -1
        while(true) {
            when(_label) {
                -1 -> {
                    // LITERAL Token.INTERFACE
                    _ParseLiteralObj(_memo, _index, Token.INTERFACE)

                    break
                }
            }
        }
    }


    open fun FUN(_memo: _KotlinParser_Memo, __index: Int, _args: _KotlinParser_Args?) {
        val _index = Ref.IntRef()
        _index.element = __index

        val _arg_index = Ref.IntRef()
        val _arg_input_index = Ref.IntRef()

        var _label = -1
        while(true) {
            when(_label) {
                -1 -> {
                    // LITERAL Token.FUN
                    _ParseLiteralObj(_memo, _index, Token.FUN)

                    break
                }
            }
        }
    }


    open fun OBJECT(_memo: _KotlinParser_Memo, __index: Int, _args: _KotlinParser_Args?) {
        val _index = Ref.IntRef()
        _index.element = __index

        val _arg_index = Ref.IntRef()
        val _arg_input_index = Ref.IntRef()

        var _label = -1
        while(true) {
            when(_label) {
                -1 -> {
                    // LITERAL Token.OBJECT
                    _ParseLiteralObj(_memo, _index, Token.OBJECT)

                    break
                }
            }
        }
    }


    open fun VAL(_memo: _KotlinParser_Memo, __index: Int, _args: _KotlinParser_Args?) {
        val _index = Ref.IntRef()
        _index.element = __index

        val _arg_index = Ref.IntRef()
        val _arg_input_index = Ref.IntRef()

        var _label = -1
        while(true) {
            when(_label) {
                -1 -> {
                    // LITERAL Token.VAL
                    _ParseLiteralObj(_memo, _index, Token.VAL)

                    break
                }
            }
        }
    }


    open fun VAR(_memo: _KotlinParser_Memo, __index: Int, _args: _KotlinParser_Args?) {
        val _index = Ref.IntRef()
        _index.element = __index

        val _arg_index = Ref.IntRef()
        val _arg_input_index = Ref.IntRef()

        var _label = -1
        while(true) {
            when(_label) {
                -1 -> {
                    // LITERAL Token.VAR
                    _ParseLiteralObj(_memo, _index, Token.VAR)

                    break
                }
            }
        }
    }


    open fun TYPE_ALIAS(_memo: _KotlinParser_Memo, __index: Int, _args: _KotlinParser_Args?) {
        val _index = Ref.IntRef()
        _index.element = __index

        val _arg_index = Ref.IntRef()
        val _arg_input_index = Ref.IntRef()

        var _label = -1
        while(true) {
            when(_label) {
                -1 -> {
                    // LITERAL Token.TYPE_ALIAS
                    _ParseLiteralObj(_memo, _index, Token.TYPE_ALIAS)

                    break
                }
            }
        }
    }


    open fun CONSTRUCTOR(_memo: _KotlinParser_Memo, __index: Int, _args: _KotlinParser_Args?) {
        val _index = Ref.IntRef()
        _index.element = __index

        val _arg_index = Ref.IntRef()
        val _arg_input_index = Ref.IntRef()

        var _label = -1
        while(true) {
            when(_label) {
                -1 -> {
                    // LITERAL Token.CONSTRUCTOR
                    _ParseLiteralObj(_memo, _index, Token.CONSTRUCTOR)

                    break
                }
            }
        }
    }


    open fun BY(_memo: _KotlinParser_Memo, __index: Int, _args: _KotlinParser_Args?) {
        val _index = Ref.IntRef()
        _index.element = __index

        val _arg_index = Ref.IntRef()
        val _arg_input_index = Ref.IntRef()

        var _label = -1
        while(true) {
            when(_label) {
                -1 -> {
                    // LITERAL Token.BY
                    _ParseLiteralObj(_memo, _index, Token.BY)

                    break
                }
            }
        }
    }


    open fun COMPANION(_memo: _KotlinParser_Memo, __index: Int, _args: _KotlinParser_Args?) {
        val _index = Ref.IntRef()
        _index.element = __index

        val _arg_index = Ref.IntRef()
        val _arg_input_index = Ref.IntRef()

        var _label = -1
        while(true) {
            when(_label) {
                -1 -> {
                    // LITERAL Token.COMPANION
                    _ParseLiteralObj(_memo, _index, Token.COMPANION)

                    break
                }
            }
        }
    }


    open fun INIT(_memo: _KotlinParser_Memo, __index: Int, _args: _KotlinParser_Args?) {
        val _index = Ref.IntRef()
        _index.element = __index

        val _arg_index = Ref.IntRef()
        val _arg_input_index = Ref.IntRef()

        var _label = -1
        while(true) {
            when(_label) {
                -1 -> {
                    // LITERAL Token.INIT
                    _ParseLiteralObj(_memo, _index, Token.INIT)

                    break
                }
            }
        }
    }


    open fun THIS(_memo: _KotlinParser_Memo, __index: Int, _args: _KotlinParser_Args?) {
        val _index = Ref.IntRef()
        _index.element = __index

        val _arg_index = Ref.IntRef()
        val _arg_input_index = Ref.IntRef()

        var _label = -1
        while(true) {
            when(_label) {
                -1 -> {
                    // LITERAL Token.THIS
                    _ParseLiteralObj(_memo, _index, Token.THIS)

                    break
                }
            }
        }
    }


    open fun SUPER(_memo: _KotlinParser_Memo, __index: Int, _args: _KotlinParser_Args?) {
        val _index = Ref.IntRef()
        _index.element = __index

        val _arg_index = Ref.IntRef()
        val _arg_input_index = Ref.IntRef()

        var _label = -1
        while(true) {
            when(_label) {
                -1 -> {
                    // LITERAL Token.SUPER
                    _ParseLiteralObj(_memo, _index, Token.SUPER)

                    break
                }
            }
        }
    }


    open fun TYPEOF(_memo: _KotlinParser_Memo, __index: Int, _args: _KotlinParser_Args?) {
        val _index = Ref.IntRef()
        _index.element = __index

        val _arg_index = Ref.IntRef()
        val _arg_input_index = Ref.IntRef()

        var _label = -1
        while(true) {
            when(_label) {
                -1 -> {
                    // LITERAL Token.TYPEOF
                    _ParseLiteralObj(_memo, _index, Token.TYPEOF)

                    break
                }
            }
        }
    }


    open fun WHERE(_memo: _KotlinParser_Memo, __index: Int, _args: _KotlinParser_Args?) {
        val _index = Ref.IntRef()
        _index.element = __index

        val _arg_index = Ref.IntRef()
        val _arg_input_index = Ref.IntRef()

        var _label = -1
        while(true) {
            when(_label) {
                -1 -> {
                    // LITERAL Token.WHERE
                    _ParseLiteralObj(_memo, _index, Token.WHERE)

                    break
                }
            }
        }
    }


    open fun IF(_memo: _KotlinParser_Memo, __index: Int, _args: _KotlinParser_Args?) {
        val _index = Ref.IntRef()
        _index.element = __index

        val _arg_index = Ref.IntRef()
        val _arg_input_index = Ref.IntRef()

        var _label = -1
        while(true) {
            when(_label) {
                -1 -> {
                    // LITERAL Token.IF
                    _ParseLiteralObj(_memo, _index, Token.IF)

                    break
                }
            }
        }
    }


    open fun ELSE(_memo: _KotlinParser_Memo, __index: Int, _args: _KotlinParser_Args?) {
        val _index = Ref.IntRef()
        _index.element = __index

        val _arg_index = Ref.IntRef()
        val _arg_input_index = Ref.IntRef()

        var _label = -1
        while(true) {
            when(_label) {
                -1 -> {
                    // LITERAL Token.ELSE
                    _ParseLiteralObj(_memo, _index, Token.ELSE)

                    break
                }
            }
        }
    }


    open fun WHEN(_memo: _KotlinParser_Memo, __index: Int, _args: _KotlinParser_Args?) {
        val _index = Ref.IntRef()
        _index.element = __index

        val _arg_index = Ref.IntRef()
        val _arg_input_index = Ref.IntRef()

        var _label = -1
        while(true) {
            when(_label) {
                -1 -> {
                    // LITERAL Token.WHEN
                    _ParseLiteralObj(_memo, _index, Token.WHEN)

                    break
                }
            }
        }
    }


    open fun TRY(_memo: _KotlinParser_Memo, __index: Int, _args: _KotlinParser_Args?) {
        val _index = Ref.IntRef()
        _index.element = __index

        val _arg_index = Ref.IntRef()
        val _arg_input_index = Ref.IntRef()

        var _label = -1
        while(true) {
            when(_label) {
                -1 -> {
                    // LITERAL Token.TRY
                    _ParseLiteralObj(_memo, _index, Token.TRY)

                    break
                }
            }
        }
    }


    open fun CATCH(_memo: _KotlinParser_Memo, __index: Int, _args: _KotlinParser_Args?) {
        val _index = Ref.IntRef()
        _index.element = __index

        val _arg_index = Ref.IntRef()
        val _arg_input_index = Ref.IntRef()

        var _label = -1
        while(true) {
            when(_label) {
                -1 -> {
                    // LITERAL Token.CATCH
                    _ParseLiteralObj(_memo, _index, Token.CATCH)

                    break
                }
            }
        }
    }


    open fun FINALLY(_memo: _KotlinParser_Memo, __index: Int, _args: _KotlinParser_Args?) {
        val _index = Ref.IntRef()
        _index.element = __index

        val _arg_index = Ref.IntRef()
        val _arg_input_index = Ref.IntRef()

        var _label = -1
        while(true) {
            when(_label) {
                -1 -> {
                    // LITERAL Token.FINALLY
                    _ParseLiteralObj(_memo, _index, Token.FINALLY)

                    break
                }
            }
        }
    }


    open fun FOR(_memo: _KotlinParser_Memo, __index: Int, _args: _KotlinParser_Args?) {
        val _index = Ref.IntRef()
        _index.element = __index

        val _arg_index = Ref.IntRef()
        val _arg_input_index = Ref.IntRef()

        var _label = -1
        while(true) {
            when(_label) {
                -1 -> {
                    // LITERAL Token.FOR
                    _ParseLiteralObj(_memo, _index, Token.FOR)

                    break
                }
            }
        }
    }


    open fun DO(_memo: _KotlinParser_Memo, __index: Int, _args: _KotlinParser_Args?) {
        val _index = Ref.IntRef()
        _index.element = __index

        val _arg_index = Ref.IntRef()
        val _arg_input_index = Ref.IntRef()

        var _label = -1
        while(true) {
            when(_label) {
                -1 -> {
                    // LITERAL Token.DO
                    _ParseLiteralObj(_memo, _index, Token.DO)

                    break
                }
            }
        }
    }


    open fun WHILE(_memo: _KotlinParser_Memo, __index: Int, _args: _KotlinParser_Args?) {
        val _index = Ref.IntRef()
        _index.element = __index

        val _arg_index = Ref.IntRef()
        val _arg_input_index = Ref.IntRef()

        var _label = -1
        while(true) {
            when(_label) {
                -1 -> {
                    // LITERAL Token.WHILE
                    _ParseLiteralObj(_memo, _index, Token.WHILE)

                    break
                }
            }
        }
    }


    open fun THROW(_memo: _KotlinParser_Memo, __index: Int, _args: _KotlinParser_Args?) {
        val _index = Ref.IntRef()
        _index.element = __index

        val _arg_index = Ref.IntRef()
        val _arg_input_index = Ref.IntRef()

        var _label = -1
        while(true) {
            when(_label) {
                -1 -> {
                    // LITERAL Token.THROW
                    _ParseLiteralObj(_memo, _index, Token.THROW)

                    break
                }
            }
        }
    }


    open fun RETURN(_memo: _KotlinParser_Memo, __index: Int, _args: _KotlinParser_Args?) {
        val _index = Ref.IntRef()
        _index.element = __index

        val _arg_index = Ref.IntRef()
        val _arg_input_index = Ref.IntRef()

        var _label = -1
        while(true) {
            when(_label) {
                -1 -> {
                    // LITERAL Token.RETURN
                    _ParseLiteralObj(_memo, _index, Token.RETURN)

                    break
                }
            }
        }
    }


    open fun CONTINUE(_memo: _KotlinParser_Memo, __index: Int, _args: _KotlinParser_Args?) {
        val _index = Ref.IntRef()
        _index.element = __index

        val _arg_index = Ref.IntRef()
        val _arg_input_index = Ref.IntRef()

        var _label = -1
        while(true) {
            when(_label) {
                -1 -> {
                    // LITERAL Token.CONTINUE
                    _ParseLiteralObj(_memo, _index, Token.CONTINUE)

                    break
                }
            }
        }
    }


    open fun BREAK(_memo: _KotlinParser_Memo, __index: Int, _args: _KotlinParser_Args?) {
        val _index = Ref.IntRef()
        _index.element = __index

        val _arg_index = Ref.IntRef()
        val _arg_input_index = Ref.IntRef()

        var _label = -1
        while(true) {
            when(_label) {
                -1 -> {
                    // LITERAL Token.BREAK
                    _ParseLiteralObj(_memo, _index, Token.BREAK)

                    break
                }
            }
        }
    }


    open fun AS(_memo: _KotlinParser_Memo, __index: Int, _args: _KotlinParser_Args?) {
        val _index = Ref.IntRef()
        _index.element = __index

        val _arg_index = Ref.IntRef()
        val _arg_input_index = Ref.IntRef()

        var _label = -1
        while(true) {
            when(_label) {
                -1 -> {
                    // LITERAL Token.AS
                    _ParseLiteralObj(_memo, _index, Token.AS)

                    break
                }
            }
        }
    }


    open fun IS(_memo: _KotlinParser_Memo, __index: Int, _args: _KotlinParser_Args?) {
        val _index = Ref.IntRef()
        _index.element = __index

        val _arg_index = Ref.IntRef()
        val _arg_input_index = Ref.IntRef()

        var _label = -1
        while(true) {
            when(_label) {
                -1 -> {
                    // LITERAL Token.IS
                    _ParseLiteralObj(_memo, _index, Token.IS)

                    break
                }
            }
        }
    }


    open fun IN(_memo: _KotlinParser_Memo, __index: Int, _args: _KotlinParser_Args?) {
        val _index = Ref.IntRef()
        _index.element = __index

        val _arg_index = Ref.IntRef()
        val _arg_input_index = Ref.IntRef()

        var _label = -1
        while(true) {
            when(_label) {
                -1 -> {
                    // LITERAL Token.IN
                    _ParseLiteralObj(_memo, _index, Token.IN)

                    break
                }
            }
        }
    }


    open fun NOT_IS(_memo: _KotlinParser_Memo, __index: Int, _args: _KotlinParser_Args?) {
        val _index = Ref.IntRef()
        _index.element = __index

        val _arg_index = Ref.IntRef()
        val _arg_input_index = Ref.IntRef()

        var _label = -1
        while(true) {
            when(_label) {
                -1 -> {
                    // LITERAL Token.NOT_IS
                    _ParseLiteralObj(_memo, _index, Token.NOT_IS)

                    break
                }
            }
        }
    }


    open fun NOT_IN(_memo: _KotlinParser_Memo, __index: Int, _args: _KotlinParser_Args?) {
        val _index = Ref.IntRef()
        _index.element = __index

        val _arg_index = Ref.IntRef()
        val _arg_input_index = Ref.IntRef()

        var _label = -1
        while(true) {
            when(_label) {
                -1 -> {
                    // LITERAL Token.NOT_IN
                    _ParseLiteralObj(_memo, _index, Token.NOT_IN)

                    break
                }
            }
        }
    }


    open fun OUT(_memo: _KotlinParser_Memo, __index: Int, _args: _KotlinParser_Args?) {
        val _index = Ref.IntRef()
        _index.element = __index

        val _arg_index = Ref.IntRef()
        val _arg_input_index = Ref.IntRef()

        var _label = -1
        while(true) {
            when(_label) {
                -1 -> {
                    // LITERAL Token.OUT
                    _ParseLiteralObj(_memo, _index, Token.OUT)

                    break
                }
            }
        }
    }


    open fun FIELD(_memo: _KotlinParser_Memo, __index: Int, _args: _KotlinParser_Args?) {
        val _index = Ref.IntRef()
        _index.element = __index

        val _arg_index = Ref.IntRef()
        val _arg_input_index = Ref.IntRef()

        var _label = -1
        while(true) {
            when(_label) {
                -1 -> {
                    // LITERAL Token.FIELD
                    _ParseLiteralObj(_memo, _index, Token.FIELD)

                    break
                }
            }
        }
    }


    open fun PROPERTY(_memo: _KotlinParser_Memo, __index: Int, _args: _KotlinParser_Args?) {
        val _index = Ref.IntRef()
        _index.element = __index

        val _arg_index = Ref.IntRef()
        val _arg_input_index = Ref.IntRef()

        var _label = -1
        while(true) {
            when(_label) {
                -1 -> {
                    // LITERAL Token.PROPERTY
                    _ParseLiteralObj(_memo, _index, Token.PROPERTY)

                    break
                }
            }
        }
    }


    open fun GET(_memo: _KotlinParser_Memo, __index: Int, _args: _KotlinParser_Args?) {
        val _index = Ref.IntRef()
        _index.element = __index

        val _arg_index = Ref.IntRef()
        val _arg_input_index = Ref.IntRef()

        var _label = -1
        while(true) {
            when(_label) {
                -1 -> {
                    // LITERAL Token.GET
                    _ParseLiteralObj(_memo, _index, Token.GET)

                    break
                }
            }
        }
    }


    open fun SET(_memo: _KotlinParser_Memo, __index: Int, _args: _KotlinParser_Args?) {
        val _index = Ref.IntRef()
        _index.element = __index

        val _arg_index = Ref.IntRef()
        val _arg_input_index = Ref.IntRef()

        var _label = -1
        while(true) {
            when(_label) {
                -1 -> {
                    // LITERAL Token.SET
                    _ParseLiteralObj(_memo, _index, Token.SET)

                    break
                }
            }
        }
    }


    open fun RECEIVER(_memo: _KotlinParser_Memo, __index: Int, _args: _KotlinParser_Args?) {
        val _index = Ref.IntRef()
        _index.element = __index

        val _arg_index = Ref.IntRef()
        val _arg_input_index = Ref.IntRef()

        var _label = -1
        while(true) {
            when(_label) {
                -1 -> {
                    // LITERAL Token.RECEIVER
                    _ParseLiteralObj(_memo, _index, Token.RECEIVER)

                    break
                }
            }
        }
    }


    open fun PARAM(_memo: _KotlinParser_Memo, __index: Int, _args: _KotlinParser_Args?) {
        val _index = Ref.IntRef()
        _index.element = __index

        val _arg_index = Ref.IntRef()
        val _arg_input_index = Ref.IntRef()

        var _label = -1
        while(true) {
            when(_label) {
                -1 -> {
                    // LITERAL Token.PARAM
                    _ParseLiteralObj(_memo, _index, Token.PARAM)

                    break
                }
            }
        }
    }


    open fun SETPARAM(_memo: _KotlinParser_Memo, __index: Int, _args: _KotlinParser_Args?) {
        val _index = Ref.IntRef()
        _index.element = __index

        val _arg_index = Ref.IntRef()
        val _arg_input_index = Ref.IntRef()

        var _label = -1
        while(true) {
            when(_label) {
                -1 -> {
                    // LITERAL Token.SETPARAM
                    _ParseLiteralObj(_memo, _index, Token.SETPARAM)

                    break
                }
            }
        }
    }


    open fun DELEGATE(_memo: _KotlinParser_Memo, __index: Int, _args: _KotlinParser_Args?) {
        val _index = Ref.IntRef()
        _index.element = __index

        val _arg_index = Ref.IntRef()
        val _arg_input_index = Ref.IntRef()

        var _label = -1
        while(true) {
            when(_label) {
                -1 -> {
                    // LITERAL Token.DELEGATE
                    _ParseLiteralObj(_memo, _index, Token.DELEGATE)

                    break
                }
            }
        }
    }


    open fun DYNAMIC(_memo: _KotlinParser_Memo, __index: Int, _args: _KotlinParser_Args?) {
        val _index = Ref.IntRef()
        _index.element = __index

        val _arg_index = Ref.IntRef()
        val _arg_input_index = Ref.IntRef()

        var _label = -1
        while(true) {
            when(_label) {
                -1 -> {
                    // LITERAL Token.DYNAMIC
                    _ParseLiteralObj(_memo, _index, Token.DYNAMIC)

                    break
                }
            }
        }
    }


    open fun PUBLIC(_memo: _KotlinParser_Memo, __index: Int, _args: _KotlinParser_Args?) {
        val _index = Ref.IntRef()
        _index.element = __index

        val _arg_index = Ref.IntRef()
        val _arg_input_index = Ref.IntRef()

        var _label = -1
        while(true) {
            when(_label) {
                -1 -> {
                    // LITERAL Token.PUBLIC
                    _ParseLiteralObj(_memo, _index, Token.PUBLIC)

                    break
                }
            }
        }
    }


    open fun PRIVATE(_memo: _KotlinParser_Memo, __index: Int, _args: _KotlinParser_Args?) {
        val _index = Ref.IntRef()
        _index.element = __index

        val _arg_index = Ref.IntRef()
        val _arg_input_index = Ref.IntRef()

        var _label = -1
        while(true) {
            when(_label) {
                -1 -> {
                    // LITERAL Token.PRIVATE
                    _ParseLiteralObj(_memo, _index, Token.PRIVATE)

                    break
                }
            }
        }
    }


    open fun PROTECTED(_memo: _KotlinParser_Memo, __index: Int, _args: _KotlinParser_Args?) {
        val _index = Ref.IntRef()
        _index.element = __index

        val _arg_index = Ref.IntRef()
        val _arg_input_index = Ref.IntRef()

        var _label = -1
        while(true) {
            when(_label) {
                -1 -> {
                    // LITERAL Token.PROTECTED
                    _ParseLiteralObj(_memo, _index, Token.PROTECTED)

                    break
                }
            }
        }
    }


    open fun INTERNAL(_memo: _KotlinParser_Memo, __index: Int, _args: _KotlinParser_Args?) {
        val _index = Ref.IntRef()
        _index.element = __index

        val _arg_index = Ref.IntRef()
        val _arg_input_index = Ref.IntRef()

        var _label = -1
        while(true) {
            when(_label) {
                -1 -> {
                    // LITERAL Token.INTERNAL
                    _ParseLiteralObj(_memo, _index, Token.INTERNAL)

                    break
                }
            }
        }
    }


    open fun ENUM(_memo: _KotlinParser_Memo, __index: Int, _args: _KotlinParser_Args?) {
        val _index = Ref.IntRef()
        _index.element = __index

        val _arg_index = Ref.IntRef()
        val _arg_input_index = Ref.IntRef()

        var _label = -1
        while(true) {
            when(_label) {
                -1 -> {
                    // LITERAL Token.ENUM
                    _ParseLiteralObj(_memo, _index, Token.ENUM)

                    break
                }
            }
        }
    }


    open fun SEALED(_memo: _KotlinParser_Memo, __index: Int, _args: _KotlinParser_Args?) {
        val _index = Ref.IntRef()
        _index.element = __index

        val _arg_index = Ref.IntRef()
        val _arg_input_index = Ref.IntRef()

        var _label = -1
        while(true) {
            when(_label) {
                -1 -> {
                    // LITERAL Token.SEALED
                    _ParseLiteralObj(_memo, _index, Token.SEALED)

                    break
                }
            }
        }
    }


    open fun ANNOTATION_(_memo: _KotlinParser_Memo, __index: Int, _args: _KotlinParser_Args?) {
        val _index = Ref.IntRef()
        _index.element = __index

        val _arg_index = Ref.IntRef()
        val _arg_input_index = Ref.IntRef()

        var _label = -1
        while(true) {
            when(_label) {
                -1 -> {
                    // LITERAL Token.ANNOTATION
                    _ParseLiteralObj(_memo, _index, Token.ANNOTATION)

                    break
                }
            }
        }
    }


    open fun DATA(_memo: _KotlinParser_Memo, __index: Int, _args: _KotlinParser_Args?) {
        val _index = Ref.IntRef()
        _index.element = __index

        val _arg_index = Ref.IntRef()
        val _arg_input_index = Ref.IntRef()

        var _label = -1
        while(true) {
            when(_label) {
                -1 -> {
                    // LITERAL Token.DATA
                    _ParseLiteralObj(_memo, _index, Token.DATA)

                    break
                }
            }
        }
    }


    open fun INNER(_memo: _KotlinParser_Memo, __index: Int, _args: _KotlinParser_Args?) {
        val _index = Ref.IntRef()
        _index.element = __index

        val _arg_index = Ref.IntRef()
        val _arg_input_index = Ref.IntRef()

        var _label = -1
        while(true) {
            when(_label) {
                -1 -> {
                    // LITERAL Token.INNER
                    _ParseLiteralObj(_memo, _index, Token.INNER)

                    break
                }
            }
        }
    }


    open fun TAILREC(_memo: _KotlinParser_Memo, __index: Int, _args: _KotlinParser_Args?) {
        val _index = Ref.IntRef()
        _index.element = __index

        val _arg_index = Ref.IntRef()
        val _arg_input_index = Ref.IntRef()

        var _label = -1
        while(true) {
            when(_label) {
                -1 -> {
                    // LITERAL Token.TAILREC
                    _ParseLiteralObj(_memo, _index, Token.TAILREC)

                    break
                }
            }
        }
    }


    open fun OPERATOR(_memo: _KotlinParser_Memo, __index: Int, _args: _KotlinParser_Args?) {
        val _index = Ref.IntRef()
        _index.element = __index

        val _arg_index = Ref.IntRef()
        val _arg_input_index = Ref.IntRef()

        var _label = -1
        while(true) {
            when(_label) {
                -1 -> {
                    // LITERAL Token.OPERATOR
                    _ParseLiteralObj(_memo, _index, Token.OPERATOR)

                    break
                }
            }
        }
    }


    open fun INLINE(_memo: _KotlinParser_Memo, __index: Int, _args: _KotlinParser_Args?) {
        val _index = Ref.IntRef()
        _index.element = __index

        val _arg_index = Ref.IntRef()
        val _arg_input_index = Ref.IntRef()

        var _label = -1
        while(true) {
            when(_label) {
                -1 -> {
                    // LITERAL Token.INLINE
                    _ParseLiteralObj(_memo, _index, Token.INLINE)

                    break
                }
            }
        }
    }


    open fun INFIX(_memo: _KotlinParser_Memo, __index: Int, _args: _KotlinParser_Args?) {
        val _index = Ref.IntRef()
        _index.element = __index

        val _arg_index = Ref.IntRef()
        val _arg_input_index = Ref.IntRef()

        var _label = -1
        while(true) {
            when(_label) {
                -1 -> {
                    // LITERAL Token.INFIX
                    _ParseLiteralObj(_memo, _index, Token.INFIX)

                    break
                }
            }
        }
    }


    open fun EXTERNAL(_memo: _KotlinParser_Memo, __index: Int, _args: _KotlinParser_Args?) {
        val _index = Ref.IntRef()
        _index.element = __index

        val _arg_index = Ref.IntRef()
        val _arg_input_index = Ref.IntRef()

        var _label = -1
        while(true) {
            when(_label) {
                -1 -> {
                    // LITERAL Token.EXTERNAL
                    _ParseLiteralObj(_memo, _index, Token.EXTERNAL)

                    break
                }
            }
        }
    }


    open fun SUSPEND(_memo: _KotlinParser_Memo, __index: Int, _args: _KotlinParser_Args?) {
        val _index = Ref.IntRef()
        _index.element = __index

        val _arg_index = Ref.IntRef()
        val _arg_input_index = Ref.IntRef()

        var _label = -1
        while(true) {
            when(_label) {
                -1 -> {
                    // LITERAL Token.SUSPEND
                    _ParseLiteralObj(_memo, _index, Token.SUSPEND)

                    break
                }
            }
        }
    }


    open fun OVERRIDE(_memo: _KotlinParser_Memo, __index: Int, _args: _KotlinParser_Args?) {
        val _index = Ref.IntRef()
        _index.element = __index

        val _arg_index = Ref.IntRef()
        val _arg_input_index = Ref.IntRef()

        var _label = -1
        while(true) {
            when(_label) {
                -1 -> {
                    // LITERAL Token.OVERRIDE
                    _ParseLiteralObj(_memo, _index, Token.OVERRIDE)

                    break
                }
            }
        }
    }


    open fun ABSTRACT(_memo: _KotlinParser_Memo, __index: Int, _args: _KotlinParser_Args?) {
        val _index = Ref.IntRef()
        _index.element = __index

        val _arg_index = Ref.IntRef()
        val _arg_input_index = Ref.IntRef()

        var _label = -1
        while(true) {
            when(_label) {
                -1 -> {
                    // LITERAL Token.ABSTRACT
                    _ParseLiteralObj(_memo, _index, Token.ABSTRACT)

                    break
                }
            }
        }
    }


    open fun FINAL(_memo: _KotlinParser_Memo, __index: Int, _args: _KotlinParser_Args?) {
        val _index = Ref.IntRef()
        _index.element = __index

        val _arg_index = Ref.IntRef()
        val _arg_input_index = Ref.IntRef()

        var _label = -1
        while(true) {
            when(_label) {
                -1 -> {
                    // LITERAL Token.FINAL
                    _ParseLiteralObj(_memo, _index, Token.FINAL)

                    break
                }
            }
        }
    }


    open fun OPEN(_memo: _KotlinParser_Memo, __index: Int, _args: _KotlinParser_Args?) {
        val _index = Ref.IntRef()
        _index.element = __index

        val _arg_index = Ref.IntRef()
        val _arg_input_index = Ref.IntRef()

        var _label = -1
        while(true) {
            when(_label) {
                -1 -> {
                    // LITERAL Token.OPEN
                    _ParseLiteralObj(_memo, _index, Token.OPEN)

                    break
                }
            }
        }
    }


    open fun CONST(_memo: _KotlinParser_Memo, __index: Int, _args: _KotlinParser_Args?) {
        val _index = Ref.IntRef()
        _index.element = __index

        val _arg_index = Ref.IntRef()
        val _arg_input_index = Ref.IntRef()

        var _label = -1
        while(true) {
            when(_label) {
                -1 -> {
                    // LITERAL Token.CONST
                    _ParseLiteralObj(_memo, _index, Token.CONST)

                    break
                }
            }
        }
    }


    open fun LATEINIT(_memo: _KotlinParser_Memo, __index: Int, _args: _KotlinParser_Args?) {
        val _index = Ref.IntRef()
        _index.element = __index

        val _arg_index = Ref.IntRef()
        val _arg_input_index = Ref.IntRef()

        var _label = -1
        while(true) {
            when(_label) {
                -1 -> {
                    // LITERAL Token.LATEINIT
                    _ParseLiteralObj(_memo, _index, Token.LATEINIT)

                    break
                }
            }
        }
    }


    open fun VARARG(_memo: _KotlinParser_Memo, __index: Int, _args: _KotlinParser_Args?) {
        val _index = Ref.IntRef()
        _index.element = __index

        val _arg_index = Ref.IntRef()
        val _arg_input_index = Ref.IntRef()

        var _label = -1
        while(true) {
            when(_label) {
                -1 -> {
                    // LITERAL Token.VARARG
                    _ParseLiteralObj(_memo, _index, Token.VARARG)

                    break
                }
            }
        }
    }


    open fun NOINLINE(_memo: _KotlinParser_Memo, __index: Int, _args: _KotlinParser_Args?) {
        val _index = Ref.IntRef()
        _index.element = __index

        val _arg_index = Ref.IntRef()
        val _arg_input_index = Ref.IntRef()

        var _label = -1
        while(true) {
            when(_label) {
                -1 -> {
                    // LITERAL Token.NOINLINE
                    _ParseLiteralObj(_memo, _index, Token.NOINLINE)

                    break
                }
            }
        }
    }


    open fun CROSSINLINE(_memo: _KotlinParser_Memo, __index: Int, _args: _KotlinParser_Args?) {
        val _index = Ref.IntRef()
        _index.element = __index

        val _arg_index = Ref.IntRef()
        val _arg_input_index = Ref.IntRef()

        var _label = -1
        while(true) {
            when(_label) {
                -1 -> {
                    // LITERAL Token.CROSSINLINE
                    _ParseLiteralObj(_memo, _index, Token.CROSSINLINE)

                    break
                }
            }
        }
    }


    open fun REIFIED(_memo: _KotlinParser_Memo, __index: Int, _args: _KotlinParser_Args?) {
        val _index = Ref.IntRef()
        _index.element = __index

        val _arg_index = Ref.IntRef()
        val _arg_input_index = Ref.IntRef()

        var _label = -1
        while(true) {
            when(_label) {
                -1 -> {
                    // LITERAL Token.REIFIED
                    _ParseLiteralObj(_memo, _index, Token.REIFIED)

                    break
                }
            }
        }
    }


    open fun TRUE(_memo: _KotlinParser_Memo, __index: Int, _args: _KotlinParser_Args?) {
        val _index = Ref.IntRef()
        _index.element = __index

        val _arg_index = Ref.IntRef()
        val _arg_input_index = Ref.IntRef()

        var _label = -1
        while(true) {
            when(_label) {
                -1 -> {
                    // LITERAL Token.TRUE
                    _ParseLiteralObj(_memo, _index, Token.TRUE)

                    break
                }
            }
        }
    }


    open fun FALSE(_memo: _KotlinParser_Memo, __index: Int, _args: _KotlinParser_Args?) {
        val _index = Ref.IntRef()
        _index.element = __index

        val _arg_index = Ref.IntRef()
        val _arg_input_index = Ref.IntRef()

        var _label = -1
        while(true) {
            when(_label) {
                -1 -> {
                    // LITERAL Token.FALSE
                    _ParseLiteralObj(_memo, _index, Token.FALSE)

                    break
                }
            }
        }
    }


    open fun NULL(_memo: _KotlinParser_Memo, __index: Int, _args: _KotlinParser_Args?) {
        val _index = Ref.IntRef()
        _index.element = __index

        val _arg_index = Ref.IntRef()
        val _arg_input_index = Ref.IntRef()

        var _label = -1
        while(true) {
            when(_label) {
                -1 -> {
                    // LITERAL Token.NULL
                    _ParseLiteralObj(_memo, _index, Token.NULL)

                    break
                }
            }
        }
    }


    open fun VALUE(_memo: _KotlinParser_Memo, __index: Int, _args: _KotlinParser_Args?) {
        val _index = Ref.IntRef()
        _index.element = __index

        val _arg_index = Ref.IntRef()
        val _arg_input_index = Ref.IntRef()

        var _label = -1
        while(true) {
            when(_label) {
                -1 -> {
                    // LITERAL Token.VALUE
                    _ParseLiteralObj(_memo, _index, Token.VALUE)

                    break
                }
            }
        }
    }


    open fun EXPECT(_memo: _KotlinParser_Memo, __index: Int, _args: _KotlinParser_Args?) {
        val _index = Ref.IntRef()
        _index.element = __index

        val _arg_index = Ref.IntRef()
        val _arg_input_index = Ref.IntRef()

        var _label = -1
        while(true) {
            when(_label) {
                -1 -> {
                    // LITERAL Token.EXPECT
                    _ParseLiteralObj(_memo, _index, Token.EXPECT)

                    break
                }
            }
        }
    }


    open fun ACTUAL(_memo: _KotlinParser_Memo, __index: Int, _args: _KotlinParser_Args?) {
        val _index = Ref.IntRef()
        _index.element = __index

        val _arg_index = Ref.IntRef()
        val _arg_input_index = Ref.IntRef()

        var _label = -1
        while(true) {
            when(_label) {
                -1 -> {
                    // LITERAL Token.ACTUAL
                    _ParseLiteralObj(_memo, _index, Token.ACTUAL)

                    break
                }
            }
        }
    }


    open fun EXCL_EXCL(_memo: _KotlinParser_Memo, __index: Int, _args: _KotlinParser_Args?) {
        val _index = Ref.IntRef()
        _index.element = __index

        val _arg_index = Ref.IntRef()
        val _arg_input_index = Ref.IntRef()

        var _label = -1
        while(true) {
            when(_label) {
                -1 -> {
                    // LITERAL Token.EXCL_EXCL
                    _ParseLiteralObj(_memo, _index, Token.EXCL_EXCL)

                    break
                }
            }
        }
    }


    open fun QUEST_DOT(_memo: _KotlinParser_Memo, __index: Int, _args: _KotlinParser_Args?) {
        val _index = Ref.IntRef()
        _index.element = __index

        val _arg_index = Ref.IntRef()
        val _arg_input_index = Ref.IntRef()

        var _label = -1
        while(true) {
            when(_label) {
                -1 -> {
                    // LITERAL Token.QUEST_DOT
                    _ParseLiteralObj(_memo, _index, Token.QUEST_DOT)

                    break
                }
            }
        }
    }

}
