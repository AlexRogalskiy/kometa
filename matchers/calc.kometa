import kometa.CharMatcher;

kometa Calc<Char, Int> : CharMatcher<Int> {
    override TOP = Expression;

    Expression = Additive;

    Additive = Add | Sub | Multiplicative;

    Add = BinaryOp(Multiplicative, '+', Additive)
       -> { it.results.filterNotNull().reduce { a, b -> a + b } };
    Sub = BinaryOp(Multiplicative, '-', Additive)
       -> { it.results.filterNotNull().reduce { a, b -> a - b } };

    Multiplicative = Multiply | Divide;
    Multiplicative = Number(DecimalDigit);

    Multiply = BinaryOp(Number, "*", Multiplicative, DecimalDigit)
            -> { it.results.filterNotNull().reduce { a, b -> a * b }!! };
    Divide = BinaryOp(Number, "/", Multiplicative, DecimalDigit)
          -> { it.results.filterNotNull().reduce { a, b -> a / b } };

    BinaryOp :first :op :second .?:type = first(type):a KW(op) second:b
                                       -> { arrayListOf<Int>(a?.asResult()!!, b?.asResult()!!) };

    Number :type = Digits(type):n WS* -> { n?.asResult()!! };

    Digits :type = type+ -> { it!!.inputs.joinToString().toInt() };

    DecimalDigit = ['0'-'9'];
    KW :str = str WS*;
    WS = ' ' | '\n' | '\r' | '\t';
}
